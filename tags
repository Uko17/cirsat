!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACTIVE_HIGH	lib/lorina/lorina/blif.hpp	/^  , ACTIVE_HIGH$/;"	e	enum:lorina::blif_reader::latch_type
ACTIVE_LOW	lib/lorina/lorina/blif.hpp	/^  , ACTIVE_LOW$/;"	e	enum:lorina::blif_reader::latch_type
ASYNC	lib/lorina/lorina/blif.hpp	/^  , ASYNC$/;"	e	enum:lorina::blif_reader::latch_type
Ansi	lib/rang/rang/rang.hpp	/^    Ansi   = 1,  \/\/ Force use Ansi API$/;"	m	class:rang::style::fg::bg::fgB::bgB::control::winTerm
Auto	lib/rang/rang/rang.hpp	/^    Auto   = 0,  \/\/ (Default) automatically detects wheter Ansi or Native API$/;"	m	class:rang::style::fg::bg::fgB::bgB::control::winTerm
Auto	lib/rang/rang/rang.hpp	/^    Auto  = 1,  \/\/ (Default) autodect terminal and colorize if needed$/;"	m	class:rang::style::fg::bg::fgB::bgB::control
BUILDDIR	docs/Makefile	/^BUILDDIR      = build$/;"	m
BUILDDIR	docs/make.bat	/^set BUILDDIR=build$/;"	v
CIRSAT_SOLVER_HPP	include/solver.hpp	/^#define CIRSAT_SOLVER_HPP$/;"	d
ENABLE_VIRTUAL_TERMINAL_PROCESSING	lib/rang/rang/rang.hpp	/^#define ENABLE_VIRTUAL_TERMINAL_PROCESSING /;"	d
FALLING	lib/lorina/lorina/blif.hpp	/^    FALLING = 0$/;"	e	enum:lorina::blif_reader::latch_type
FMT_ALWAYS_INLINE	lib/fmt/fmt/format.h	/^#  define FMT_ALWAYS_INLINE /;"	d
FMT_ALWAYS_INLINE	lib/fmt/fmt/format.h	/^#  define FMT_ALWAYS_INLINE$/;"	d
FMT_API	lib/fmt/fmt/core.h	/^#    define FMT_API /;"	d
FMT_API	lib/fmt/fmt/core.h	/^#    define FMT_API$/;"	d
FMT_ARGS	lib/fmt/fmt/os.cc	/^#define FMT_ARGS$/;"	d	file:
FMT_ASSERT	lib/fmt/fmt/core.h	/^#    define FMT_ASSERT(/;"	d
FMT_BEGIN_NAMESPACE	lib/fmt/fmt/core.h	/^#  define FMT_BEGIN_NAMESPACE /;"	d
FMT_BUILTIN_CLZ	lib/fmt/fmt/format.h	/^#  define FMT_BUILTIN_CLZ(/;"	d
FMT_BUILTIN_CLZLL	lib/fmt/fmt/format.h	/^#  define FMT_BUILTIN_CLZLL(/;"	d
FMT_CATCH	lib/fmt/fmt/format.h	/^#  define FMT_CATCH(/;"	d
FMT_CHRONO_H_	lib/fmt/fmt/chrono.h	/^#define FMT_CHRONO_H_$/;"	d
FMT_CLANG_VERSION	lib/fmt/fmt/core.h	/^#  define FMT_CLANG_VERSION /;"	d
FMT_CLASS_API	lib/fmt/fmt/core.h	/^#  define FMT_CLASS_API /;"	d
FMT_CLASS_API	lib/fmt/fmt/core.h	/^#  define FMT_CLASS_API$/;"	d
FMT_COLOR_H_	lib/fmt/fmt/color.h	/^#define FMT_COLOR_H_$/;"	d
FMT_COMPILE_H_	lib/fmt/fmt/compile.h	/^#define FMT_COMPILE_H_$/;"	d
FMT_CONSTEXPR	lib/fmt/fmt/core.h	/^#  define FMT_CONSTEXPR /;"	d
FMT_CONSTEXPR_DECL	lib/fmt/fmt/core.h	/^#  define FMT_CONSTEXPR_DECL /;"	d
FMT_CONSTEXPR_DECL	lib/fmt/fmt/core.h	/^#  define FMT_CONSTEXPR_DECL$/;"	d
FMT_CORE_H_	lib/fmt/fmt/core.h	/^#define FMT_CORE_H_$/;"	d
FMT_CUDA_VERSION	lib/fmt/fmt/format.h	/^#  define FMT_CUDA_VERSION /;"	d
FMT_DEPRECATED	lib/fmt/fmt/core.h	/^#      define FMT_DEPRECATED /;"	d
FMT_DEPRECATED	lib/fmt/fmt/core.h	/^#    define FMT_DEPRECATED /;"	d
FMT_DEPRECATED_ALIAS	lib/fmt/fmt/core.h	/^#  define FMT_DEPRECATED_ALIAS /;"	d
FMT_DEPRECATED_ALIAS	lib/fmt/fmt/core.h	/^#  define FMT_DEPRECATED_ALIAS$/;"	d
FMT_DEPRECATED_PERCENT	lib/fmt/fmt/format.h	/^#  define FMT_DEPRECATED_PERCENT /;"	d
FMT_DETECTED_NOEXCEPT	lib/fmt/fmt/core.h	/^#  define FMT_DETECTED_NOEXCEPT /;"	d
FMT_ENABLE_IF	lib/fmt/fmt/core.h	/^#define FMT_ENABLE_IF(/;"	d
FMT_END_NAMESPACE	lib/fmt/fmt/core.h	/^#    define FMT_END_NAMESPACE /;"	d
FMT_EXCEPTIONS	lib/fmt/fmt/core.h	/^#    define FMT_EXCEPTIONS /;"	d
FMT_EXTERN	lib/fmt/fmt/core.h	/^#  define FMT_EXTERN /;"	d
FMT_EXTERN	lib/fmt/fmt/core.h	/^#  define FMT_EXTERN$/;"	d
FMT_EXTERN_TEMPLATE_API	lib/fmt/fmt/core.h	/^#    define FMT_EXTERN_TEMPLATE_API /;"	d
FMT_EXTERN_TEMPLATE_API	lib/fmt/fmt/core.h	/^#  define FMT_EXTERN_TEMPLATE_API$/;"	d
FMT_FALLTHROUGH	lib/fmt/fmt/format.h	/^#    define FMT_FALLTHROUGH /;"	d
FMT_FALLTHROUGH	lib/fmt/fmt/format.h	/^#    define FMT_FALLTHROUGH$/;"	d
FMT_FALLTHROUGH	lib/fmt/fmt/format.h	/^#  define FMT_FALLTHROUGH /;"	d
FMT_FALLTHROUGH	lib/fmt/fmt/format.h	/^#  define FMT_FALLTHROUGH$/;"	d
FMT_FORMAT_AS	lib/fmt/fmt/format.h	/^#define FMT_FORMAT_AS(/;"	d
FMT_FORMAT_H_	lib/fmt/fmt/format.h	/^#define FMT_FORMAT_H_$/;"	d
FMT_FORMAT_INL_H_	lib/fmt/fmt/format-inl.h	/^#define FMT_FORMAT_INL_H_$/;"	d
FMT_FUNC	lib/fmt/fmt/format.h	/^#  define FMT_FUNC /;"	d
FMT_GCC_VERSION	lib/fmt/fmt/core.h	/^#  define FMT_GCC_VERSION /;"	d
FMT_HAS_BUILTIN	lib/fmt/fmt/format.h	/^#  define FMT_HAS_BUILTIN(/;"	d
FMT_HAS_CPP14_ATTRIBUTE	lib/fmt/fmt/core.h	/^#define FMT_HAS_CPP14_ATTRIBUTE(/;"	d
FMT_HAS_CPP17_ATTRIBUTE	lib/fmt/fmt/core.h	/^#define FMT_HAS_CPP17_ATTRIBUTE(/;"	d
FMT_HAS_CPP_ATTRIBUTE	lib/fmt/fmt/core.h	/^#  define FMT_HAS_CPP_ATTRIBUTE(/;"	d
FMT_HAS_CXX11_NOEXCEPT	lib/fmt/fmt/core.h	/^#  define FMT_HAS_CXX11_NOEXCEPT /;"	d
FMT_HAS_FEATURE	lib/fmt/fmt/core.h	/^#  define FMT_HAS_FEATURE(/;"	d
FMT_HAS_GXX_CXX11	lib/fmt/fmt/core.h	/^#  define FMT_HAS_GXX_CXX11 /;"	d
FMT_HAS_INCLUDE	lib/fmt/fmt/core.h	/^#  define FMT_HAS_INCLUDE(/;"	d
FMT_ICC_VERSION	lib/fmt/fmt/format.h	/^#  define FMT_ICC_VERSION /;"	d
FMT_INLINE_NAMESPACE	lib/fmt/fmt/core.h	/^#    define FMT_INLINE_NAMESPACE /;"	d
FMT_INSTANTIATION_DEF_API	lib/fmt/fmt/core.h	/^#    define FMT_INSTANTIATION_DEF_API$/;"	d
FMT_INSTANTIATION_DEF_API	lib/fmt/fmt/core.h	/^#  define FMT_INSTANTIATION_DEF_API /;"	d
FMT_LOCALE_H_	lib/fmt/fmt/locale.h	/^#define FMT_LOCALE_H_$/;"	d
FMT_MAYBE_UNUSED	lib/fmt/fmt/core.h	/^#    define FMT_MAYBE_UNUSED /;"	d
FMT_MAYBE_UNUSED	lib/fmt/fmt/core.h	/^#    define FMT_MAYBE_UNUSED$/;"	d
FMT_MSC_VER	lib/fmt/fmt/core.h	/^#  define FMT_MSC_VER /;"	d
FMT_NOEXCEPT	lib/fmt/fmt/color.h	/^      FMT_NOEXCEPT;$/;"	m	class:color::emphasis::text_style
FMT_NOEXCEPT	lib/fmt/fmt/color.h	/^  FMT_CONSTEXPR color_type() FMT_NOEXCEPT : is_rgb(), value{} {}$/;"	m	struct:color::emphasis::internal::color_type
FMT_NOEXCEPT	lib/fmt/fmt/color.h	/^  FMT_CONSTEXPR color_type(color rgb_color) FMT_NOEXCEPT : is_rgb(true),$/;"	m	struct:color::emphasis::internal::color_type
FMT_NOEXCEPT	lib/fmt/fmt/color.h	/^  FMT_CONSTEXPR color_type(rgb rgb_color) FMT_NOEXCEPT : is_rgb(true), value{} {$/;"	m	struct:color::emphasis::internal::color_type
FMT_NOEXCEPT	lib/fmt/fmt/color.h	/^  FMT_CONSTEXPR color_type(terminal_color term_color) FMT_NOEXCEPT : is_rgb(),$/;"	m	struct:color::emphasis::internal::color_type
FMT_NOEXCEPT	lib/fmt/fmt/core.h	/^#    define FMT_NOEXCEPT /;"	d
FMT_NOEXCEPT	lib/fmt/fmt/core.h	/^#    define FMT_NOEXCEPT$/;"	d
FMT_NOEXCEPT	lib/fmt/fmt/format.h	/^                               string_view message) FMT_NOEXCEPT;$/;"	m	namespace:internal
FMT_NOEXCEPT	lib/fmt/fmt/format.h	/^                          string_view message) FMT_NOEXCEPT;$/;"	m	namespace:internal
FMT_NOEXCEPT	lib/fmt/fmt/os.h	/^                                  string_view message) FMT_NOEXCEPT;$/;"	m	namespace:internal
FMT_NOEXCEPT	lib/fmt/fmt/os.h	/^  FMT_API void dup2(int fd, error_code& ec) FMT_NOEXCEPT;$/;"	m	class:file
FMT_NOEXCEPT	lib/fmt/fmt/os.h	/^  FMT_API ~buffered_file() FMT_NOEXCEPT;$/;"	m	class:buffered_file
FMT_NOEXCEPT	lib/fmt/fmt/os.h	/^  FMT_API ~file() FMT_NOEXCEPT;$/;"	m	class:file
FMT_NOINLINE	lib/fmt/fmt/format.h	/^#  define FMT_NOINLINE /;"	d
FMT_NOINLINE	lib/fmt/fmt/format.h	/^#  define FMT_NOINLINE$/;"	d
FMT_NOMACRO	lib/fmt/fmt/chrono.h	/^#define FMT_NOMACRO$/;"	d
FMT_NOMACRO	lib/fmt/fmt/chrono.h	/^inline null<> localtime_r FMT_NOMACRO(...) { return null<>(); }$/;"	f	namespace:internal
FMT_NORETURN	lib/fmt/fmt/core.h	/^#  define FMT_NORETURN /;"	d
FMT_NORETURN	lib/fmt/fmt/core.h	/^#  define FMT_NORETURN$/;"	d
FMT_NO_W4275	lib/fmt/fmt/core.h	/^#    define FMT_NO_W4275 /;"	d
FMT_NO_W4275	lib/fmt/fmt/core.h	/^#    define FMT_NO_W4275$/;"	d
FMT_NUMERIC_ALIGN	lib/fmt/fmt/format.h	/^#  define FMT_NUMERIC_ALIGN /;"	d
FMT_NVCC	lib/fmt/fmt/core.h	/^#  define FMT_NVCC /;"	d
FMT_OSTREAM_H_	lib/fmt/fmt/ostream.h	/^#define FMT_OSTREAM_H_$/;"	d
FMT_OS_H_	lib/fmt/fmt/os.h	/^#define FMT_OS_H_$/;"	d
FMT_OVERRIDE	lib/fmt/fmt/core.h	/^#    define FMT_OVERRIDE /;"	d
FMT_OVERRIDE	lib/fmt/fmt/core.h	/^#    define FMT_OVERRIDE$/;"	d
FMT_OVERRIDE	lib/fmt/fmt/format.h	/^  void grow(std::size_t size) FMT_OVERRIDE;$/;"	m	class:basic_memory_buffer
FMT_OVERRIDE	lib/fmt/fmt/format.h	/^  ~format_error() FMT_NOEXCEPT FMT_OVERRIDE;$/;"	m	class:format_error
FMT_OVERRIDE	lib/fmt/fmt/format.h	/^  ~system_error() FMT_NOEXCEPT FMT_OVERRIDE;$/;"	m	class:system_error
FMT_POSIX	lib/fmt/fmt/os.h	/^#    define FMT_POSIX(/;"	d
FMT_POSIX_CALL	lib/fmt/fmt/os.h	/^#    define FMT_POSIX_CALL(/;"	d
FMT_POSIX_CALL	lib/fmt/fmt/os.h	/^#  define FMT_POSIX_CALL(/;"	d
FMT_POWERS_OF_10	lib/fmt/fmt/format-inl.h	/^#define FMT_POWERS_OF_10(/;"	d
FMT_PRINTF_H_	lib/fmt/fmt/printf.h	/^#define FMT_PRINTF_H_$/;"	d
FMT_RANGES_H_	lib/fmt/fmt/ranges.h	/^#define FMT_RANGES_H_$/;"	d
FMT_RANGE_OUTPUT_LENGTH_LIMIT	lib/fmt/fmt/ranges.h	/^#  define FMT_RANGE_OUTPUT_LENGTH_LIMIT /;"	d
FMT_RETRY	lib/fmt/fmt/os.h	/^#define FMT_RETRY(/;"	d
FMT_RETRY_VAL	lib/fmt/fmt/os.h	/^#  define FMT_RETRY_VAL(/;"	d
FMT_SAFE_DURATION_CAST	lib/fmt/fmt/chrono.h	/^#  define FMT_SAFE_DURATION_CAST /;"	d
FMT_SNPRINTF	lib/fmt/fmt/format-inl.h	/^#  define FMT_SNPRINTF /;"	d
FMT_STRING	lib/fmt/fmt/format.h	/^#define FMT_STRING(/;"	d
FMT_STRING_IMPL	lib/fmt/fmt/format.h	/^#define FMT_STRING_IMPL(/;"	d
FMT_SYSTEM	lib/fmt/fmt/os.h	/^#  define FMT_SYSTEM(/;"	d
FMT_THROW	lib/fmt/fmt/format.h	/^#      define FMT_THROW(/;"	d
FMT_TRY	lib/fmt/fmt/format.h	/^#  define FMT_TRY /;"	d
FMT_TYPE_CONSTANT	lib/fmt/fmt/core.h	/^#define FMT_TYPE_CONSTANT(/;"	d
FMT_UNICODE	lib/fmt/fmt/core.h	/^#  define FMT_UNICODE /;"	d
FMT_USE_CONSTEXPR	lib/fmt/fmt/core.h	/^#  define FMT_USE_CONSTEXPR /;"	d
FMT_USE_DOUBLE	lib/fmt/fmt/format.h	/^#  define FMT_USE_DOUBLE /;"	d
FMT_USE_EXPERIMENTAL_STRING_VIEW	lib/fmt/fmt/core.h	/^#  define FMT_USE_EXPERIMENTAL_STRING_VIEW$/;"	d
FMT_USE_FCNTL	lib/fmt/fmt/os.h	/^#  define FMT_USE_FCNTL /;"	d
FMT_USE_FLOAT	lib/fmt/fmt/format.h	/^#  define FMT_USE_FLOAT /;"	d
FMT_USE_GRISU	lib/fmt/fmt/format.h	/^#  define FMT_USE_GRISU /;"	d
FMT_USE_INT128	lib/fmt/fmt/core.h	/^#  define FMT_USE_INT128 /;"	d
FMT_USE_LONG_DOUBLE	lib/fmt/fmt/format.h	/^#  define FMT_USE_LONG_DOUBLE /;"	d
FMT_USE_NOEXCEPT	lib/fmt/fmt/core.h	/^#  define FMT_USE_NOEXCEPT /;"	d
FMT_USE_STRING_VIEW	lib/fmt/fmt/core.h	/^#  define FMT_USE_STRING_VIEW$/;"	d
FMT_USE_UDL_TEMPLATE	lib/fmt/fmt/format.h	/^#    define FMT_USE_UDL_TEMPLATE /;"	d
FMT_USE_USER_DEFINED_LITERALS	lib/fmt/fmt/format.h	/^#    define FMT_USE_USER_DEFINED_LITERALS /;"	d
FMT_VERSION	lib/fmt/fmt/core.h	/^#define FMT_VERSION /;"	d
Force	lib/rang/rang/rang.hpp	/^    Force = 2  \/\/ force ansi color output to non terminal streams$/;"	m	class:rang::style::fg::bg::fgB::bgB::control
INV	lib/lorina/lorina/genlib.hpp	/^  INV = 0,$/;"	m	class:lorina::phase_type
Impl	src/solver.cpp	/^struct Solver::Impl {$/;"	s	class:cirsat::Solver	file:
NONDETERMINISTIC	lib/lorina/lorina/aiger.hpp	/^  , NONDETERMINISTIC \/*!< Not initialized (non-deterministic value) *\/$/;"	e	enum:lorina::aiger_reader::latch_init_value
NONDETERMINISTIC	lib/lorina/lorina/blif.hpp	/^  , NONDETERMINISTIC \/*!< Not initialized (non-deterministic value) *\/$/;"	e	enum:lorina::blif_reader::latch_init_value
NONE	lib/lorina/lorina/blif.hpp	/^  , NONE$/;"	e	enum:lorina::blif_reader::latch_type
NONINV	lib/lorina/lorina/genlib.hpp	/^  NONINV = 1,$/;"	m	class:lorina::phase_type
Native	lib/rang/rang/rang.hpp	/^    Native = 2  \/\/ Force use Native API$/;"	m	class:rang::style::fg::bg::fgB::bgB::control::winTerm
ONE	lib/lorina/lorina/aiger.hpp	/^  , ONE \/*!< Initialized with 1 *\/$/;"	e	enum:lorina::aiger_reader::latch_init_value
ONE	lib/lorina/lorina/blif.hpp	/^  , ONE \/*!< Initialized with 1 *\/$/;"	e	enum:lorina::blif_reader::latch_init_value
OS_LINUX	lib/rang/rang/rang.hpp	/^#define OS_LINUX$/;"	d
OS_LINUX	lib/rang/rang/rang.hpp	/^#undef OS_LINUX$/;"	d
OS_MAC	lib/rang/rang/rang.hpp	/^#define OS_MAC$/;"	d
OS_MAC	lib/rang/rang/rang.hpp	/^#undef OS_MAC$/;"	d
OS_WIN	lib/rang/rang/rang.hpp	/^#define OS_WIN$/;"	d
OS_WIN	lib/rang/rang/rang.hpp	/^#undef OS_WIN$/;"	d
O_CREAT	lib/fmt/fmt/os.cc	/^#    define O_CREAT /;"	d	file:
O_TRUNC	lib/fmt/fmt/os.cc	/^#    define O_TRUNC /;"	d	file:
Off	lib/rang/rang/rang.hpp	/^    Off   = 0,  \/\/ toggle off rang style\/color calls$/;"	m	class:rang::style::fg::bg::fgB::bgB::control
RANG_DOT_HPP	lib/rang/rang/rang.hpp	/^#define RANG_DOT_HPP$/;"	d
RDONLY	lib/fmt/fmt/os.h	/^    RDONLY = FMT_POSIX(O_RDONLY),  \/\/ Open for reading only.$/;"	e	enum:file::__anon10
RDWR	lib/fmt/fmt/os.h	/^    RDWR = FMT_POSIX(O_RDWR)       \/\/ Open for reading and writing.$/;"	e	enum:file::__anon10
RISING	lib/lorina/lorina/blif.hpp	/^  , RISING$/;"	e	enum:lorina::blif_reader::latch_type
SOURCEDIR	docs/Makefile	/^SOURCEDIR     = source$/;"	m
SOURCEDIR	docs/make.bat	/^set SOURCEDIR=source$/;"	v
SPHINXBUILD	docs/Makefile	/^SPHINXBUILD   ?= sphinx-build$/;"	m
SPHINXBUILD	docs/make.bat	/^	set SPHINXBUILD=sphinx-build$/;"	v
SPHINXOPTS	docs/Makefile	/^SPHINXOPTS    ?=$/;"	m
S_IRUSR	lib/fmt/fmt/os.cc	/^#      define S_IRUSR /;"	d	file:
S_IWUSR	lib/fmt/fmt/os.cc	/^#      define S_IWUSR /;"	d	file:
Solver	include/solver.hpp	/^class Solver {$/;"	c	namespace:cirsat
Solver	src/solver.cpp	/^Solver::Solver() : pimpl(new Impl()) {}$/;"	f	class:cirsat::Solver
UNKNOWN	lib/lorina/lorina/blif.hpp	/^  , UNKNOWN$/;"	e	enum:lorina::blif_reader::latch_init_value
UNKNOWN	lib/lorina/lorina/genlib.hpp	/^  UNKNOWN = 2,$/;"	m	class:lorina::phase_type
WIN32_LEAN_AND_MEAN	lib/fmt/fmt/os.cc	/^#      define WIN32_LEAN_AND_MEAN$/;"	d	file:
WRONLY	lib/fmt/fmt/os.h	/^    WRONLY = FMT_POSIX(O_WRONLY),  \/\/ Open for writing only.$/;"	e	enum:file::__anon10
ZERO	lib/lorina/lorina/aiger.hpp	/^    ZERO = 0 \/*!< Initialized with 0 *\/$/;"	e	enum:lorina::aiger_reader::latch_init_value
ZERO	lib/lorina/lorina/blif.hpp	/^    ZERO = 0 \/*!< Initialized with 0 *\/$/;"	e	enum:lorina::blif_reader::latch_init_value
_CRT_SECURE_NO_WARNINGS	lib/fmt/fmt/os.cc	/^#  define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_SH_DENYNO	lib/fmt/fmt/os.cc	/^#      define _SH_DENYNO /;"	d	file:
_WIN32_WINNT	lib/rang/rang/rang.hpp	/^#define _WIN32_WINNT /;"	d
__STRICT_ANSI__	lib/fmt/fmt/os.h	/^#  undef __STRICT_ANSI__$/;"	d
_a	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR internal::udl_arg<char> operator"" _a(const char* s,$/;"	f	namespace:literals
_a	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR internal::udl_arg<wchar_t> operator"" _a(const wchar_t* s,$/;"	f	namespace:literals
_comment_mode	lib/lorina/lorina/detail/tokenizer.hpp	/^  bool _comment_mode = false;$/;"	m	class:lorina::detail::tokenizer_return_code::tokenizer
_done	lib/lorina/lorina/detail/tokenizer.hpp	/^  bool _done = false;$/;"	m	class:lorina::detail::tokenizer_return_code::tokenizer
_format	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR internal::udl_formatter<Char, CHARS...> operator""_format() {$/;"	f	namespace:literals
_is	lib/lorina/lorina/detail/tokenizer.hpp	/^  std::istream& _is;$/;"	m	class:lorina::detail::tokenizer_return_code::tokenizer
_known	lib/lorina/lorina/detail/utils.hpp	/^  std::unordered_set<std::string> _known;$/;"	m	class:lorina::detail::call_in_topological_order
_os	lib/lorina/lorina/aiger.hpp	/^  std::ostream& _os; \/*!< Output stream *\/$/;"	m	class:lorina::ascii_aiger_pretty_printer
_os	lib/lorina/lorina/bench.hpp	/^  std::ostream& _os; \/*!< Output stream *\/$/;"	m	class:lorina::bench_pretty_printer
_os	lib/lorina/lorina/blif.hpp	/^  std::ostream& _os; \/*!< Output stream *\/$/;"	m	class:lorina::blif_pretty_printer
_os	lib/lorina/lorina/pla.hpp	/^  std::ostream& _os; \/*!< Output stream *\/$/;"	m	class:lorina::pla_pretty_printer
_os	lib/lorina/lorina/pla.hpp	/^  std::ostream& _os; \/*!< Output stream *\/$/;"	m	class:lorina::pla_writer
_os	lib/lorina/lorina/verilog.hpp	/^  std::ostream& _os; \/*!< Output stream *\/$/;"	m	class:lorina::verilog_pretty_printer
_os	lib/lorina/lorina/verilog.hpp	/^  std::ostream& _os; \/*!< Output stream *\/$/;"	m	class:lorina::verilog_writer
_quote_mode	lib/lorina/lorina/detail/tokenizer.hpp	/^  bool _quote_mode = false;$/;"	m	class:lorina::detail::tokenizer_return_code::tokenizer
_stored_params	lib/lorina/lorina/detail/utils.hpp	/^  std::unordered_map<std::string, std::tuple<Args...>> _stored_params;$/;"	m	class:lorina::detail::call_in_topological_order
_triggers	lib/lorina/lorina/detail/utils.hpp	/^  std::unordered_map<std::string, std::unordered_set<std::string>> _triggers;$/;"	m	class:lorina::detail::call_in_topological_order
_u	lib/fmt/fmt/format.h	/^FMT_DEPRECATED inline basic_string_view<internal::char8_type> operator"" _u($/;"	f	namespace:literals
_waits_for	lib/lorina/lorina/detail/utils.hpp	/^  std::unordered_map<std::string, std::unordered_set<std::string>> _waits_for;$/;"	m	class:lorina::detail::call_in_topological_order
abs_value	lib/fmt/fmt/format.h	/^      unsigned_type abs_value;$/;"	m	struct:internal::basic_writer::int_writer::bin_writer
abs_value	lib/fmt/fmt/format.h	/^      unsigned_type abs_value;$/;"	m	struct:internal::basic_writer::int_writer::dec_writer
abs_value	lib/fmt/fmt/format.h	/^      unsigned_type abs_value;$/;"	m	struct:internal::basic_writer::int_writer::num_writer
abs_value	lib/fmt/fmt/format.h	/^    unsigned_type abs_value;$/;"	m	struct:internal::basic_writer::int_writer
accumulator	lib/fmt/fmt/format-inl.h	/^  accumulator() : lower(0), upper(0) {}$/;"	f	struct:internal::accumulator
accumulator	lib/fmt/fmt/format-inl.h	/^struct accumulator {$/;"	s	namespace:internal
addGate	src/solver.cpp	/^void Solver::addGate(const std::string& type, int input1, int input2) {$/;"	f	class:cirsat::Solver
add_argument	lib/lorina/lorina/diagnostics.hpp	/^inline diagnostic_builder& diagnostic_builder::add_argument( std::string const& s )$/;"	f	class:lorina::diagnostic_builder
add_compare	lib/fmt/fmt/format-inl.h	/^  friend int add_compare(const bigint& lhs1, const bigint& lhs2,$/;"	f	class:internal::bigint
add_delimiter_spaces	lib/fmt/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_range
add_delimiter_spaces	lib/fmt/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_tuple
add_prepostfix_space	lib/fmt/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_range
add_prepostfix_space	lib/fmt/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_tuple
advance_to	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR void advance_to(iterator it) {$/;"	f	class:basic_format_parse_context
advance_to	lib/fmt/fmt/core.h	/^  void advance_to(iterator it) { out_ = it; }$/;"	f	class:basic_format_context
advance_to	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR void advance_to($/;"	f
advance_to	lib/fmt/fmt/printf.h	/^  void advance_to(OutputIt it) { out_ = it; }$/;"	f	class:basic_printf_context
aig_regex	lib/lorina/lorina/aiger.hpp	/^namespace aig_regex$/;"	n	namespace:lorina
aiger_reader	lib/lorina/lorina/aiger.hpp	/^class aiger_reader$/;"	c	namespace:lorina
alice_blue	lib/fmt/fmt/color.h	/^  alice_blue = 0xF0F8FF,               \/\/ rgb(240,248,255)$/;"	m	class:color
align	lib/fmt/fmt/format.h	/^  align_t align : 4;$/;"	m	struct:basic_format_specs
align	lib/fmt/fmt/format.h	/^namespace align {$/;"	n
alt	lib/fmt/fmt/format.cc	/^  bool alt : 1;$/;"	m	struct:internal::sprintf_specs	file:
alt	lib/fmt/fmt/format.h	/^  bool alt : 1;  \/\/ Alternate form ('#').$/;"	m	struct:basic_format_specs
ansi_color_escape	lib/fmt/fmt/color.h	/^template <typename Char> struct ansi_color_escape {$/;"	s	namespace:color::emphasis::internal
antique_white	lib/fmt/fmt/color.h	/^  antique_white = 0xFAEBD7,            \/\/ rgb(250,235,215)$/;"	m	class:color
append	lib/fmt/fmt/format.h	/^void buffer<T>::append(const U* begin, const U* end) {$/;"	f	class:internal::buffer
apply	lib/lorina/lorina/detail/utils.hpp	/^auto apply(Function f, Tuple t)$/;"	f	namespace:lorina::detail
apply	lib/lorina/lorina/detail/utils.hpp	/^auto apply(Function f, Tuple t, std::index_sequence<I ...>)$/;"	f	namespace:lorina::detail
aqua	lib/fmt/fmt/color.h	/^  aqua = 0x00FFFF,                     \/\/ rgb(0,255,255)$/;"	m	class:color
aquamarine	lib/fmt/fmt/color.h	/^  aquamarine = 0x7FFFD4,               \/\/ rgb(127,255,212)$/;"	m	class:color
arg	lib/fmt/fmt/core.h	/^    basic_format_arg<Context> arg;$/;"	m	struct:internal::arg_map::entry
arg	lib/fmt/fmt/core.h	/^  format_arg arg(int id) const { return args_.get(id); }$/;"	f	class:basic_format_context
arg	lib/fmt/fmt/format.h	/^  basic_format_arg<Context> arg;$/;"	m	struct:format_handler
arg	lib/fmt/fmt/format.h	/^basic_format_context<Range, Char>::arg(basic_string_view<char_type> name) {$/;"	f	class:basic_format_context
arg	lib/fmt/fmt/printf.h	/^  format_arg arg(int id) const { return args_.get(id); }$/;"	f	class:basic_printf_context
arg_	lib/fmt/fmt/printf.h	/^  basic_format_arg<Context>& arg_;$/;"	m	class:internal::char_converter
arg_converter	lib/fmt/fmt/printf.h	/^  arg_converter(basic_format_arg<Context>& arg, char_type type)$/;"	f	class:internal::arg_converter
arg_converter	lib/fmt/fmt/printf.h	/^template <typename T, typename Context> class arg_converter {$/;"	c	namespace:internal
arg_formatter	lib/fmt/fmt/format.h	/^  explicit arg_formatter($/;"	f	class:arg_formatter
arg_formatter	lib/fmt/fmt/format.h	/^class arg_formatter : public internal::arg_formatter_base<Range> {$/;"	c
arg_formatter_base	lib/fmt/fmt/format.h	/^  arg_formatter_base(Range r, format_specs* s, locale_ref loc)$/;"	f	class:internal::arg_formatter_base
arg_formatter_base	lib/fmt/fmt/format.h	/^class arg_formatter_base {$/;"	c	namespace:internal
arg_id	lib/fmt/fmt/compile.h	/^    arg_ref<Char> arg_id;$/;"	m	struct:internal::format_part::replacement
arg_id_	lib/fmt/fmt/format.h	/^  int arg_id_;$/;"	m	class:internal::format_string_checker
arg_id_end	lib/fmt/fmt/compile.h	/^  const Char* arg_id_end = nullptr;$/;"	m	struct:internal::format_part
arg_id_kind	lib/fmt/fmt/format.h	/^enum class arg_id_kind { none, index, name };$/;"	c	namespace:internal
arg_index	lib/fmt/fmt/compile.h	/^    int arg_index;$/;"	m	union:internal::format_part::value
arg_index	lib/fmt/fmt/compile.h	/^  enum class kind { arg_index, arg_name, text, replacement };$/;"	m	class:internal::format_part::kind
arg_join	lib/fmt/fmt/format.h	/^  arg_join(It b, It e, basic_string_view<Char> s) : begin(b), end(e), sep(s) {}$/;"	f	struct:arg_join
arg_join	lib/fmt/fmt/format.h	/^template <typename It, typename Char> struct arg_join : internal::view {$/;"	s
arg_map	lib/fmt/fmt/core.h	/^  arg_map() : map_(nullptr), size_(0) {}$/;"	f	class:internal::arg_map
arg_map	lib/fmt/fmt/core.h	/^template <typename Context> class arg_map {$/;"	c	namespace:internal
arg_mapper	lib/fmt/fmt/core.h	/^template <typename Context> struct arg_mapper {$/;"	s	namespace:internal
arg_name	lib/fmt/fmt/compile.h	/^  enum class kind { arg_index, arg_name, text, replacement };$/;"	m	class:internal::format_part::kind
arg_ref	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}$/;"	f	struct:internal::arg_ref
arg_ref	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR explicit arg_ref(basic_string_view<Char> name)$/;"	f	struct:internal::arg_ref
arg_ref	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR explicit arg_ref(int index)$/;"	f	struct:internal::arg_ref
arg_ref	lib/fmt/fmt/format.h	/^template <typename Char> struct arg_ref {$/;"	s	namespace:internal
arg_type_	lib/fmt/fmt/format.h	/^  internal::type arg_type_;$/;"	m	class:internal::numeric_specs_checker
args_	lib/fmt/fmt/core.h	/^  basic_format_args<basic_format_context> args_;$/;"	m	class:basic_format_context
args_	lib/fmt/fmt/printf.h	/^  basic_format_args<basic_printf_context> args_;$/;"	m	class:basic_printf_context
args_	lib/lorina/lorina/diagnostics.hpp	/^  std::vector<std::string> args_; \/*!< arguments for diagnostic *\/$/;"	m	class:lorina::diagnostic_builder
ascii_aiger_pretty_printer	lib/lorina/lorina/aiger.hpp	/^  ascii_aiger_pretty_printer( std::ostream& os = std::cout )$/;"	f	class:lorina::ascii_aiger_pretty_printer
ascii_aiger_pretty_printer	lib/lorina/lorina/aiger.hpp	/^class ascii_aiger_pretty_printer : public aiger_reader$/;"	c	namespace:lorina
assert_fail	lib/fmt/fmt/format-inl.h	/^FMT_FUNC void assert_fail(const char* file, int line, const char* message) {$/;"	f	namespace:internal
assign	lib/fmt/fmt/format-inl.h	/^  bool assign(Double d) {$/;"	f	class:internal::fp
assign	lib/fmt/fmt/format-inl.h	/^  bool assign(Double) {$/;"	f	class:internal::fp
assign	lib/fmt/fmt/format-inl.h	/^  void assign(const bigint& other) {$/;"	f	class:internal::bigint
assign	lib/fmt/fmt/format-inl.h	/^  void assign(uint64_t n) {$/;"	f	class:internal::bigint
assign_float_with_boundaries	lib/fmt/fmt/format-inl.h	/^  template <typename Double> boundaries assign_float_with_boundaries(Double d) {$/;"	f	class:internal::fp
assign_pow10	lib/fmt/fmt/format-inl.h	/^  void assign_pow10(int exp) {$/;"	f	class:internal::bigint
assign_with_boundaries	lib/fmt/fmt/format-inl.h	/^  template <typename Double> boundaries assign_with_boundaries(Double d) {$/;"	f	class:internal::fp
author	docs/source/conf.py	/^author = 'Zhufei Chu'$/;"	v
auto_id	lib/fmt/fmt/format.h	/^struct auto_id {};$/;"	s	namespace:internal
azure	lib/fmt/fmt/color.h	/^  azure = 0xF0FFFF,                    \/\/ rgb(240,255,255)$/;"	m	class:color
b	lib/fmt/fmt/color.h	/^  uint8_t b;$/;"	m	struct:color::emphasis::rgb
background_color	lib/fmt/fmt/color.h	/^  internal::color_type background_color;$/;"	m	class:color::emphasis::text_style
background_color	lib/fmt/fmt/format-inl.h	/^const char basic_data<T>::background_color[] = "\\x1b[48;2;";$/;"	m	class:internal::basic_data
background_color	lib/fmt/fmt/format.h	/^  static const char background_color[];$/;"	m	struct:internal::basic_data
base	lib/fmt/fmt/format.h	/^  OutputIt base() const { return out_; }$/;"	f	class:internal::truncating_iterator_base
basename	lib/lorina/lorina/detail/utils.hpp	/^inline std::string basename( const std::string& filepath )$/;"	f	namespace:lorina::detail
basic_compiled_format	lib/fmt/fmt/compile.h	/^struct basic_compiled_format {};$/;"	s	namespace:internal
basic_cstring_view	lib/fmt/fmt/os.h	/^  basic_cstring_view(const Char* s) : data_(s) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	lib/fmt/fmt/os.h	/^  basic_cstring_view(const std::basic_string<Char>& s) : data_(s.c_str()) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	lib/fmt/fmt/os.h	/^template <typename Char> class basic_cstring_view {$/;"	c
basic_data	lib/fmt/fmt/format.cc	/^template struct FMT_INSTANTIATION_DEF_API internal::basic_data<void>;$/;"	m	class:internal	typeref:struct:internal::	file:
basic_data	lib/fmt/fmt/format.h	/^template <typename T = void> struct FMT_EXTERN_TEMPLATE_API basic_data {$/;"	s	namespace:internal
basic_format_arg	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR basic_format_arg() : type_(internal::type::none_type) {}$/;"	f	class:basic_format_arg
basic_format_arg	lib/fmt/fmt/core.h	/^template <typename Context> class basic_format_arg {$/;"	c
basic_format_context	lib/fmt/fmt/core.h	/^  basic_format_context(OutputIt out,$/;"	f	class:basic_format_context
basic_format_context	lib/fmt/fmt/core.h	/^template <typename OutputIt, typename Char> class basic_format_context {$/;"	c
basic_format_parse_context	lib/fmt/fmt/core.h	/^  explicit FMT_CONSTEXPR basic_format_parse_context($/;"	f	class:basic_format_parse_context
basic_format_parse_context	lib/fmt/fmt/core.h	/^class basic_format_parse_context : private ErrorHandler {$/;"	c
basic_format_specs	lib/fmt/fmt/format.h	/^  constexpr basic_format_specs()$/;"	f	struct:basic_format_specs
basic_format_specs	lib/fmt/fmt/format.h	/^template <typename Char> struct basic_format_specs {$/;"	s
basic_memory_buffer	lib/fmt/fmt/format.h	/^  explicit basic_memory_buffer(const Allocator& alloc = Allocator())$/;"	f	class:basic_memory_buffer
basic_memory_buffer	lib/fmt/fmt/format.h	/^class basic_memory_buffer : private Allocator, public internal::buffer<T> {$/;"	c
basic_printf_context	lib/fmt/fmt/printf.h	/^  basic_printf_context(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:basic_printf_context
basic_printf_context	lib/fmt/fmt/printf.h	/^template <typename OutputIt, typename Char> class basic_printf_context {$/;"	c
basic_string_view	lib/fmt/fmt/core.h	/^  basic_string_view(const Char* s)$/;"	f	class:basic_string_view
basic_string_view	lib/fmt/fmt/core.h	/^template <typename Char> class basic_string_view {$/;"	c
basic_writer	lib/fmt/fmt/format.h	/^  explicit basic_writer(Range out, locale_ref loc = locale_ref())$/;"	f	class:internal::basic_writer
basic_writer	lib/fmt/fmt/format.h	/^template <typename Range> class basic_writer {$/;"	c	namespace:internal
begin	lib/fmt/fmt/chrono.h	/^    iterator begin;$/;"	m	struct:formatter::parse_range
begin	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR iterator begin() const { return data_; }$/;"	f	class:basic_string_view
begin	lib/fmt/fmt/format.h	/^  It begin;$/;"	m	struct:arg_join
begin	lib/fmt/fmt/format.h	/^  OutputIt begin() const { return it_; }$/;"	f	class:internal::output_range
beige	lib/fmt/fmt/color.h	/^  beige = 0xF5F5DC,                    \/\/ rgb(245,245,220)$/;"	m	class:color
bench_pretty_printer	lib/lorina/lorina/bench.hpp	/^  bench_pretty_printer( std::ostream& os = std::cout )$/;"	f	class:lorina::bench_pretty_printer
bench_pretty_printer	lib/lorina/lorina/bench.hpp	/^class bench_pretty_printer : public bench_reader$/;"	c	namespace:lorina
bench_reader	lib/lorina/lorina/bench.hpp	/^class bench_reader$/;"	c	namespace:lorina
bench_regex	lib/lorina/lorina/bench.hpp	/^namespace bench_regex$/;"	n	namespace:lorina
bg	lib/rang/rang/rang.hpp	/^enum class bg {$/;"	c	class:rang::style::fg
bgB	lib/rang/rang/rang.hpp	/^enum class bgB {$/;"	c	class:rang::style::fg::bg::fgB
bigint	lib/fmt/fmt/format-inl.h	/^  bigint() : exp_(0) {}$/;"	f	class:internal::bigint
bigint	lib/fmt/fmt/format-inl.h	/^  explicit bigint(uint64_t n) { assign(n); }$/;"	f	class:internal::bigint
bigint	lib/fmt/fmt/format-inl.h	/^class bigint {$/;"	c	namespace:internal
bigit_bits	lib/fmt/fmt/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int bigit_bits = bits<bigit>::value;$/;"	m	class:internal::bigint
bigits_	lib/fmt/fmt/format-inl.h	/^  basic_memory_buffer<bigit, bigits_capacity> bigits_;$/;"	m	class:internal::bigint
bigits_capacity	lib/fmt/fmt/format-inl.h	/^  enum { bigits_capacity = 32 };$/;"	e	enum:internal::bigint::__anon1
bin_writer	lib/fmt/fmt/format.h	/^    template <int BITS> struct bin_writer {$/;"	s	struct:internal::basic_writer::int_writer
binary32	lib/fmt/fmt/format.h	/^  bool binary32 : 1;$/;"	m	struct:internal::float_specs
bisque	lib/fmt/fmt/color.h	/^  bisque = 0xFFE4C4,                   \/\/ rgb(255,228,196)$/;"	m	class:color
bit_cast	lib/fmt/fmt/format.h	/^inline Dest bit_cast(const Source& source) {$/;"	f	namespace:internal
bits	lib/fmt/fmt/format-inl.h	/^template <typename T> struct bits {$/;"	s	namespace:internal
black	lib/fmt/fmt/color.h	/^  black = 0x000000,                    \/\/ rgb(0,0,0)$/;"	m	class:color
black	lib/fmt/fmt/color.h	/^  black = 30,$/;"	m	class:color::terminal_color
black	lib/rang/rang/rang.hpp	/^    black   = 100,$/;"	m	class:rang::style::fg::bg::fgB::bgB
black	lib/rang/rang/rang.hpp	/^    black   = 30,$/;"	m	class:rang::style::fg
black	lib/rang/rang/rang.hpp	/^    black   = 40,$/;"	m	class:rang::style::fg::bg
black	lib/rang/rang/rang.hpp	/^    black   = 90,$/;"	m	class:rang::style::fg::bg::fgB
blackhole_	lib/fmt/fmt/format.h	/^  mutable typename truncating_iterator_base<OutputIt>::value_type blackhole_;$/;"	m	class:internal::truncating_iterator
blanched_almond	lib/fmt/fmt/color.h	/^  blanched_almond = 0xFFEBCD,          \/\/ rgb(255,235,205)$/;"	m	class:color
blif_pretty_printer	lib/lorina/lorina/blif.hpp	/^  blif_pretty_printer( std::ostream& os = std::cout )$/;"	f	class:lorina::blif_pretty_printer
blif_pretty_printer	lib/lorina/lorina/blif.hpp	/^class blif_pretty_printer : public blif_reader$/;"	c	namespace:lorina
blif_reader	lib/lorina/lorina/blif.hpp	/^class blif_reader$/;"	c	namespace:lorina
blif_regex	lib/lorina/lorina/blif.hpp	/^namespace blif_regex$/;"	n	namespace:lorina
blink	lib/rang/rang/rang.hpp	/^    blink     = 5,$/;"	m	class:rang::style
blue	lib/fmt/fmt/color.h	/^  blue = 0x0000FF,                     \/\/ rgb(0,0,255)$/;"	m	class:color
blue	lib/fmt/fmt/color.h	/^  blue,$/;"	m	class:color::terminal_color
blue	lib/rang/rang/rang.hpp	/^    blue    = 104,$/;"	m	class:rang::style::fg::bg::fgB::bgB
blue	lib/rang/rang/rang.hpp	/^    blue    = 34,$/;"	m	class:rang::style::fg
blue	lib/rang/rang/rang.hpp	/^    blue    = 44,$/;"	m	class:rang::style::fg::bg
blue	lib/rang/rang/rang.hpp	/^    blue    = 94,$/;"	m	class:rang::style::fg::bg::fgB
blue_violet	lib/fmt/fmt/color.h	/^  blue_violet = 0x8A2BE2,              \/\/ rgb(138,43,226)$/;"	m	class:color
bold	lib/fmt/fmt/color.h	/^  bold = 1,$/;"	m	class:color::emphasis
bold	lib/rang/rang/rang.hpp	/^    bold      = 1,$/;"	m	class:rang::style
bool_type	lib/fmt/fmt/core.h	/^  bool_type,$/;"	m	class:internal::type
bool_value	lib/fmt/fmt/core.h	/^    bool bool_value;$/;"	m	union:internal::value::__anon6
boundaries	lib/fmt/fmt/format-inl.h	/^struct boundaries {$/;"	s	namespace:internal
bright_black	lib/fmt/fmt/color.h	/^  bright_black = 90,$/;"	m	class:color::terminal_color
bright_blue	lib/fmt/fmt/color.h	/^  bright_blue,$/;"	m	class:color::terminal_color
bright_cyan	lib/fmt/fmt/color.h	/^  bright_cyan,$/;"	m	class:color::terminal_color
bright_green	lib/fmt/fmt/color.h	/^  bright_green,$/;"	m	class:color::terminal_color
bright_magenta	lib/fmt/fmt/color.h	/^  bright_magenta,$/;"	m	class:color::terminal_color
bright_red	lib/fmt/fmt/color.h	/^  bright_red,$/;"	m	class:color::terminal_color
bright_yellow	lib/fmt/fmt/color.h	/^  bright_yellow,$/;"	m	class:color::terminal_color
bristol_parser	lib/lorina/lorina/bristol.hpp	/^  explicit bristol_parser( std::istream& is, bristol_reader const& reader )$/;"	f	class:lorina::bristol_parser
bristol_parser	lib/lorina/lorina/bristol.hpp	/^class bristol_parser$/;"	c	namespace:lorina
bristol_reader	lib/lorina/lorina/bristol.hpp	/^  explicit bristol_reader() {}$/;"	f	class:lorina::bristol_reader
bristol_reader	lib/lorina/lorina/bristol.hpp	/^class bristol_reader$/;"	c	namespace:lorina
brown	lib/fmt/fmt/color.h	/^  brown = 0xA52A2A,                    \/\/ rgb(165,42,42)$/;"	m	class:color
buf	lib/fmt/fmt/format-inl.h	/^  char* buf;$/;"	m	struct:internal::fixed_handler
buf	lib/fmt/fmt/format-inl.h	/^  char* buf;$/;"	m	struct:internal::grisu_shortest_handler
buffer	lib/fmt/fmt/color.h	/^  Char buffer[7u + 3u * 4u + 1u];$/;"	m	struct:color::emphasis::internal::ansi_color_escape
buffer	lib/fmt/fmt/core.h	/^template <typename T> class buffer {$/;"	c	namespace:internal
buffer_	lib/fmt/fmt/format.h	/^  mutable char buffer_[buffer_size];$/;"	m	class:format_int
buffer_	lib/fmt/fmt/format.h	/^  wmemory_buffer buffer_;$/;"	m	class:internal::utf8_to_utf16
buffer_	lib/fmt/fmt/os.h	/^  memory_buffer buffer_;$/;"	m	class:internal::utf16_to_utf8
buffer_range	lib/fmt/fmt/format.h	/^  buffer_range(internal::buffer<T>& buf)$/;"	f	class:buffer_range
buffer_range	lib/fmt/fmt/format.h	/^class buffer_range : public internal::output_range<$/;"	c
buffer_size	lib/fmt/fmt/format.h	/^  enum { buffer_size = std::numeric_limits<unsigned long long>::digits10 + 3 };$/;"	e	enum:format_int::__anon17
buffered_file	lib/fmt/fmt/os.cc	/^buffered_file::buffered_file(cstring_view filename, cstring_view mode) {$/;"	f	class:buffered_file
buffered_file	lib/fmt/fmt/os.h	/^  explicit buffered_file(FILE* f) : file_(f) {}$/;"	f	class:buffered_file
buffered_file	lib/fmt/fmt/os.h	/^class buffered_file {$/;"	c
burly_wood	lib/fmt/fmt/color.h	/^  burly_wood = 0xDEB887,               \/\/ rgb(222,184,135)$/;"	m	class:color
bytes	lib/fmt/fmt/format.h	/^    string_view bytes;$/;"	m	struct:internal::basic_writer::bytes_writer
bytes	lib/fmt/fmt/format.h	/^  explicit bytes(string_view data) : data_(data) {}$/;"	f	class:bytes
bytes	lib/fmt/fmt/format.h	/^class bytes {$/;"	c
bytes_writer	lib/fmt/fmt/format.h	/^  struct bytes_writer {$/;"	s	class:internal::basic_writer
c_str	lib/fmt/fmt/format.h	/^  const char* c_str() const {$/;"	f	class:format_int
c_str	lib/fmt/fmt/format.h	/^  const wchar_t* c_str() const { return &buffer_[0]; }$/;"	f	class:internal::utf8_to_utf16
c_str	lib/fmt/fmt/os.h	/^  const Char* c_str() const { return data_; }$/;"	f	class:basic_cstring_view
c_str	lib/fmt/fmt/os.h	/^  const char* c_str() const { return &buffer_[0]; }$/;"	f	class:internal::utf16_to_utf8
cadet_blue	lib/fmt/fmt/color.h	/^  cadet_blue = 0x5F9EA0,               \/\/ rgb(95,158,160)$/;"	m	class:color
call_deferred	lib/lorina/lorina/detail/utils.hpp	/^  void call_deferred( const std::vector<std::string>& inputs, const std::string& output, Args... params )$/;"	f	class:lorina::detail::call_in_topological_order
call_in_topological_order	lib/lorina/lorina/detail/utils.hpp	/^  explicit call_in_topological_order( std::function<void(Args...)> f )$/;"	f	class:lorina::detail::call_in_topological_order
call_in_topological_order	lib/lorina/lorina/detail/utils.hpp	/^class call_in_topological_order$/;"	c	namespace:lorina::detail
capacity_	lib/fmt/fmt/core.h	/^        capacity_(cap) {}$/;"	f	class:internal::buffer
capacity_	lib/fmt/fmt/core.h	/^  buffer(std::size_t sz) FMT_NOEXCEPT : size_(sz), capacity_(sz) {}$/;"	f	class:internal::buffer
capacity_	lib/fmt/fmt/core.h	/^  std::size_t capacity_;$/;"	m	class:internal::buffer
center	lib/fmt/fmt/format.h	/^enum type { none, left, right, center, numeric };$/;"	e	enum:align::type
cf	lib/fmt/fmt/compile.h	/^namespace cf {$/;"	n	namespace:internal
char_converter	lib/fmt/fmt/printf.h	/^  explicit char_converter(basic_format_arg<Context>& arg) : arg_(arg) {}$/;"	f	class:internal::char_converter
char_converter	lib/fmt/fmt/printf.h	/^template <typename Context> class char_converter {$/;"	c	namespace:internal
char_spec_handler	lib/fmt/fmt/format.h	/^    char_spec_handler(arg_formatter_base& f, char_type val)$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
char_spec_handler	lib/fmt/fmt/format.h	/^  struct char_spec_handler : ErrorHandler {$/;"	s	class:internal::arg_formatter_base
char_specs_checker	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR char_specs_checker(char type, ErrorHandler eh)$/;"	f	class:internal::char_specs_checker
char_specs_checker	lib/fmt/fmt/format.h	/^class char_specs_checker : public ErrorHandler {$/;"	c	namespace:internal
char_t_impl	lib/fmt/fmt/core.h	/^template <typename S, typename = void> struct char_t_impl {};$/;"	s	namespace:internal
char_t_impl	lib/fmt/fmt/core.h	/^template <typename S> struct char_t_impl<S, enable_if_t<is_string<S>::value>> {$/;"	s	namespace:internal
char_type	lib/fmt/fmt/core.h	/^  char_type,$/;"	m	class:internal::type
char_value	lib/fmt/fmt/core.h	/^    char_type char_value;$/;"	m	union:internal::value::__anon6
char_writer	lib/fmt/fmt/format.h	/^  struct char_writer {$/;"	s	class:internal::arg_formatter_base
chartreuse	lib/fmt/fmt/color.h	/^  chartreuse = 0x7FFF00,               \/\/ rgb(127,255,0)$/;"	m	class:color
check_arg_id	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR void check_arg_id(basic_string_view<Char>) {}$/;"	f	class:basic_format_parse_context
check_arg_id	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR void check_arg_id(int) {$/;"	f	class:basic_format_parse_context
check_arg_id	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void check_arg_id() {$/;"	f	class:internal::format_string_checker
check_format_string	lib/fmt/fmt/format.h	/^void check_format_string(S format_str) {$/;"	f	namespace:internal
check_pointer_type_spec	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR void check_pointer_type_spec(Char spec, ErrorHandler&& eh) {$/;"	f	namespace:internal
check_precision	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void check_precision() {$/;"	f	class:internal::numeric_specs_checker
check_sign	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void check_sign() {$/;"	f	class:internal::numeric_specs_checker
check_string_type_spec	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR void check_string_type_spec(Char spec, ErrorHandler&& eh) {$/;"	f	namespace:internal
checker_	lib/fmt/fmt/format.h	/^  numeric_specs_checker<Handler> checker_;$/;"	m	class:internal::specs_checker
chocolate	lib/fmt/fmt/color.h	/^  chocolate = 0xD2691E,                \/\/ rgb(210,105,30)$/;"	m	class:color
chrono_format_checker	lib/fmt/fmt/chrono.h	/^struct chrono_format_checker {$/;"	s	namespace:internal
chrono_formatter	lib/fmt/fmt/chrono.h	/^  explicit chrono_formatter(FormatContext& ctx, OutputIt o,$/;"	f	struct:internal::chrono_formatter
chrono_formatter	lib/fmt/fmt/chrono.h	/^struct chrono_formatter {$/;"	s	namespace:internal
cirsat	include/solver.hpp	/^namespace cirsat {$/;"	n
cirsat	src/solver.cpp	/^namespace cirsat {$/;"	n	file:
clear	lib/fmt/fmt/core.h	/^  void clear() { size_ = 0; }$/;"	f	class:internal::buffer
client_	lib/lorina/lorina/diagnostics.hpp	/^  diagnostic_consumer *client_ = nullptr;  \/*!< Diagnostic client. *\/$/;"	m	class:lorina::diagnostic_engine
close	lib/fmt/fmt/os.cc	/^void buffered_file::close() {$/;"	f	class:buffered_file
close	lib/fmt/fmt/os.cc	/^void file::close() {$/;"	f	class:file
clz	lib/fmt/fmt/format.h	/^inline uint32_t clz(uint32_t x) {$/;"	f	namespace:internal
clzll	lib/fmt/fmt/format.h	/^inline uint32_t clzll(uint64_t x) {$/;"	f	namespace:internal
code_point_index	lib/fmt/fmt/format.h	/^inline size_t code_point_index(basic_string_view<Char> s, size_t n) {$/;"	f	namespace:internal
code_point_index	lib/fmt/fmt/format.h	/^inline size_t code_point_index(basic_string_view<char8_type> s, size_t n) {$/;"	f	namespace:internal
color	lib/fmt/fmt/color.h	/^enum class color : uint32_t {$/;"	c
color_type	lib/fmt/fmt/color.h	/^struct color_type {$/;"	s	namespace:color::emphasis::internal
color_union	lib/fmt/fmt/color.h	/^  union color_union {$/;"	u	struct:color::emphasis::internal::color_type
comment	lib/lorina/lorina/detail/tokenizer.hpp	/^, comment = 2$/;"	m	class:lorina::detail::tokenizer_return_code
compare	lib/fmt/fmt/core.h	/^  int compare(basic_string_view other) const {$/;"	f	class:basic_string_view
compare	lib/fmt/fmt/format-inl.h	/^  friend int compare(const bigint& lhs, const bigint& rhs) {$/;"	f	class:internal::bigint
compile	lib/fmt/fmt/compile.h	/^constexpr auto compile(S format_str) {$/;"	f
compile_format_string	lib/fmt/fmt/compile.h	/^FMT_CONSTEXPR void compile_format_string(basic_string_view<Char> format_str,$/;"	f	namespace:internal
compile_format_string	lib/fmt/fmt/compile.h	/^constexpr auto compile_format_string(S format_str) {$/;"	f	namespace:internal
compile_string	lib/fmt/fmt/core.h	/^struct compile_string {};$/;"	s
compile_string_to_view	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR basic_string_view<Char> compile_string_to_view($/;"	f	namespace:internal
compile_to_parts	lib/fmt/fmt/compile.h	/^FMT_CONSTEXPR format_part_array<Char, N> compile_to_parts($/;"	f	namespace:internal
compiled_format	lib/fmt/fmt/compile.h	/^  explicit constexpr compiled_format(basic_string_view<char_type> format_str)$/;"	f	class:internal::compiled_format
compiled_format	lib/fmt/fmt/compile.h	/^class compiled_format : private compiled_format_base<S> {$/;"	c	namespace:internal
compiled_format_base	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR explicit compiled_format_base(basic_string_view<char_type>) {}$/;"	f	struct:internal::compiled_format_base
compiled_format_base	lib/fmt/fmt/compile.h	/^  explicit compiled_format_base(basic_string_view<char_type> format_str) {$/;"	f	struct:internal::compiled_format_base
compiled_format_base	lib/fmt/fmt/compile.h	/^struct compiled_format_base : basic_compiled_format {$/;"	s	namespace:internal
compiled_format_base	lib/fmt/fmt/compile.h	/^struct compiled_format_base<S, enable_if_t<is_compile_string<S>::value>>$/;"	s	namespace:internal
compute_dependencies	lib/lorina/lorina/detail/utils.hpp	/^  void compute_dependencies( const std::string& output )$/;"	f	class:lorina::detail::call_in_topological_order
concat	lib/fmt/fmt/compile.h	/^template <typename L, typename R> struct concat {$/;"	s	namespace:internal
conceal	lib/rang/rang/rang.hpp	/^    conceal   = 8,$/;"	m	class:rang::style
conditional_helper	lib/fmt/fmt/ranges.h	/^template <typename... Ts> struct conditional_helper {};$/;"	s	namespace:internal
const_check	lib/fmt/fmt/core.h	/^template <typename T> FMT_CONSTEXPR T const_check(T value) { return value; }$/;"	f	namespace:internal
constexpr_max	lib/fmt/fmt/compile.h	/^template <typename T> constexpr const T& constexpr_max(const T& a, const T& b) {$/;"	f	namespace:internal
container_	lib/fmt/fmt/core.h	/^  Container& container_;$/;"	m	class:internal::container_buffer
container_buffer	lib/fmt/fmt/core.h	/^  explicit container_buffer(Container& c)$/;"	f	class:internal::container_buffer
container_buffer	lib/fmt/fmt/core.h	/^class container_buffer : public buffer<typename Container::value_type> {$/;"	c	namespace:internal
context	lib/fmt/fmt/chrono.h	/^    basic_format_parse_context<Char>& context;$/;"	m	struct:formatter::spec_handler
context	lib/fmt/fmt/chrono.h	/^  FormatContext& context;$/;"	m	struct:internal::chrono_formatter
context	lib/fmt/fmt/format.h	/^  Context context;$/;"	m	struct:format_handler
context_	lib/fmt/fmt/format.h	/^  Context& context_;$/;"	m	class:internal::specs_handler
context_	lib/fmt/fmt/format.h	/^  ParseContext& context_;$/;"	m	class:internal::dynamic_specs_handler
context_	lib/fmt/fmt/format.h	/^  parse_context_type context_;$/;"	m	class:internal::format_string_checker
control	lib/rang/rang/rang.hpp	/^enum class control {  \/\/ Behaviour of rang function calls$/;"	c	class:rang::style::fg::bg::fgB::bgB
convert	lib/fmt/fmt/os.cc	/^int internal::utf16_to_utf8::convert(wstring_view s) {$/;"	f	class:internal::utf16_to_utf8
convert_arg	lib/fmt/fmt/printf.h	/^void convert_arg(basic_format_arg<Context>& arg, Char type) {$/;"	f	namespace:internal
convert_rwcount	lib/fmt/fmt/os.cc	/^inline unsigned convert_rwcount(std::size_t count) {$/;"	f	namespace:__anon11
convert_to_int	lib/fmt/fmt/core.h	/^struct FMT_DEPRECATED convert_to_int$/;"	s
copy	lib/fmt/fmt/ranges.h	/^OutputIterator copy(char ch, OutputIterator out) {$/;"	f	namespace:internal
copy	lib/fmt/fmt/ranges.h	/^OutputIterator copy(const RangeT& range, OutputIterator out) {$/;"	f	namespace:internal
copy	lib/fmt/fmt/ranges.h	/^OutputIterator copy(const char* str, OutputIterator out) {$/;"	f	namespace:internal
copy_str	lib/fmt/fmt/format.h	/^OutputIt copy_str(InputIt begin, InputIt end, OutputIt it) {$/;"	f	namespace:internal
copyright	docs/source/conf.py	/^copyright = '2025, Zhufei Chu'$/;"	v
coral	lib/fmt/fmt/color.h	/^  coral = 0xFF7F50,                    \/\/ rgb(255,127,80)$/;"	m	class:color
cornflower_blue	lib/fmt/fmt/color.h	/^  cornflower_blue = 0x6495ED,          \/\/ rgb(100,149,237)$/;"	m	class:color
cornsilk	lib/fmt/fmt/color.h	/^  cornsilk = 0xFFF8DC,                 \/\/ rgb(255,248,220)$/;"	m	class:color
count	lib/fmt/fmt/format.h	/^  std::size_t count() const { return count_; }$/;"	f	class:internal::counting_iterator
count	lib/fmt/fmt/format.h	/^  std::size_t count() const { return count_; }$/;"	f	class:internal::truncating_iterator_base
count_	lib/fmt/fmt/format.h	/^  std::size_t count_;$/;"	m	class:internal::counting_iterator
count_	lib/fmt/fmt/format.h	/^  std::size_t count_;$/;"	m	class:internal::truncating_iterator_base
count_code_points	lib/fmt/fmt/format.h	/^inline size_t count_code_points(basic_string_view<Char> s) {$/;"	f	namespace:internal
count_code_points	lib/fmt/fmt/format.h	/^inline size_t count_code_points(basic_string_view<char8_type> s) {$/;"	f	namespace:internal
count_code_points	lib/fmt/fmt/format.h	/^inline size_t count_code_points(basic_string_view<char> s) {$/;"	f	namespace:internal
count_digits	lib/fmt/fmt/format-inl.h	/^template <> FMT_FUNC int count_digits<4>(internal::fallback_uintptr n) {$/;"	f	namespace:internal
count_digits	lib/fmt/fmt/format.h	/^inline int count_digits(uint128_t n) {$/;"	f	namespace:internal
count_digits	lib/fmt/fmt/format.h	/^inline int count_digits(uint32_t n) {$/;"	f	namespace:internal
count_digits	lib/fmt/fmt/format.h	/^inline int count_digits(uint64_t n) {$/;"	f	namespace:internal
count_digits	lib/fmt/fmt/format.h	/^template <unsigned BITS, typename UInt> inline int count_digits(UInt n) {$/;"	f	namespace:internal
count_parts	lib/fmt/fmt/compile.h	/^FMT_CONSTEXPR unsigned count_parts(basic_string_view<Char> format_str) {$/;"	f	namespace:internal
counting_iterator	lib/fmt/fmt/format.h	/^  counting_iterator() : count_(0) {}$/;"	f	class:internal::counting_iterator
counting_iterator	lib/fmt/fmt/format.h	/^class counting_iterator {$/;"	c	namespace:internal
create_id	lib/lorina/lorina/diagnostics.hpp	/^inline diag_id diagnostic_engine::create_id( diagnostic_level level, std::string const& message )$/;"	f	class:lorina::diagnostic_engine
crimson	lib/fmt/fmt/color.h	/^  crimson = 0xDC143C,                  \/\/ rgb(220,20,60)$/;"	m	class:color
crossed	lib/rang/rang/rang.hpp	/^    crossed   = 9$/;"	m	class:rang::style
cstring_spec_handler	lib/fmt/fmt/format.h	/^    cstring_spec_handler(arg_formatter_base& f, const char_type* val)$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
cstring_spec_handler	lib/fmt/fmt/format.h	/^  struct cstring_spec_handler : internal::error_handler {$/;"	s	class:internal::arg_formatter_base
cstring_type	lib/fmt/fmt/core.h	/^  cstring_type,$/;"	m	class:internal::type
cstring_type_checker	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR explicit cstring_type_checker(ErrorHandler eh)$/;"	f	class:internal::cstring_type_checker
cstring_type_checker	lib/fmt/fmt/format.h	/^class cstring_type_checker : public ErrorHandler {$/;"	c	namespace:internal
ctx_	lib/fmt/fmt/format.h	/^  Context& ctx_;$/;"	m	class:internal::custom_formatter
custom	lib/fmt/fmt/core.h	/^    custom_value<Context> custom;$/;"	m	union:internal::value::__anon6
custom_	lib/fmt/fmt/core.h	/^    internal::custom_value<Context> custom_;$/;"	m	class:basic_format_arg::handle
custom_diag_ids	lib/lorina/lorina/diagnostics.hpp	/^  std::map<desc_type, diag_id> custom_diag_ids; \/*!< Map from custom ID to diagnostic. *\/$/;"	m	class:lorina::diagnostic_engine
custom_diag_info	lib/lorina/lorina/diagnostics.hpp	/^  std::vector<desc_type> custom_diag_info; \/*!< Custom diagnostics. *\/$/;"	m	class:lorina::diagnostic_engine
custom_formatter	lib/fmt/fmt/format.h	/^  explicit custom_formatter(basic_format_parse_context<char_type>& parse_ctx,$/;"	f	class:internal::custom_formatter
custom_formatter	lib/fmt/fmt/format.h	/^template <typename Context> class custom_formatter {$/;"	c	namespace:internal
custom_value	lib/fmt/fmt/core.h	/^template <typename Context> struct custom_value {$/;"	s	namespace:internal
cyan	lib/fmt/fmt/color.h	/^  cyan = 0x00FFFF,                     \/\/ rgb(0,255,255)$/;"	m	class:color
cyan	lib/fmt/fmt/color.h	/^  cyan,$/;"	m	class:color::terminal_color
cyan	lib/rang/rang/rang.hpp	/^    cyan    = 106,$/;"	m	class:rang::style::fg::bg::fgB::bgB
cyan	lib/rang/rang/rang.hpp	/^    cyan    = 36,$/;"	m	class:rang::style::fg
cyan	lib/rang/rang/rang.hpp	/^    cyan    = 46,$/;"	m	class:rang::style::fg::bg
cyan	lib/rang/rang/rang.hpp	/^    cyan    = 96,$/;"	m	class:rang::style::fg::bg::fgB
dark_blue	lib/fmt/fmt/color.h	/^  dark_blue = 0x00008B,                \/\/ rgb(0,0,139)$/;"	m	class:color
dark_cyan	lib/fmt/fmt/color.h	/^  dark_cyan = 0x008B8B,                \/\/ rgb(0,139,139)$/;"	m	class:color
dark_golden_rod	lib/fmt/fmt/color.h	/^  dark_golden_rod = 0xB8860B,          \/\/ rgb(184,134,11)$/;"	m	class:color
dark_gray	lib/fmt/fmt/color.h	/^  dark_gray = 0xA9A9A9,                \/\/ rgb(169,169,169)$/;"	m	class:color
dark_green	lib/fmt/fmt/color.h	/^  dark_green = 0x006400,               \/\/ rgb(0,100,0)$/;"	m	class:color
dark_khaki	lib/fmt/fmt/color.h	/^  dark_khaki = 0xBDB76B,               \/\/ rgb(189,183,107)$/;"	m	class:color
dark_magenta	lib/fmt/fmt/color.h	/^  dark_magenta = 0x8B008B,             \/\/ rgb(139,0,139)$/;"	m	class:color
dark_olive_green	lib/fmt/fmt/color.h	/^  dark_olive_green = 0x556B2F,         \/\/ rgb(85,107,47)$/;"	m	class:color
dark_orange	lib/fmt/fmt/color.h	/^  dark_orange = 0xFF8C00,              \/\/ rgb(255,140,0)$/;"	m	class:color
dark_orchid	lib/fmt/fmt/color.h	/^  dark_orchid = 0x9932CC,              \/\/ rgb(153,50,204)$/;"	m	class:color
dark_red	lib/fmt/fmt/color.h	/^  dark_red = 0x8B0000,                 \/\/ rgb(139,0,0)$/;"	m	class:color
dark_salmon	lib/fmt/fmt/color.h	/^  dark_salmon = 0xE9967A,              \/\/ rgb(233,150,122)$/;"	m	class:color
dark_sea_green	lib/fmt/fmt/color.h	/^  dark_sea_green = 0x8FBC8F,           \/\/ rgb(143,188,143)$/;"	m	class:color
dark_slate_blue	lib/fmt/fmt/color.h	/^  dark_slate_blue = 0x483D8B,          \/\/ rgb(72,61,139)$/;"	m	class:color
dark_slate_gray	lib/fmt/fmt/color.h	/^  dark_slate_gray = 0x2F4F4F,          \/\/ rgb(47,79,79)$/;"	m	class:color
dark_turquoise	lib/fmt/fmt/color.h	/^  dark_turquoise = 0x00CED1,           \/\/ rgb(0,206,209)$/;"	m	class:color
dark_violet	lib/fmt/fmt/color.h	/^  dark_violet = 0x9400D3,              \/\/ rgb(148,0,211)$/;"	m	class:color
data	lib/fmt/fmt/compile.h	/^  basic_string_view<Char> data;$/;"	m	struct:internal::text
data	lib/fmt/fmt/compile.h	/^  format_part<Char> data[N] = {};$/;"	m	struct:internal::format_part_array
data	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const Char* data() const { return data_; }$/;"	f	class:basic_string_view
data	lib/fmt/fmt/core.h	/^  const Char* data;$/;"	m	struct:internal::string_value
data	lib/fmt/fmt/format.h	/^  const Char* data() const { return data_; }$/;"	f	struct:internal::fill_t
data	lib/fmt/fmt/format.h	/^  const char* data() const { return str_; }$/;"	f	class:format_int
data	lib/fmt/fmt/format.h	/^struct data : basic_data<> {};$/;"	s	namespace:internal
data_	lib/fmt/fmt/core.h	/^  const Char* data_;$/;"	m	class:basic_string_view
data_	lib/fmt/fmt/format.h	/^  Char data_[max_size];$/;"	m	struct:internal::fill_t
data_	lib/fmt/fmt/format.h	/^  string_view data_;$/;"	m	class:bytes
data_	lib/fmt/fmt/os.h	/^  const Char* data_;$/;"	m	class:basic_cstring_view
deallocate	lib/fmt/fmt/format.h	/^  void deallocate() {$/;"	f	class:basic_memory_buffer
dec_writer	lib/fmt/fmt/format.h	/^    struct dec_writer {$/;"	s	struct:internal::basic_writer::int_writer
decimal_point	lib/fmt/fmt/format.h	/^template <> inline wchar_t decimal_point(locale_ref loc) {$/;"	f	namespace:internal
decimal_point	lib/fmt/fmt/format.h	/^template <typename Char> inline Char decimal_point(locale_ref loc) {$/;"	f	namespace:internal
decimal_point_	lib/fmt/fmt/format.h	/^  Char decimal_point_;$/;"	m	class:internal::float_writer
decimal_point_impl	lib/fmt/fmt/format-inl.h	/^template <typename Char> FMT_FUNC Char decimal_point_impl(locale_ref loc) {$/;"	f	namespace:internal
declare_known	lib/lorina/lorina/detail/utils.hpp	/^  void declare_known( const std::string& known )$/;"	f	class:lorina::detail::call_in_topological_order
decltype	lib/fmt/fmt/chrono.h	/^      -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/chrono.h	/^  auto format(const duration& d, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/chrono.h	/^  auto format(const std::tm& tm, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/chrono.h	/^  auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/format.h	/^      -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/format.h	/^  auto format(bytes b, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/format.h	/^  auto format(const Char* val, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/format.h	/^  auto format(const T& val, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	class:dynamic_formatter
decltype	lib/fmt/fmt/format.h	/^  auto format(const T& val, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/format.h	/^  auto format(void* val, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/format.h	/^  auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	class:dynamic_formatter
decltype	lib/fmt/fmt/printf.h	/^  auto format(const T& value, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:printf_formatter
decltype	lib/fmt/fmt/printf.h	/^  auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:printf_formatter
decltype	lib/fmt/fmt/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	lib/fmt/fmt/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatting_base
decltype	lib/fmt/fmt/ranges.h	/^  auto format(const TupleT& values, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
deep_pink	lib/fmt/fmt/color.h	/^  deep_pink = 0xFF1493,                \/\/ rgb(255,20,147)$/;"	m	class:color
deep_sky_blue	lib/fmt/fmt/color.h	/^  deep_sky_blue = 0x00BFFF,            \/\/ rgb(0,191,255)$/;"	m	class:color
delimiter	lib/fmt/fmt/ranges.h	/^  Char delimiter;$/;"	m	struct:formatting_range
delimiter	lib/fmt/fmt/ranges.h	/^  Char delimiter;$/;"	m	struct:formatting_tuple
detail	lib/lorina/lorina/detail/tokenizer.hpp	/^namespace detail$/;"	n	namespace:lorina
detail	lib/lorina/lorina/detail/utils.hpp	/^namespace detail$/;"	n	namespace:lorina
diag	lib/lorina/lorina/genlib.hpp	/^  diagnostic_engine* diag;$/;"	m	class:lorina::genlib_parser
diag	lib/lorina/lorina/super.hpp	/^  diagnostic_engine* diag;$/;"	m	class:lorina::super_parser
diag	lib/lorina/lorina/verilog.hpp	/^  diagnostic_engine* diag;$/;"	m	class:lorina::verilog_parser
diagnostic_builder	lib/lorina/lorina/diagnostics.hpp	/^class diagnostic_builder$/;"	c	namespace:lorina
diagnostic_builder	lib/lorina/lorina/diagnostics.hpp	/^inline diagnostic_builder::diagnostic_builder( diagnostic_engine& engine, diag_id id )$/;"	f	class:lorina::diagnostic_builder
diagnostic_consumer	lib/lorina/lorina/diagnostics.hpp	/^class diagnostic_consumer$/;"	c	namespace:lorina
diagnostic_engine	lib/lorina/lorina/diagnostics.hpp	/^class diagnostic_engine$/;"	c	namespace:lorina
diagnostic_engine	lib/lorina/lorina/diagnostics.hpp	/^inline diagnostic_engine::diagnostic_engine( diagnostic_consumer *client )$/;"	f	class:lorina::diagnostic_engine
diagnostic_level	lib/lorina/lorina/diagnostics.hpp	/^enum class diagnostic_level$/;"	c	namespace:lorina
diff	lib/fmt/fmt/format-inl.h	/^  uint64_t diff;$/;"	m	struct:internal::grisu_shortest_handler
digits	lib/fmt/fmt/format-inl.h	/^const char basic_data<T>::digits[] =$/;"	m	class:internal::basic_data
digits	lib/fmt/fmt/format-inl.h	/^namespace digits {$/;"	n	namespace:internal
digits	lib/fmt/fmt/format.h	/^  static const char digits[];$/;"	m	struct:internal::basic_data
digits_	lib/fmt/fmt/format.h	/^  const char* digits_;$/;"	m	class:internal::float_writer
dim	lib/rang/rang/rang.hpp	/^    dim       = 2,$/;"	m	class:rang::style
dim_gray	lib/fmt/fmt/color.h	/^  dim_gray = 0x696969,                 \/\/ rgb(105,105,105)$/;"	m	class:color
dimacs_reader	lib/lorina/lorina/dimacs.hpp	/^class dimacs_reader$/;"	c	namespace:lorina
dimacs_regex	lib/lorina/lorina/dimacs.hpp	/^namespace dimacs_regex$/;"	n	namespace:lorina
divmod_assign	lib/fmt/fmt/format-inl.h	/^  int divmod_assign(const bigint& divisor) {$/;"	f	class:internal::bigint
do_check_format_string	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR bool do_check_format_string(basic_string_view<Char> s,$/;"	f	namespace:internal
do_parse	lib/fmt/fmt/chrono.h	/^  FMT_CONSTEXPR parse_range do_parse(basic_format_parse_context<Char>& ctx) {$/;"	f	struct:formatter
do_throw	lib/fmt/fmt/format.h	/^template <typename Exception> inline void do_throw(const Exception& x) {$/;"	f	namespace:internal
dodger_blue	lib/fmt/fmt/color.h	/^  dodger_blue = 0x1E90FF,              \/\/ rgb(30,144,255)$/;"	m	class:color
done	lib/fmt/fmt/format-inl.h	/^  done,  \/\/ Done generating digits.$/;"	e	enum:internal::digits::result
double_significand_size	lib/fmt/fmt/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int double_significand_size =$/;"	m	class:internal::fp
double_type	lib/fmt/fmt/core.h	/^  double_type,$/;"	m	class:internal::type
double_value	lib/fmt/fmt/core.h	/^    double double_value;$/;"	m	union:internal::value::__anon6
dup	lib/fmt/fmt/os.cc	/^file file::dup(int fd) {$/;"	f	class:file
dup2	lib/fmt/fmt/os.cc	/^void file::dup2(int fd) {$/;"	f	class:file
dynamic_arg_list	lib/fmt/fmt/core.h	/^class dynamic_arg_list {$/;"	c	namespace:internal
dynamic_format_specs	lib/fmt/fmt/format.h	/^struct dynamic_format_specs : basic_format_specs<Char> {$/;"	s	namespace:internal
dynamic_formatter	lib/fmt/fmt/format.h	/^template <typename Char = char> class dynamic_formatter {$/;"	c
dynamic_specs_handler	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR dynamic_specs_handler(const dynamic_specs_handler& other)$/;"	f	class:internal::dynamic_specs_handler
dynamic_specs_handler	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR dynamic_specs_handler(dynamic_format_specs<char_type>& specs,$/;"	f	class:internal::dynamic_specs_handler
dynamic_specs_handler	lib/fmt/fmt/format.h	/^class dynamic_specs_handler$/;"	c	namespace:internal
e	lib/fmt/fmt/format-inl.h	/^  int e;$/;"	m	class:internal::fp
emit	lib/lorina/lorina/diagnostics.hpp	/^inline void diagnostic_engine::emit( diag_id id, std::vector<std::string> const& args ) const$/;"	f	class:lorina::diagnostic_engine
emit_custom_diagnostic	lib/lorina/lorina/diagnostics.hpp	/^inline void diagnostic_engine::emit_custom_diagnostic( diag_id id, std::vector<std::string> const& args ) const$/;"	f	class:lorina::diagnostic_engine
emit_static_diagnostic	lib/lorina/lorina/diagnostics.hpp	/^inline void diagnostic_engine::emit_static_diagnostic( diag_id id, std::vector<std::string> const& args ) const$/;"	f	class:lorina::diagnostic_engine
emphasis	lib/fmt/fmt/color.h	/^enum class emphasis : uint8_t {$/;"	c	class:color
ems	lib/fmt/fmt/color.h	/^        ems() {$/;"	f	class:color::emphasis::text_style
ems	lib/fmt/fmt/color.h	/^        ems(em) {}$/;"	f	class:color::emphasis::text_style
ems	lib/fmt/fmt/color.h	/^  emphasis ems;$/;"	m	class:color::emphasis::text_style
encode_types	lib/fmt/fmt/core.h	/^constexpr unsigned long long encode_types() {$/;"	f	namespace:internal
encode_types	lib/fmt/fmt/core.h	/^template <typename> constexpr unsigned long long encode_types() { return 0; }$/;"	f	namespace:internal
end	docs/make.bat	/^:end$/;"	l
end	lib/fmt/fmt/chrono.h	/^    iterator end;$/;"	m	struct:formatter::parse_range
end	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR iterator end() const { return data_ + size_; }$/;"	f	class:basic_string_view
end	lib/fmt/fmt/format.h	/^  It end;$/;"	m	struct:arg_join
end	lib/fmt/fmt/format.h	/^  sentinel end() const { return {}; }  \/\/ Sentinel is not used yet.$/;"	f	class:internal::output_range
end_precision	lib/fmt/fmt/chrono.h	/^    void end_precision() {}$/;"	f	struct:formatter::spec_handler
end_precision	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void end_precision() { checker_.check_precision(); }$/;"	f	class:internal::specs_checker
end_precision	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void end_precision() {}$/;"	f	class:internal::specs_setter
engine_	lib/lorina/lorina/diagnostics.hpp	/^  diagnostic_engine& engine_; \/*!< diagnostic engine *\/$/;"	m	class:lorina::diagnostic_builder
entry	lib/fmt/fmt/core.h	/^  struct entry {$/;"	s	class:internal::arg_map
error	lib/fmt/fmt/format-inl.h	/^  error  \/\/ Digit generation cancelled due to an error.$/;"	e	enum:internal::digits::result
error	lib/lorina/lorina/diagnostics.hpp	/^  error = 5,$/;"	m	class:lorina::diagnostic_level
error_code	lib/fmt/fmt/format.h	/^  int error_code() const { return error_code_; }$/;"	f	class:system_error
error_code	lib/fmt/fmt/os.h	/^class error_code {$/;"	c
error_code_	lib/fmt/fmt/format.h	/^  int error_code_;$/;"	m	class:system_error
error_handler	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR ErrorHandler error_handler() const { return *this; }$/;"	f	class:basic_format_parse_context
error_handler	lib/fmt/fmt/core.h	/^  internal::error_handler error_handler() { return {}; }$/;"	f	class:basic_format_context
error_handler	lib/fmt/fmt/core.h	/^struct error_handler {$/;"	s	namespace:internal
error_handler_	lib/fmt/fmt/format.h	/^  ErrorHandler& error_handler_;$/;"	m	class:internal::numeric_specs_checker
exclude_patterns	docs/source/conf.py	/^exclude_patterns = []$/;"	v
exp	lib/fmt/fmt/format.h	/^  exp,      \/\/ Exponent notation with the default precision of 6, e.g. 1.2e-3.$/;"	m	class:internal::float_format
exp10	lib/fmt/fmt/format-inl.h	/^  int exp10;$/;"	m	struct:internal::fixed_handler
exp_	lib/fmt/fmt/format-inl.h	/^  int exp_;$/;"	m	class:internal::bigint
exp_	lib/fmt/fmt/format.h	/^  int exp_;$/;"	m	class:internal::float_writer
extensions	docs/source/conf.py	/^extensions = []$/;"	v
f	lib/fmt/fmt/chrono.h	/^    formatter& f;$/;"	m	struct:formatter::spec_handler
f	lib/fmt/fmt/format-inl.h	/^  significand_type f;$/;"	m	class:internal::fp
f	lib/fmt/fmt/format.h	/^    F f;$/;"	m	struct:internal::basic_writer::padded_int_writer
f	lib/lorina/lorina/detail/utils.hpp	/^  std::function<void(Args...)> f;$/;"	m	class:lorina::detail::call_in_topological_order
fall_block_delay	lib/lorina/lorina/genlib.hpp	/^  double fall_block_delay;$/;"	m	struct:lorina::pin_spec
fall_fanout_delay	lib/lorina/lorina/genlib.hpp	/^  double fall_fanout_delay;$/;"	m	struct:lorina::pin_spec
fallback_format	lib/fmt/fmt/format-inl.h	/^void fallback_format(Double d, buffer<char>& buf, int& exp10) {$/;"	f	namespace:internal
fallback_formatter	lib/fmt/fmt/core.h	/^struct fallback_formatter {$/;"	s	namespace:internal
fallback_uintptr	lib/fmt/fmt/format.h	/^  explicit fallback_uintptr(const void* p) {$/;"	f	struct:internal::fallback_uintptr
fallback_uintptr	lib/fmt/fmt/format.h	/^struct fallback_uintptr {$/;"	s	namespace:internal
fatal	lib/lorina/lorina/diagnostics.hpp	/^  fatal = 6,$/;"	m	class:lorina::diagnostic_level
fd_	lib/fmt/fmt/os.h	/^  file(file&& other) FMT_NOEXCEPT : fd_(other.fd_) { other.fd_ = -1; }$/;"	f	class:file
fd_	lib/fmt/fmt/os.h	/^  int fd_;  \/\/ File descriptor.$/;"	m	class:file
fdopen	lib/fmt/fmt/os.cc	/^buffered_file file::fdopen(const char* mode) {$/;"	f	class:file
fg	lib/rang/rang/rang.hpp	/^enum class fg {$/;"	c	class:rang::style
fgB	lib/rang/rang/rang.hpp	/^enum class fgB {$/;"	c	class:rang::style::fg::bg
field	lib/fmt/fmt/compile.h	/^template <typename Char, typename T, int N> struct field {$/;"	s	namespace:internal
file	lib/fmt/fmt/os.cc	/^file::file(cstring_view path, int oflag) {$/;"	f	class:file
file	lib/fmt/fmt/os.h	/^  explicit file(int fd) : fd_(fd) {}$/;"	f	class:file
file	lib/fmt/fmt/os.h	/^class file {$/;"	c
file_	lib/fmt/fmt/os.h	/^  FILE* file_;$/;"	m	class:buffered_file
file_	lib/fmt/fmt/os.h	/^  buffered_file() FMT_NOEXCEPT : file_(nullptr) {}$/;"	f	class:buffered_file
file_	lib/fmt/fmt/os.h	/^  buffered_file(buffered_file&& other) FMT_NOEXCEPT : file_(other.file_) {$/;"	f	class:buffered_file
fileno	lib/fmt/fmt/os.cc	/^#  undef fileno$/;"	d	file:
fileno	lib/fmt/fmt/os.cc	/^int buffered_file::fileno() const {$/;"	f	class:buffered_file
fill	lib/fmt/fmt/format.h	/^    char_type fill;$/;"	m	struct:internal::basic_writer::padded_int_writer
fill	lib/fmt/fmt/format.h	/^  internal::fill_t<Char> fill;$/;"	m	struct:basic_format_specs
fill	lib/fmt/fmt/format.h	/^FMT_NOINLINE OutputIt fill(OutputIt it, size_t n, const fill_t<Char>& fill) {$/;"	f	namespace:internal
fill_t	lib/fmt/fmt/format.h	/^template <typename Char> struct fill_t {$/;"	s	namespace:internal
find	lib/fmt/fmt/core.h	/^  basic_format_arg<Context> find(basic_string_view<char_type> name) const {$/;"	f	class:internal::arg_map
find	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR bool find(Ptr first, Ptr last, T value, Ptr& out) {$/;"	f	namespace:internal
find	lib/fmt/fmt/format.h	/^inline bool find<false, char>(const char* first, const char* last, char value,$/;"	f	namespace:internal
fire_brick	lib/fmt/fmt/color.h	/^  fire_brick = 0xB22222,               \/\/ rgb(178,34,34)$/;"	m	class:color
first_input	lib/lorina/lorina/blif.hpp	/^  mutable bool first_input = true; \/*!< Predicate that is true until the first input was parsed *\/$/;"	m	class:lorina::blif_pretty_printer
first_output	lib/lorina/lorina/blif.hpp	/^  mutable bool first_output = true; \/*!< Predicate that is true until the first output was parsed *\/$/;"	m	class:lorina::blif_pretty_printer
fits_in_int	lib/fmt/fmt/printf.h	/^  static bool fits_in_int(bool) { return true; }$/;"	f	struct:internal::int_checker
fits_in_int	lib/fmt/fmt/printf.h	/^  static bool fits_in_int(int) { return true; }$/;"	f	struct:internal::int_checker
fits_in_int	lib/fmt/fmt/printf.h	/^  template <typename T> static bool fits_in_int(T value) {$/;"	f	struct:internal::int_checker
fixed	lib/fmt/fmt/format-inl.h	/^  bool fixed;$/;"	m	struct:internal::fixed_handler
fixed	lib/fmt/fmt/format.h	/^  fixed,    \/\/ Fixed point with the default precision of 6, e.g. 0.0012.$/;"	m	class:internal::float_format
fixed_handler	lib/fmt/fmt/format-inl.h	/^struct fixed_handler {$/;"	s	namespace:internal
float_format	lib/fmt/fmt/format.h	/^enum class float_format : unsigned char {$/;"	c	namespace:internal
float_specs	lib/fmt/fmt/format.h	/^struct float_specs {$/;"	s	namespace:internal
float_type	lib/fmt/fmt/core.h	/^  float_type,$/;"	m	class:internal::type
float_value	lib/fmt/fmt/core.h	/^    float float_value;$/;"	m	union:internal::value::__anon6
float_writer	lib/fmt/fmt/format.h	/^  float_writer(const char* digits, int num_digits, int exp, float_specs specs,$/;"	f	class:internal::float_writer
float_writer	lib/fmt/fmt/format.h	/^template <typename Char> class float_writer {$/;"	c	namespace:internal
floral_white	lib/fmt/fmt/color.h	/^  floral_white = 0xFFFAF0,             \/\/ rgb(255,250,240)$/;"	m	class:color
fmt	lib/fmt/fmt/format.h	/^#  define fmt(/;"	d
fmt_safe_duration_cast	lib/fmt/fmt/chrono.h	/^To fmt_safe_duration_cast(std::chrono::duration<FromRep, FromPeriod> from) {$/;"	f	namespace:internal
fmt_snprintf	lib/fmt/fmt/format-inl.h	/^inline int fmt_snprintf(char* buffer, size_t size, const char* format, ...) {$/;"	f	namespace:internal
for_each	lib/fmt/fmt/ranges.h	/^template <class Tuple, class F> void for_each(Tuple&& tup, F&& f) {$/;"	f	namespace:internal
foreach_line_in_file_escape	lib/lorina/lorina/detail/utils.hpp	/^inline void foreach_line_in_file_escape( std::istream& in, const std::function<bool( const std::string& )>& f )$/;"	f	namespace:lorina::detail
foreground_color	lib/fmt/fmt/color.h	/^  internal::color_type foreground_color;$/;"	m	class:color::emphasis::text_style
foreground_color	lib/fmt/fmt/format-inl.h	/^const char basic_data<T>::foreground_color[] = "\\x1b[38;2;";$/;"	m	class:internal::basic_data
foreground_color	lib/fmt/fmt/format.h	/^  static const char foreground_color[];$/;"	m	struct:internal::basic_data
forest_green	lib/fmt/fmt/color.h	/^  forest_green = 0x228B22,             \/\/ rgb(34,139,34)$/;"	m	class:color
format	lib/fmt/fmt/color.h	/^inline std::basic_string<Char> format(const text_style& ts, const S& format_str,$/;"	f	class:color::emphasis
format	lib/fmt/fmt/compile.h	/^  OutputIt format(OutputIt out, const Args&... args) const {$/;"	f	struct:internal::concat
format	lib/fmt/fmt/compile.h	/^  OutputIt format(OutputIt out, const Args&... args) const {$/;"	f	struct:internal::field
format	lib/fmt/fmt/compile.h	/^  OutputIt format(OutputIt out, const Args&...) const {$/;"	f	struct:internal::text
format	lib/fmt/fmt/compile.h	/^std::basic_string<Char> format(const CompiledFormat& cf, const Args&... args) {$/;"	f
format	lib/fmt/fmt/core.h	/^    void format(basic_format_parse_context<char_type>& parse_ctx,$/;"	f	class:basic_format_arg::handle
format	lib/fmt/fmt/core.h	/^  void (*format)(const void* arg, parse_context& parse_ctx, Context& ctx);$/;"	m	struct:internal::custom_value
format	lib/fmt/fmt/format-inl.h	/^  format_context::iterator format(const internal::bigint& n,$/;"	f	struct:formatter
format	lib/fmt/fmt/format.h	/^  float_format format : 8;$/;"	m	struct:internal::float_specs
format	lib/fmt/fmt/locale.h	/^inline std::basic_string<Char> format(const std::locale& loc,$/;"	f
format	lib/fmt/fmt/printf.h	/^OutputIt basic_printf_context<OutputIt, Char>::format() {$/;"	f	class:basic_printf_context
format	lib/fmt/fmt/ranges.h	/^  typename FormatContext::iterator format($/;"	f	struct:formatter
format	lib/fmt/fmt/ranges.h	/^  typename FormatContext::iterator format(const RangeT& values,$/;"	f	struct:formatter
format_arg	lib/fmt/fmt/compile.h	/^void format_arg($/;"	f	namespace:internal
format_arg_store	lib/fmt/fmt/core.h	/^class format_arg_store$/;"	c
format_args	lib/fmt/fmt/ranges.h	/^  typename FormatContext::iterator format_args($/;"	f	struct:formatter
format_custom_arg	lib/fmt/fmt/core.h	/^  static void format_custom_arg($/;"	f	class:internal::value
format_decimal	lib/fmt/fmt/format.h	/^  char* format_decimal(unsigned long long value) {$/;"	f	class:format_int
format_decimal	lib/fmt/fmt/format.h	/^inline Char* format_decimal(Char* buffer, UInt value, int num_digits,$/;"	f	namespace:internal
format_decimal	lib/fmt/fmt/format.h	/^inline It format_decimal(It out, UInt value, int num_digits) {$/;"	f	namespace:internal
format_decimal	lib/fmt/fmt/format.h	/^inline Iterator format_decimal(Iterator out, UInt value, int num_digits,$/;"	f	namespace:internal
format_default	lib/fmt/fmt/compile.h	/^OutputIt format_default(OutputIt out, Char value) {$/;"	f	namespace:internal
format_default	lib/fmt/fmt/compile.h	/^OutputIt format_default(OutputIt out, T value) {$/;"	f	namespace:internal
format_default	lib/fmt/fmt/compile.h	/^OutputIt format_default(OutputIt out, const Char* value) {$/;"	f	namespace:internal
format_default	lib/fmt/fmt/compile.h	/^OutputIt format_default(OutputIt out, double value) {$/;"	f	namespace:internal
format_duration_unit	lib/fmt/fmt/chrono.h	/^OutputIt format_duration_unit(OutputIt out) {$/;"	f	namespace:internal
format_duration_value	lib/fmt/fmt/chrono.h	/^OutputIt format_duration_value(OutputIt out, Rep val, int precision) {$/;"	f	namespace:internal
format_each	lib/fmt/fmt/ranges.h	/^  template <typename FormatContext> struct format_each {$/;"	s	struct:formatter
format_error	lib/fmt/fmt/format.h	/^  explicit format_error(const char* message) : std::runtime_error(message) {}$/;"	f	class:format_error
format_error	lib/fmt/fmt/format.h	/^  explicit format_error(const std::string& message)$/;"	f	class:format_error
format_error	lib/fmt/fmt/format.h	/^class FMT_API format_error : public std::runtime_error {$/;"	c
format_float	lib/fmt/fmt/format-inl.h	/^int format_float(T value, int precision, float_specs specs, buffer<char>& buf) {$/;"	f	namespace:internal
format_float	lib/fmt/fmt/format.cc	/^int format_float(char* buf, std::size_t size, const char* format, int precision,$/;"	f	namespace:internal
format_handler	lib/fmt/fmt/format.h	/^  format_handler(range r, basic_string_view<Char> str,$/;"	f	struct:format_handler
format_handler	lib/fmt/fmt/format.h	/^struct format_handler : internal::error_handler {$/;"	s
format_int	lib/fmt/fmt/format.h	/^  explicit format_int(int value) { format_signed(value); }$/;"	f	class:format_int
format_int	lib/fmt/fmt/format.h	/^  explicit format_int(long long value) { format_signed(value); }$/;"	f	class:format_int
format_int	lib/fmt/fmt/format.h	/^  explicit format_int(long value) { format_signed(value); }$/;"	f	class:format_int
format_int	lib/fmt/fmt/format.h	/^  explicit format_int(unsigned long long value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	lib/fmt/fmt/format.h	/^  explicit format_int(unsigned long value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	lib/fmt/fmt/format.h	/^  explicit format_int(unsigned value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	lib/fmt/fmt/format.h	/^class format_int {$/;"	c
format_localized	lib/fmt/fmt/chrono.h	/^  void format_localized(const tm& time, char format, char modifier = 0) {$/;"	f	struct:internal::chrono_formatter
format_part	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR format_part(kind k = kind::arg_index, value v = {})$/;"	f	struct:internal::format_part
format_part	lib/fmt/fmt/compile.h	/^template <typename Char> struct format_part {$/;"	s	namespace:internal
format_part_array	lib/fmt/fmt/compile.h	/^template <typename Char, unsigned N> struct format_part_array {$/;"	s	namespace:internal
format_signed	lib/fmt/fmt/format.h	/^  void format_signed(long long value) {$/;"	f	class:format_int
format_str	lib/fmt/fmt/chrono.h	/^    basic_string_view<Char> format_str;$/;"	m	struct:formatter::spec_handler
format_str	lib/fmt/fmt/chrono.h	/^  mutable basic_string_view<Char> format_str;$/;"	m	struct:formatter
format_str_	lib/fmt/fmt/compile.h	/^  basic_string_view<Char> format_str_;$/;"	m	class:internal::format_string_compiler
format_str_	lib/fmt/fmt/compile.h	/^  basic_string_view<char_type> format_str_;$/;"	m	class:internal::compiled_format
format_str_	lib/fmt/fmt/core.h	/^  basic_string_view<Char> format_str_;$/;"	m	class:basic_format_parse_context
format_str_	lib/fmt/fmt/format.h	/^  const Char* format_str_;$/;"	m	class:dynamic_formatter
format_str_quoted	lib/fmt/fmt/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const Arg&) {$/;"	f	namespace:internal
format_str_quoted	lib/fmt/fmt/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const char) {$/;"	f	namespace:internal
format_str_quoted	lib/fmt/fmt/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const char*) {$/;"	f	namespace:internal
format_str_quoted	lib/fmt/fmt/ranges.h	/^FMT_CONSTEXPR const wchar_t* format_str_quoted(bool add_space, const wchar_t) {$/;"	f	namespace:internal
format_str_quoted	lib/fmt/fmt/ranges.h	/^FMT_CONSTEXPR const wchar_t* format_str_quoted(bool add_space, const wchar_t*) {$/;"	f	namespace:internal
format_string_checker	lib/fmt/fmt/format.h	/^  explicit FMT_CONSTEXPR format_string_checker($/;"	f	class:internal::format_string_checker
format_string_checker	lib/fmt/fmt/format.h	/^class format_string_checker {$/;"	c	namespace:internal
format_string_compiler	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR format_string_compiler(basic_string_view<Char> format_str,$/;"	f	class:internal::format_string_compiler
format_string_compiler	lib/fmt/fmt/compile.h	/^class format_string_compiler : public error_handler {$/;"	c	namespace:internal
format_to	lib/fmt/fmt/compile.h	/^OutputIt format_to(OutputIt out, const CompiledFormat& cf,$/;"	f
format_to	lib/fmt/fmt/format.h	/^inline OutputIt format_to(OutputIt out, const S& format_str, Args&&... args) {$/;"	f
format_to	lib/fmt/fmt/format.h	/^inline typename buffer_context<Char>::iterator format_to($/;"	f
format_to	lib/fmt/fmt/locale.h	/^inline OutputIt format_to(OutputIt out, const std::locale& loc,$/;"	f
format_to_n	lib/fmt/fmt/compile.h	/^format_to_n_result<OutputIt> format_to_n(OutputIt out, size_t n,$/;"	f
format_to_n	lib/fmt/fmt/format.h	/^inline format_to_n_result<OutputIt> format_to_n(OutputIt out, std::size_t n,$/;"	f
format_to_n_result	lib/fmt/fmt/format.h	/^template <typename OutputIt> struct format_to_n_result {$/;"	s
format_uint	lib/fmt/fmt/format.h	/^Char* format_uint(Char* buffer, internal::fallback_uintptr n, int num_digits,$/;"	f	namespace:internal
format_uint	lib/fmt/fmt/format.h	/^inline Char* format_uint(Char* buffer, UInt value, int num_digits,$/;"	f	namespace:internal
format_uint	lib/fmt/fmt/format.h	/^inline It format_uint(It out, UInt value, int num_digits, bool upper = false) {$/;"	f	namespace:internal
formatbuf	lib/fmt/fmt/ostream.h	/^  formatbuf(buffer<Char>& buf) : buffer_(buf) {}$/;"	f	class:internal::formatbuf
formatbuf	lib/fmt/fmt/ostream.h	/^template <class Char> class formatbuf : public std::basic_streambuf<Char> {$/;"	c	namespace:internal
formatted_size	lib/fmt/fmt/compile.h	/^std::size_t formatted_size(const CompiledFormat& cf, const Args&... args) {$/;"	f
formatted_size	lib/fmt/fmt/format.h	/^inline std::size_t formatted_size(string_view format_str, const Args&... args) {$/;"	f
formatter	lib/fmt/fmt/chrono.h	/^  formatter() : precision(-1) {}$/;"	f	struct:formatter
formatter	lib/fmt/fmt/chrono.h	/^struct formatter<std::chrono::duration<Rep, Period>, Char> {$/;"	s
formatter	lib/fmt/fmt/chrono.h	/^template <typename Char> struct formatter<std::tm, Char> {$/;"	s
formatter	lib/fmt/fmt/core.h	/^struct formatter {$/;"	s
formatter	lib/fmt/fmt/format-inl.h	/^template <> struct formatter<internal::bigint> {$/;"	s
formatter	lib/fmt/fmt/format.h	/^    arg_formatter_base& formatter;$/;"	m	struct:internal::arg_formatter_base::char_spec_handler
formatter	lib/fmt/fmt/format.h	/^    arg_formatter_base& formatter;$/;"	m	struct:internal::arg_formatter_base::cstring_spec_handler
formatter	lib/fmt/fmt/format.h	/^struct formatter<Char[N], Char> : formatter<basic_string_view<Char>, Char> {$/;"	s
formatter	lib/fmt/fmt/format.h	/^struct formatter<T, Char,$/;"	s
formatter	lib/fmt/fmt/format.h	/^struct formatter<arg_join<It, Char>, Char>$/;"	s
formatter	lib/fmt/fmt/format.h	/^struct formatter<void*, Char> : formatter<const void*, Char> {$/;"	s
formatter	lib/fmt/fmt/format.h	/^template <> struct formatter<bytes> {$/;"	s
formatter	lib/fmt/fmt/ranges.h	/^struct formatter<RangeT, Char,$/;"	s
formatter	lib/fmt/fmt/ranges.h	/^struct formatter<TupleT, Char, enable_if_t<fmt::is_tuple_like<TupleT>::value>> {$/;"	s
formatter	lib/fmt/fmt/ranges.h	/^struct formatter<tuple_arg_join<Char, T...>, Char> {$/;"	s
formatting	lib/fmt/fmt/ranges.h	/^    formatting_tuple<Char>& formatting;$/;"	m	struct:formatter::format_each
formatting	lib/fmt/fmt/ranges.h	/^  formatting_range<Char> formatting;$/;"	m	struct:formatter
formatting	lib/fmt/fmt/ranges.h	/^  formatting_tuple<Char> formatting;$/;"	m	struct:formatter
formatting_base	lib/fmt/fmt/ranges.h	/^template <typename Char> struct formatting_base {$/;"	s
formatting_range	lib/fmt/fmt/ranges.h	/^  formatting_range() : prefix('{'), delimiter(','), postfix('}') {}$/;"	f	struct:formatting_range
formatting_range	lib/fmt/fmt/ranges.h	/^struct formatting_range : formatting_base<Char> {$/;"	s
formatting_tuple	lib/fmt/fmt/ranges.h	/^  formatting_tuple() : prefix('('), delimiter(','), postfix(')') {}$/;"	f	struct:formatting_tuple
formatting_tuple	lib/fmt/fmt/ranges.h	/^struct formatting_tuple : formatting_base<Char> {$/;"	s
fp	lib/fmt/fmt/format-inl.h	/^  fp() : f(0), e(0) {}$/;"	f	class:internal::fp
fp	lib/fmt/fmt/format-inl.h	/^  fp(uint64_t f_val, int e_val) : f(f_val), e(e_val) {}$/;"	f	class:internal::fp
fp	lib/fmt/fmt/format-inl.h	/^  template <typename Double> explicit fp(Double d) { assign(d); }$/;"	f	class:internal::fp
fp	lib/fmt/fmt/format-inl.h	/^class fp {$/;"	c	namespace:internal
fprintf	lib/fmt/fmt/printf.h	/^inline int fprintf(std::FILE* f, const S& format, const Args&... args) {$/;"	f
fprintf	lib/fmt/fmt/printf.h	/^inline int fprintf(std::basic_ostream<Char>& os, const S& format_str,$/;"	f
freelocale	lib/fmt/fmt/os.h	/^  static void freelocale(locale_t loc) { _free_locale(loc); }$/;"	f	class:locale
fuchsia	lib/fmt/fmt/color.h	/^  fuchsia = 0xFF00FF,                  \/\/ rgb(255,0,255)$/;"	m	class:color
fwrite_fully	lib/fmt/fmt/format-inl.h	/^FMT_FUNC void fwrite_fully(const void* ptr, size_t size, size_t count,$/;"	f	namespace:internal
g	lib/fmt/fmt/color.h	/^  uint8_t g;$/;"	m	struct:color::emphasis::rgb
gainsboro	lib/fmt/fmt/color.h	/^  gainsboro = 0xDCDCDC,                \/\/ rgb(220,220,220)$/;"	m	class:color
general	lib/fmt/fmt/format.h	/^  general,  \/\/ General: exponent notation or fixed point based on magnitude.$/;"	m	class:internal::float_format
genlib_parser	lib/lorina/lorina/genlib.hpp	/^  explicit genlib_parser( std::istream& in, genlib_reader const& reader, diagnostic_engine* diag )$/;"	f	class:lorina::genlib_parser
genlib_parser	lib/lorina/lorina/genlib.hpp	/^class genlib_parser$/;"	c	namespace:lorina
genlib_reader	lib/lorina/lorina/genlib.hpp	/^class genlib_reader$/;"	c	namespace:lorina
get	lib/fmt/fmt/compile.h	/^constexpr const auto& get(const T& first, const Args&... rest) {$/;"	f	namespace:internal
get	lib/fmt/fmt/format-inl.h	/^template <typename Locale> Locale locale_ref::get() const {$/;"	f	class:internal::locale_ref
get	lib/fmt/fmt/os.h	/^  type get() const { return locale_; }$/;"	f	class:locale
get_allocator	lib/fmt/fmt/format.h	/^  Allocator get_allocator() const { return *this; }$/;"	f	class:basic_memory_buffer
get_arg	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR format_arg get_arg(auto_id) {$/;"	f	class:internal::specs_handler
get_arg	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR format_arg get_arg(basic_string_view<char_type> arg_id) {$/;"	f	class:internal::specs_handler
get_arg	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR format_arg get_arg(int arg_id) {$/;"	f	class:internal::specs_handler
get_arg	lib/fmt/fmt/format.h	/^  void get_arg(int id) { arg = internal::get_arg(context, id); }$/;"	f	struct:format_handler
get_arg	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR typename Context::format_arg get_arg(Context& ctx, int id) {$/;"	f	namespace:internal
get_arg	lib/fmt/fmt/printf.h	/^basic_printf_context<OutputIt, Char>::get_arg(int arg_index) {$/;"	f	class:basic_printf_context
get_cached_power	lib/fmt/fmt/format-inl.h	/^inline fp get_cached_power(int min_exponent, int& pow10_exponent) {$/;"	f	namespace:internal
get_char	lib/lorina/lorina/detail/tokenizer.hpp	/^  bool get_char( char& c )$/;"	f	class:lorina::detail::tokenizer_return_code::tokenizer
get_comment_mode	lib/lorina/lorina/detail/tokenizer.hpp	/^  bool get_comment_mode() const$/;"	f	class:lorina::detail::tokenizer_return_code::tokenizer
get_container	lib/fmt/fmt/core.h	/^inline Container& get_container(std::back_insert_iterator<Container> it) {$/;"	f	namespace:internal
get_data	lib/fmt/fmt/format.h	/^inline typename Container::value_type* get_data(Container& c) {$/;"	f	namespace:internal
get_data	lib/fmt/fmt/format.h	/^template <typename Char> inline Char* get_data(std::basic_string<Char>& s) {$/;"	f	namespace:internal
get_dynamic_spec	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR int get_dynamic_spec(FormatArg arg, ErrorHandler eh) {$/;"	f	namespace:internal
get_indexes	lib/fmt/fmt/ranges.h	/^FMT_CONSTEXPR make_index_sequence<std::tuple_size<T>::value> get_indexes($/;"	f	namespace:internal
get_milliseconds	lib/fmt/fmt/chrono.h	/^inline std::chrono::duration<Rep, std::milli> get_milliseconds($/;"	f	namespace:internal
get_num_diagnostics	lib/lorina/lorina/diagnostics.hpp	/^inline uint64_t diagnostic_engine::get_num_diagnostics() const$/;"	f	class:lorina::diagnostic_engine
get_prefix	lib/fmt/fmt/format.h	/^    string_view get_prefix() const { return string_view(prefix, prefix_size); }$/;"	f	struct:internal::basic_writer::int_writer
get_round_direction	lib/fmt/fmt/format-inl.h	/^inline round_direction get_round_direction(uint64_t divisor, uint64_t remainder,$/;"	f	namespace:internal
get_token	lib/lorina/lorina/detail/tokenizer.hpp	/^  bool get_token( std::string& token )$/;"	f	class:lorina::detail::tokenizer_return_code::tokenizer
get_token	lib/lorina/lorina/verilog.hpp	/^  bool get_token( std::string& token )$/;"	f	class:lorina::verilog_parser
get_token_internal	lib/lorina/lorina/detail/tokenizer.hpp	/^  tokenizer_return_code get_token_internal( std::string& token )$/;"	f	class:lorina::detail::tokenizer_return_code::tokenizer
get_tokens_of_next_line	lib/lorina/lorina/bristol.hpp	/^  bool get_tokens_of_next_line( std::vector<std::string>& tokens )$/;"	f	class:lorina::bristol_parser
get_type_impl	lib/fmt/fmt/compile.h	/^template <int N, typename... Args> struct get_type_impl<N, type_list<Args...>> {$/;"	s	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::atto>() { return "as"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::centi>() { return "cs"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::deca>() { return "das"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::deci>() { return "ds"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::exa>() { return "Es"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::femto>() { return "fs"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::giga>() { return "Gs"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::hecto>() { return "hs"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::kilo>() { return "ks"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::mega>() { return "Ms"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::micro>() { return "µs"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::milli>() { return "ms"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::nano>() { return "ns"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::peta>() { return "Ps"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::pico>() { return "ps"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::ratio<1>>() { return "s"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::ratio<3600>>() {$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::ratio<60>>() {$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::tera>() { return "Ts"; }$/;"	f	namespace:internal
get_units	lib/fmt/fmt/chrono.h	/^template <typename Period> FMT_CONSTEXPR const char* get_units() {$/;"	f	namespace:internal
getline	lib/lorina/lorina/detail/utils.hpp	/^inline std::istream& getline( std::istream& is, std::string& t )$/;"	f	namespace:lorina::detail
getpagesize	lib/fmt/fmt/os.cc	/^long getpagesize() {$/;"	f
ghost_white	lib/fmt/fmt/color.h	/^  ghost_white = 0xF8F8FF,              \/\/ rgb(248,248,255)$/;"	m	class:color
gmtime	lib/fmt/fmt/chrono.h	/^inline std::tm gmtime(std::time_t time) {$/;"	f
gmtime_r	lib/fmt/fmt/chrono.h	/^inline null<> gmtime_r(...) { return null<>(); }$/;"	f	namespace:internal
gmtime_s	lib/fmt/fmt/chrono.h	/^inline null<> gmtime_s(...) { return null<>(); }$/;"	f	namespace:internal
gold	lib/fmt/fmt/color.h	/^  gold = 0xFFD700,                     \/\/ rgb(255,215,0)$/;"	m	class:color
golden_rod	lib/fmt/fmt/color.h	/^  golden_rod = 0xDAA520,               \/\/ rgb(218,165,32)$/;"	m	class:color
gray	lib/fmt/fmt/color.h	/^  gray = 0x808080,                     \/\/ rgb(128,128,128)$/;"	m	class:color
gray	lib/rang/rang/rang.hpp	/^    gray    = 107$/;"	m	class:rang::style::fg::bg::fgB::bgB
gray	lib/rang/rang/rang.hpp	/^    gray    = 37,$/;"	m	class:rang::style::fg
gray	lib/rang/rang/rang.hpp	/^    gray    = 47,$/;"	m	class:rang::style::fg::bg
gray	lib/rang/rang/rang.hpp	/^    gray    = 97$/;"	m	class:rang::style::fg::bg::fgB
green	lib/fmt/fmt/color.h	/^  green = 0x008000,                    \/\/ rgb(0,128,0)$/;"	m	class:color
green	lib/fmt/fmt/color.h	/^  green,$/;"	m	class:color::terminal_color
green	lib/rang/rang/rang.hpp	/^    green   = 102,$/;"	m	class:rang::style::fg::bg::fgB::bgB
green	lib/rang/rang/rang.hpp	/^    green   = 32,$/;"	m	class:rang::style::fg
green	lib/rang/rang/rang.hpp	/^    green   = 42,$/;"	m	class:rang::style::fg::bg
green	lib/rang/rang/rang.hpp	/^    green   = 92,$/;"	m	class:rang::style::fg::bg::fgB
green_yellow	lib/fmt/fmt/color.h	/^  green_yellow = 0xADFF2F,             \/\/ rgb(173,255,47)$/;"	m	class:color
grisu_count_digits	lib/fmt/fmt/format-inl.h	/^inline int grisu_count_digits(uint32_t n) {$/;"	f	namespace:internal
grisu_gen_digits	lib/fmt/fmt/format-inl.h	/^FMT_ALWAYS_INLINE digits::result grisu_gen_digits(fp value, uint64_t error,$/;"	f	namespace:internal
grisu_shortest_handler	lib/fmt/fmt/format-inl.h	/^struct grisu_shortest_handler {$/;"	s	namespace:internal
grouping	lib/fmt/fmt/format.h	/^template <> inline std::string grouping<wchar_t>(locale_ref loc) {$/;"	f	namespace:internal
grouping	lib/fmt/fmt/format.h	/^template <typename Char> inline std::string grouping(locale_ref loc) {$/;"	f	namespace:internal
grouping_impl	lib/fmt/fmt/format-inl.h	/^template <typename Char> FMT_FUNC std::string grouping_impl(locale_ref loc) {$/;"	f	namespace:internal
groups	lib/fmt/fmt/format.h	/^      const std::string& groups;$/;"	m	struct:internal::basic_writer::int_writer::num_writer
grow	lib/fmt/fmt/format.h	/^void basic_memory_buffer<T, SIZE, Allocator>::grow(std::size_t size) {$/;"	f	class:basic_memory_buffer
handle	lib/fmt/fmt/core.h	/^    explicit handle(internal::custom_value<Context> custom) : custom_(custom) {}$/;"	f	class:basic_format_arg::handle
handle	lib/fmt/fmt/core.h	/^  class handle {$/;"	c	class:basic_format_arg
handle_char_specs	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR void handle_char_specs(const basic_format_specs<Char>* specs,$/;"	f	namespace:internal
handle_cstring_type_spec	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR void handle_cstring_type_spec(Char spec, Handler&& handler) {$/;"	f	namespace:internal
handle_diagnostic	lib/lorina/lorina/diagnostics.hpp	/^  virtual void handle_diagnostic( diagnostic_level level, std::string const& message ) const$/;"	f	class:lorina::diagnostic_consumer
handle_dynamic_spec	lib/fmt/fmt/format.h	/^void handle_dynamic_spec(int& value, arg_ref<typename Context::char_type> ref,$/;"	f	namespace:internal
handle_int_type_spec	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR void handle_int_type_spec(char spec, Handler&& handler) {$/;"	f	namespace:internal
handle_nan_inf	lib/fmt/fmt/chrono.h	/^  bool handle_nan_inf() {$/;"	f	struct:internal::chrono_formatter
handle_specs	lib/fmt/fmt/format.h	/^  template <typename Context> void handle_specs(Context& ctx) {$/;"	f	class:dynamic_formatter
handler	lib/fmt/fmt/format.h	/^  Handler& handler;$/;"	m	struct:internal::id_adapter
handler	lib/fmt/fmt/format.h	/^  SpecHandler& handler;$/;"	m	struct:internal::precision_adapter
handler	lib/fmt/fmt/format.h	/^  SpecHandler& handler;$/;"	m	struct:internal::width_adapter
handler_	lib/fmt/fmt/format.h	/^  ErrorHandler& handler_;$/;"	m	class:internal::precision_checker
handler_	lib/fmt/fmt/format.h	/^  ErrorHandler& handler_;$/;"	m	class:internal::width_checker
has_precision	lib/fmt/fmt/format.cc	/^  constexpr bool has_precision() const { return precision >= 0; }$/;"	f	struct:internal::sprintf_specs
head_	lib/fmt/fmt/core.h	/^  std::unique_ptr<node<>> head_;$/;"	m	class:internal::dynamic_arg_list
help	docs/make.bat	/^:help$/;"	l
hex_digits	lib/fmt/fmt/format-inl.h	/^const char basic_data<T>::hex_digits[] = "0123456789abcdef";$/;"	m	class:internal::basic_data
hex_digits	lib/fmt/fmt/format.h	/^  static const char hex_digits[];$/;"	m	struct:internal::basic_data
hex_writer	lib/fmt/fmt/format.h	/^    struct hex_writer {$/;"	s	struct:internal::basic_writer::int_writer
honey_dew	lib/fmt/fmt/color.h	/^  honey_dew = 0xF0FFF0,                \/\/ rgb(240,255,240)$/;"	m	class:color
hot_pink	lib/fmt/fmt/color.h	/^  hot_pink = 0xFF69B4,                 \/\/ rgb(255,105,180)$/;"	m	class:color
hour	lib/fmt/fmt/chrono.h	/^  Rep hour() const { return static_cast<Rep>(mod((s.count() \/ 3600), 24)); }$/;"	f	struct:internal::chrono_formatter
hour12	lib/fmt/fmt/chrono.h	/^  Rep hour12() const {$/;"	f	struct:internal::chrono_formatter
html_static_path	docs/source/conf.py	/^html_static_path = ['_static']$/;"	v
html_theme	docs/source/conf.py	/^html_theme = 'alabaster'$/;"	v
i	lib/fmt/fmt/ranges.h	/^    std::size_t& i;$/;"	m	struct:formatter::format_each
id_	lib/lorina/lorina/diagnostics.hpp	/^  diag_id id_; \/*!< id of diagnostic *\/$/;"	m	class:lorina::diagnostic_builder
id_adapter	lib/fmt/fmt/format.h	/^template <typename Handler, typename Char> struct id_adapter {$/;"	s	namespace:internal
ignore	lib/lorina/lorina/diagnostics.hpp	/^  ignore = 1,$/;"	m	class:lorina::diagnostic_level
implicit_bit	lib/fmt/fmt/format-inl.h	/^  static FMT_CONSTEXPR_DECL const uint64_t implicit_bit =$/;"	m	class:internal::fp
in	lib/lorina/lorina/genlib.hpp	/^  std::istream& in;$/;"	m	class:lorina::genlib_parser
in	lib/lorina/lorina/super.hpp	/^  std::istream& in;$/;"	m	class:lorina::super_parser
index	lib/fmt/fmt/format.h	/^    int index;$/;"	m	union:internal::arg_ref::value
index	lib/fmt/fmt/format.h	/^enum class arg_id_kind { none, index, name };$/;"	m	class:internal::arg_id_kind
indian_red	lib/fmt/fmt/color.h	/^  indian_red = 0xCD5C5C,               \/\/ rgb(205,92,92)$/;"	m	class:color
indigo	lib/fmt/fmt/color.h	/^  indigo = 0x4B0082,                   \/\/ rgb(75,0,130)$/;"	m	class:color
init	lib/fmt/fmt/format-inl.h	/^FMT_FUNC void system_error::init(int err_code, string_view format_str,$/;"	f	class:system_error
init	lib/fmt/fmt/format.h	/^void arg_map<Context>::init(const basic_format_args<Context>& args) {$/;"	f	class:internal::arg_map
init	lib/fmt/fmt/os.cc	/^void windows_error::init(int err_code, string_view format_str,$/;"	f	class:windows_error
inline_buffer_size	lib/fmt/fmt/format.h	/^enum { inline_buffer_size = 500 };$/;"	e	enum:__anon13
input_load	lib/lorina/lorina/genlib.hpp	/^  double input_load;$/;"	m	struct:lorina::pin_spec
inputs	lib/lorina/lorina/verilog.hpp	/^    std::vector<std::string> inputs;$/;"	m	struct:lorina::verilog_parser::module_info
instantiate_format_float	lib/fmt/fmt/format.cc	/^int (*instantiate_format_float)(double, int, internal::float_specs,$/;"	v
int128_t	lib/fmt/fmt/core.h	/^struct int128_t {};$/;"	s	namespace:internal
int128_type	lib/fmt/fmt/core.h	/^  int128_type,$/;"	m	class:internal::type
int128_value	lib/fmt/fmt/core.h	/^    int128_t int128_value;$/;"	m	union:internal::value::__anon6
int_checker	lib/fmt/fmt/printf.h	/^template <> struct int_checker<true> {$/;"	s	namespace:internal
int_checker	lib/fmt/fmt/printf.h	/^template <bool IsSigned> struct int_checker {$/;"	s	namespace:internal
int_type	lib/fmt/fmt/core.h	/^  int_type,$/;"	m	class:internal::type
int_type_checker	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR explicit int_type_checker(ErrorHandler eh) : ErrorHandler(eh) {}$/;"	f	class:internal::int_type_checker
int_type_checker	lib/fmt/fmt/format.h	/^template <typename ErrorHandler> class int_type_checker : private ErrorHandler {$/;"	c	namespace:internal
int_value	lib/fmt/fmt/core.h	/^    int int_value;$/;"	m	union:internal::value::__anon6
int_writer	lib/fmt/fmt/format.h	/^    int_writer(basic_writer<Range>& w, Int value, const Specs& s)$/;"	f	struct:internal::basic_writer::int_writer
int_writer	lib/fmt/fmt/format.h	/^  template <typename Int, typename Specs> struct int_writer {$/;"	s	class:internal::basic_writer
internal	lib/fmt/fmt/chrono.h	/^namespace internal {$/;"	n
internal	lib/fmt/fmt/color.h	/^namespace internal {$/;"	n	class:color::emphasis
internal	lib/fmt/fmt/compile.h	/^namespace internal {$/;"	n
internal	lib/fmt/fmt/core.h	/^namespace internal {$/;"	n
internal	lib/fmt/fmt/format-inl.h	/^namespace internal {$/;"	n
internal	lib/fmt/fmt/format.cc	/^namespace internal {$/;"	n	file:
internal	lib/fmt/fmt/format.h	/^namespace internal {$/;"	n
internal	lib/fmt/fmt/locale.h	/^namespace internal {$/;"	n
internal	lib/fmt/fmt/os.h	/^namespace internal {$/;"	n
internal	lib/fmt/fmt/ostream.h	/^namespace internal {$/;"	n
internal	lib/fmt/fmt/printf.h	/^namespace internal {$/;"	n
internal	lib/fmt/fmt/ranges.h	/^namespace internal {$/;"	n
invalid	lib/lorina/lorina/detail/tokenizer.hpp	/^  invalid = 0$/;"	m	class:lorina::detail::tokenizer_return_code
is	lib/lorina/lorina/bristol.hpp	/^  std::istream& is;$/;"	m	class:lorina::bristol_parser
is_arithmetic	lib/fmt/fmt/core.h	/^  bool is_arithmetic() const { return internal::is_arithmetic_type(type_); }$/;"	f	class:basic_format_arg
is_arithmetic_type	lib/fmt/fmt/core.h	/^FMT_CONSTEXPR bool is_arithmetic_type(type t) {$/;"	f	namespace:internal
is_big_endian	lib/fmt/fmt/format.h	/^inline bool is_big_endian() {$/;"	f	namespace:internal
is_char	lib/fmt/fmt/core.h	/^template <> struct is_char<char16_t> : std::true_type {};$/;"	s
is_char	lib/fmt/fmt/core.h	/^template <> struct is_char<char32_t> : std::true_type {};$/;"	s
is_char	lib/fmt/fmt/core.h	/^template <> struct is_char<char> : std::true_type {};$/;"	s
is_char	lib/fmt/fmt/core.h	/^template <> struct is_char<internal::char8_type> : std::true_type {};$/;"	s
is_char	lib/fmt/fmt/core.h	/^template <> struct is_char<wchar_t> : std::true_type {};$/;"	s
is_char	lib/fmt/fmt/core.h	/^template <typename T> struct is_char : std::false_type {};$/;"	s
is_compile_string	lib/fmt/fmt/core.h	/^struct is_compile_string : std::is_base_of<compile_string, S> {};$/;"	s
is_compiled_format	lib/fmt/fmt/compile.h	/^struct is_compiled_format<concat<L, R>> : std::true_type {};$/;"	s	namespace:internal
is_compiled_format	lib/fmt/fmt/compile.h	/^struct is_compiled_format<field<Char, T, N>> : std::true_type {};$/;"	s	namespace:internal
is_compiled_format	lib/fmt/fmt/compile.h	/^struct is_compiled_format<text<Char>> : std::true_type {};$/;"	s	namespace:internal
is_compiled_format	lib/fmt/fmt/compile.h	/^template <typename T> struct is_compiled_format : std::false_type {};$/;"	s	namespace:internal
is_integral	lib/fmt/fmt/core.h	/^  bool is_integral() const { return internal::is_integral_type(type_); }$/;"	f	class:basic_format_arg
is_integral	lib/fmt/fmt/format.h	/^template <> struct is_integral<int128_t> : std::true_type {};$/;"	s	namespace:internal
is_integral	lib/fmt/fmt/format.h	/^template <> struct is_integral<uint128_t> : std::true_type {};$/;"	s	namespace:internal
is_integral	lib/fmt/fmt/format.h	/^template <typename T> struct is_integral : std::is_integral<T> {};$/;"	s	namespace:internal
is_integral_type	lib/fmt/fmt/core.h	/^FMT_CONSTEXPR bool is_integral_type(type t) {$/;"	f	namespace:internal
is_like_std_string	lib/fmt/fmt/ranges.h	/^struct is_like_std_string<fmt::basic_string_view<Char>> : std::true_type {};$/;"	s	namespace:internal
is_like_std_string	lib/fmt/fmt/ranges.h	/^template <typename T> class is_like_std_string {$/;"	c	namespace:internal
is_name_start	lib/fmt/fmt/format.h	/^template <typename Char> FMT_CONSTEXPR bool is_name_start(Char c) {$/;"	f	namespace:internal
is_negative	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR bool is_negative(T value) {$/;"	f	namespace:internal
is_negative	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR bool is_negative(T) {$/;"	f	namespace:internal
is_output_iterator	lib/fmt/fmt/format.h	/^template <typename It> class is_output_iterator {$/;"	c	namespace:internal
is_packed	lib/fmt/fmt/core.h	/^  static const bool is_packed = num_args < internal::max_packed_args;$/;"	m	class:format_arg_store
is_range	lib/fmt/fmt/ranges.h	/^template <typename T, typename Char> struct is_range {$/;"	s
is_range_	lib/fmt/fmt/ranges.h	/^struct is_range_<$/;"	s	namespace:internal
is_range_	lib/fmt/fmt/ranges.h	/^template <typename T, typename _ = void> struct is_range_ : std::false_type {};$/;"	s	namespace:internal
is_reference_wrapper	lib/fmt/fmt/core.h	/^struct is_reference_wrapper<std::reference_wrapper<T>> : std::true_type {};$/;"	s	namespace:internal
is_reference_wrapper	lib/fmt/fmt/core.h	/^template <typename T> struct is_reference_wrapper : std::false_type {};$/;"	s	namespace:internal
is_rgb	lib/fmt/fmt/color.h	/^  bool is_rgb;$/;"	m	struct:color::emphasis::internal::color_type
is_streamable	lib/fmt/fmt/ostream.h	/^template <typename T, typename Char> class is_streamable {$/;"	c	namespace:internal
is_string	lib/fmt/fmt/core.h	/^struct is_string : std::is_class<decltype(to_string_view(std::declval<S>()))> {$/;"	s	namespace:internal
is_supported_floating_point	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR bool is_supported_floating_point(T) {$/;"	f	namespace:internal
is_tuple_like	lib/fmt/fmt/ranges.h	/^template <typename T> struct is_tuple_like {$/;"	s
is_tuple_like_	lib/fmt/fmt/ranges.h	/^template <typename T> class is_tuple_like_ {$/;"	c	namespace:internal
is_unicode	lib/fmt/fmt/core.h	/^template <typename Char> constexpr bool is_unicode() {$/;"	f	namespace:internal
is_zero_int	lib/fmt/fmt/printf.h	/^class is_zero_int {$/;"	c	namespace:internal
isfinite	lib/fmt/fmt/chrono.h	/^inline bool isfinite(T value) {$/;"	f	namespace:internal
isfinite	lib/fmt/fmt/chrono.h	/^inline bool isfinite(T) {$/;"	f	namespace:internal
isnan	lib/fmt/fmt/chrono.h	/^inline bool isnan(T value) {$/;"	f	namespace:internal
isnan	lib/fmt/fmt/chrono.h	/^inline bool isnan(T) {$/;"	f	namespace:internal
it_	lib/fmt/fmt/format.h	/^  OutputIt it_;$/;"	m	class:internal::output_range
italic	lib/fmt/fmt/color.h	/^  italic = 1 << 1,$/;"	m	class:color::emphasis
italic	lib/rang/rang/rang.hpp	/^    italic    = 3,$/;"	m	class:rang::style
iterator	lib/fmt/fmt/compile.h	/^      typename Context::iterator;$/;"	m	class:internal::compiled_format::Context
iterator_category	lib/fmt/fmt/format.h	/^struct iterator_category : std::false_type {};$/;"	s	namespace:internal
iterator_category	lib/fmt/fmt/format.h	/^struct iterator_category<It, void_t<typename It::iterator_category>> {$/;"	s	namespace:internal
iterator_category	lib/fmt/fmt/format.h	/^template <typename T> struct iterator_category<T*> {$/;"	s	namespace:internal
ivory	lib/fmt/fmt/color.h	/^  ivory = 0xFFFFF0,                    \/\/ rgb(255,255,240)$/;"	m	class:color
join	lib/fmt/fmt/format.h	/^arg_join<It, char> join(It begin, It end, string_view sep) {$/;"	f
join	lib/fmt/fmt/format.h	/^arg_join<It, wchar_t> join(It begin, It end, wstring_view sep) {$/;"	f
join	lib/fmt/fmt/format.h	/^arg_join<internal::iterator_t<const Range>, char> join(const Range& range,$/;"	f
join	lib/fmt/fmt/format.h	/^arg_join<internal::iterator_t<const Range>, wchar_t> join(const Range& range,$/;"	f
join	lib/fmt/fmt/ranges.h	/^FMT_CONSTEXPR tuple_arg_join<char, T...> join(const std::tuple<T...>& tuple,$/;"	f
join	lib/fmt/fmt/ranges.h	/^FMT_CONSTEXPR tuple_arg_join<wchar_t, T...> join(const std::tuple<T...>& tuple,$/;"	f
join	lib/fmt/fmt/ranges.h	/^arg_join<internal::iterator_t<const std::initializer_list<T>>, char> join($/;"	f
join	lib/fmt/fmt/ranges.h	/^arg_join<internal::iterator_t<const std::initializer_list<T>>, wchar_t> join($/;"	f
join	lib/lorina/lorina/detail/utils.hpp	/^inline std::string join( const T& t, const std::string& sep )$/;"	f	namespace:lorina::detail
khaki	lib/fmt/fmt/color.h	/^  khaki = 0xF0E68C,                    \/\/ rgb(240,230,140)$/;"	m	class:color
kind	lib/fmt/fmt/compile.h	/^  enum class kind { arg_index, arg_name, text, replacement };$/;"	c	struct:internal::format_part
kind	lib/fmt/fmt/format.h	/^  arg_id_kind kind;$/;"	m	struct:internal::arg_ref
last_integer_type	lib/fmt/fmt/core.h	/^  last_integer_type = char_type,$/;"	m	class:internal::type
last_numeric_type	lib/fmt/fmt/core.h	/^  last_numeric_type = long_double_type,$/;"	m	class:internal::type
latch_init_value	lib/lorina/lorina/aiger.hpp	/^  enum latch_init_value$/;"	g	class:lorina::aiger_reader
latch_init_value	lib/lorina/lorina/blif.hpp	/^  enum latch_init_value$/;"	g	class:lorina::blif_reader
latch_init_value_from_string	lib/lorina/lorina/blif.hpp	/^  static std::optional<latch_init_value> latch_init_value_from_string( std::string const& s )$/;"	f	class:lorina::blif_reader
latch_type	lib/lorina/lorina/blif.hpp	/^  enum latch_type$/;"	g	class:lorina::blif_reader
latch_type_from_string	lib/lorina/lorina/blif.hpp	/^  static std::optional<latch_type> latch_type_from_string( std::string const& s )$/;"	f	class:lorina::blif_reader
lavender	lib/fmt/fmt/color.h	/^  lavender = 0xE6E6FA,                 \/\/ rgb(230,230,250)$/;"	m	class:color
lavender_blush	lib/fmt/fmt/color.h	/^  lavender_blush = 0xFFF0F5,           \/\/ rgb(255,240,245)$/;"	m	class:color
lawn_green	lib/fmt/fmt/color.h	/^  lawn_green = 0x7CFC00,               \/\/ rgb(124,252,0)$/;"	m	class:color
left	lib/fmt/fmt/format.h	/^enum type { none, left, right, center, numeric };$/;"	e	enum:align::type
lemon_chiffon	lib/fmt/fmt/color.h	/^  lemon_chiffon = 0xFFFACD,            \/\/ rgb(255,250,205)$/;"	m	class:color
lhs	lib/fmt/fmt/compile.h	/^  L lhs;$/;"	m	struct:internal::concat
light_blue	lib/fmt/fmt/color.h	/^  light_blue = 0xADD8E6,               \/\/ rgb(173,216,230)$/;"	m	class:color
light_coral	lib/fmt/fmt/color.h	/^  light_coral = 0xF08080,              \/\/ rgb(240,128,128)$/;"	m	class:color
light_cyan	lib/fmt/fmt/color.h	/^  light_cyan = 0xE0FFFF,               \/\/ rgb(224,255,255)$/;"	m	class:color
light_golden_rod_yellow	lib/fmt/fmt/color.h	/^  light_golden_rod_yellow = 0xFAFAD2,  \/\/ rgb(250,250,210)$/;"	m	class:color
light_gray	lib/fmt/fmt/color.h	/^  light_gray = 0xD3D3D3,               \/\/ rgb(211,211,211)$/;"	m	class:color
light_green	lib/fmt/fmt/color.h	/^  light_green = 0x90EE90,              \/\/ rgb(144,238,144)$/;"	m	class:color
light_pink	lib/fmt/fmt/color.h	/^  light_pink = 0xFFB6C1,               \/\/ rgb(255,182,193)$/;"	m	class:color
light_salmon	lib/fmt/fmt/color.h	/^  light_salmon = 0xFFA07A,             \/\/ rgb(255,160,122)$/;"	m	class:color
light_sea_green	lib/fmt/fmt/color.h	/^  light_sea_green = 0x20B2AA,          \/\/ rgb(32,178,170)$/;"	m	class:color
light_sky_blue	lib/fmt/fmt/color.h	/^  light_sky_blue = 0x87CEFA,           \/\/ rgb(135,206,250)$/;"	m	class:color
light_slate_gray	lib/fmt/fmt/color.h	/^  light_slate_gray = 0x778899,         \/\/ rgb(119,136,153)$/;"	m	class:color
light_steel_blue	lib/fmt/fmt/color.h	/^  light_steel_blue = 0xB0C4DE,         \/\/ rgb(176,196,222)$/;"	m	class:color
light_yellow	lib/fmt/fmt/color.h	/^  light_yellow = 0xFFFFE0,             \/\/ rgb(255,255,224)$/;"	m	class:color
lime	lib/fmt/fmt/color.h	/^  lime = 0x00FF00,                     \/\/ rgb(0,255,0)$/;"	m	class:color
lime_green	lib/fmt/fmt/color.h	/^  lime_green = 0x32CD32,               \/\/ rgb(50,205,50)$/;"	m	class:color
limit_	lib/fmt/fmt/format.h	/^  std::size_t limit_;$/;"	m	class:internal::truncating_iterator_base
linen	lib/fmt/fmt/color.h	/^  linen = 0xFAF0E6,                    \/\/ rgb(250,240,230)$/;"	m	class:color
literals	lib/fmt/fmt/format.h	/^inline namespace literals {$/;"	n
loc_	lib/fmt/fmt/core.h	/^  internal::locale_ref loc_;$/;"	m	class:basic_format_context
locale	lib/fmt/fmt/core.h	/^  internal::locale_ref locale() { return loc_; }$/;"	f	class:basic_format_context
locale	lib/fmt/fmt/format.h	/^  bool locale : 1;$/;"	m	struct:internal::float_specs
locale	lib/fmt/fmt/os.h	/^  locale() {$/;"	f	class:locale
locale	lib/fmt/fmt/os.h	/^class locale {$/;"	c
locale	lib/fmt/fmt/printf.h	/^  internal::locale_ref locale() { return {}; }$/;"	f	class:basic_printf_context
locale_	lib/fmt/fmt/core.h	/^  const void* locale_;  \/\/ A type-erased pointer to std::locale.$/;"	m	class:internal::locale_ref
locale_	lib/fmt/fmt/format.h	/^  locale_ref locale_;$/;"	m	class:internal::basic_writer
locale_	lib/fmt/fmt/os.h	/^  locale_t locale_;$/;"	m	class:locale
locale_ref	lib/fmt/fmt/core.h	/^  locale_ref() : locale_(nullptr) {}$/;"	f	class:internal::locale_ref
locale_ref	lib/fmt/fmt/core.h	/^class locale_ref {$/;"	c	namespace:internal
locale_ref	lib/fmt/fmt/format-inl.h	/^locale_ref::locale_ref(const Locale& loc) : locale_(&loc) {$/;"	f	class:internal::locale_ref
localtime	lib/fmt/fmt/chrono.h	/^inline std::tm localtime(std::time_t time) {$/;"	f
localtime_s	lib/fmt/fmt/chrono.h	/^inline null<> localtime_s(...) { return null<>(); }$/;"	f	namespace:internal
long_double_type	lib/fmt/fmt/core.h	/^  long_double_type,$/;"	m	class:internal::type
long_double_value	lib/fmt/fmt/core.h	/^    long double long_double_value;$/;"	m	union:internal::value::__anon6
long_long_type	lib/fmt/fmt/core.h	/^  long_long_type,$/;"	m	class:internal::type
long_long_value	lib/fmt/fmt/core.h	/^    long long long_long_value;$/;"	m	union:internal::value::__anon6
long_short	lib/fmt/fmt/core.h	/^enum { long_short = sizeof(long) == sizeof(int) };$/;"	e	enum:internal::__anon7
lookahead	lib/lorina/lorina/detail/tokenizer.hpp	/^  std::string lookahead;$/;"	m	class:lorina::detail::tokenizer_return_code::tokenizer
lorina	lib/lorina/lorina/aiger.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/bench.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/blif.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/bristol.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/common.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/detail/tokenizer.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/detail/utils.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/diagnostics.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/dimacs.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/genlib.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/pla.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/super.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/verilog.hpp	/^namespace lorina$/;"	n
lorina	lib/lorina/lorina/verilog_regex.hpp	/^namespace lorina$/;"	n
lossless_integral_conversion	lib/fmt/fmt/chrono.h	/^FMT_CONSTEXPR To lossless_integral_conversion(const From from, int& ec) {$/;"	f	namespace:safe_duration_cast
lower	lib/fmt/fmt/format-inl.h	/^  uint64_t lower;$/;"	m	struct:internal::accumulator
lower	lib/fmt/fmt/format-inl.h	/^  uint64_t lower;$/;"	m	struct:internal::boundaries
ltrim	lib/lorina/lorina/detail/utils.hpp	/^inline void ltrim( std::string& s )$/;"	f	namespace:lorina::detail
magenta	lib/fmt/fmt/color.h	/^  magenta = 0xFF00FF,                  \/\/ rgb(255,0,255)$/;"	m	class:color
magenta	lib/fmt/fmt/color.h	/^  magenta,$/;"	m	class:color::terminal_color
magenta	lib/rang/rang/rang.hpp	/^    magenta = 105,$/;"	m	class:rang::style::fg::bg::fgB::bgB
magenta	lib/rang/rang/rang.hpp	/^    magenta = 35,$/;"	m	class:rang::style::fg
magenta	lib/rang/rang/rang.hpp	/^    magenta = 45,$/;"	m	class:rang::style::fg::bg
magenta	lib/rang/rang/rang.hpp	/^    magenta = 95,$/;"	m	class:rang::style::fg::bg::fgB
main	cirsat.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/simple_circuit.cpp	/^int main() {$/;"	f
make	lib/fmt/fmt/format.h	/^  static FMT_CONSTEXPR fill_t<Char> make() {$/;"	f	struct:internal::fill_t
make_arg	lib/fmt/fmt/core.h	/^FMT_CONSTEXPR basic_format_arg<Context> make_arg(const T& value) {$/;"	f	namespace:internal
make_arg	lib/fmt/fmt/core.h	/^inline basic_format_arg<Context> make_arg(const T& value) {$/;"	f	namespace:internal
make_arg	lib/fmt/fmt/core.h	/^inline value<Context> make_arg(const T& val) {$/;"	f	namespace:internal
make_arg_index	lib/fmt/fmt/compile.h	/^  static FMT_CONSTEXPR format_part make_arg_index(int index) {$/;"	f	struct:internal::format_part
make_arg_name	lib/fmt/fmt/compile.h	/^  static FMT_CONSTEXPR format_part make_arg_name(basic_string_view<Char> name) {$/;"	f	struct:internal::format_part
make_arg_ref	lib/fmt/fmt/chrono.h	/^    FMT_CONSTEXPR arg_ref_type make_arg_ref(basic_string_view<Char> arg_id) {$/;"	f	struct:formatter::spec_handler
make_arg_ref	lib/fmt/fmt/chrono.h	/^    FMT_CONSTEXPR arg_ref_type make_arg_ref(internal::auto_id) {$/;"	f	struct:formatter::spec_handler
make_arg_ref	lib/fmt/fmt/chrono.h	/^    template <typename Id> FMT_CONSTEXPR arg_ref_type make_arg_ref(Id arg_id) {$/;"	f	struct:formatter::spec_handler
make_arg_ref	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(auto_id) {$/;"	f	class:internal::dynamic_specs_handler
make_arg_ref	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(basic_string_view<char_type> arg_id) {$/;"	f	class:internal::dynamic_specs_handler
make_arg_ref	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(int arg_id) {$/;"	f	class:internal::dynamic_specs_handler
make_checked	lib/fmt/fmt/format.h	/^template <typename T> checked_ptr<T> make_checked(T* p, std::size_t size) {$/;"	f	namespace:internal
make_checked	lib/fmt/fmt/format.h	/^template <typename T> inline T* make_checked(T* p, std::size_t) { return p; }$/;"	f	namespace:internal
make_concat	lib/fmt/fmt/compile.h	/^constexpr concat<L, R> make_concat(L lhs, R rhs) {$/;"	f	namespace:internal
make_format_to_n_args	lib/fmt/fmt/format.h	/^make_format_to_n_args(const Args&... args) {$/;"	f
make_printf_args	lib/fmt/fmt/printf.h	/^inline format_arg_store<printf_context, Args...> make_printf_args($/;"	f
make_replacement	lib/fmt/fmt/compile.h	/^  static FMT_CONSTEXPR format_part make_replacement(replacement repl) {$/;"	f	struct:internal::format_part
make_text	lib/fmt/fmt/compile.h	/^  static FMT_CONSTEXPR format_part make_text(basic_string_view<Char> text) {$/;"	f	struct:internal::format_part
make_text	lib/fmt/fmt/compile.h	/^constexpr text<Char> make_text(basic_string_view<Char> s, size_t pos,$/;"	f	namespace:internal
make_unsigned_or_bool	lib/fmt/fmt/printf.h	/^template <> struct make_unsigned_or_bool<bool> { using type = bool; };$/;"	s	namespace:internal
make_unsigned_or_bool	lib/fmt/fmt/printf.h	/^template <typename T> struct make_unsigned_or_bool : std::make_unsigned<T> {};$/;"	s	namespace:internal
make_unsigned_or_unchanged	lib/fmt/fmt/chrono.h	/^struct make_unsigned_or_unchanged {$/;"	s	namespace:internal
make_unsigned_or_unchanged	lib/fmt/fmt/chrono.h	/^template <typename T> struct make_unsigned_or_unchanged<T, true> {$/;"	s	namespace:internal
make_wprintf_args	lib/fmt/fmt/printf.h	/^inline format_arg_store<wprintf_context, Args...> make_wprintf_args($/;"	f
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR basic_string_view<char_type> map(const T& val) {$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR bool map(bool val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR char_type map(T val) {$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const T& map(const T& val) {$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const char* map(const signed char* val) {$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const char* map(const unsigned char* val) {$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const char_type* map(char_type* val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const char_type* map(const char_type* val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const named_arg_base<char_type>& map($/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const void* map(const void* val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const void* map(std::nullptr_t val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const void* map(void* val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR double map(double val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR float map(float val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR int map(int val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR int map(short val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR int map(signed char val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR int128_t map(int128_t val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR long double map(long double val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR long long map(long long val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR long_type map(long val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR uint128_t map(uint128_t val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR ulong_type map(unsigned long val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR unsigned long long map(unsigned long long val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR unsigned map(unsigned char val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR unsigned map(unsigned short val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR unsigned map(unsigned val) { return val; }$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  int map(...) {$/;"	f	struct:internal::arg_mapper
map	lib/fmt/fmt/core.h	/^  template <typename T> FMT_CONSTEXPR int map(const T*) {$/;"	f	struct:internal::arg_mapper
map_	lib/fmt/fmt/core.h	/^  entry* map_;$/;"	m	class:internal::arg_map
map_	lib/fmt/fmt/core.h	/^  internal::arg_map<basic_format_context> map_;$/;"	m	class:basic_format_context
maroon	lib/fmt/fmt/color.h	/^  maroon = 0x800000,                   \/\/ rgb(128,0,0)$/;"	m	class:color
max_load	lib/lorina/lorina/genlib.hpp	/^  double max_load;$/;"	m	struct:lorina::pin_spec
max_packed_args	lib/fmt/fmt/core.h	/^enum { max_packed_args = 63 \/ packed_arg_bits };$/;"	e	enum:internal::__anon9
max_size	lib/fmt/fmt/core.h	/^  int max_size() const {$/;"	f
max_size	lib/fmt/fmt/format.h	/^  enum { max_size = 4 };$/;"	e	enum:internal::fill_t::__anon14
max_value	lib/fmt/fmt/format.h	/^template <typename T> constexpr T max_value() {$/;"	f	namespace:internal
medium_aquamarine	lib/fmt/fmt/color.h	/^  medium_aquamarine = 0x66CDAA,        \/\/ rgb(102,205,170)$/;"	m	class:color
medium_blue	lib/fmt/fmt/color.h	/^  medium_blue = 0x0000CD,              \/\/ rgb(0,0,205)$/;"	m	class:color
medium_orchid	lib/fmt/fmt/color.h	/^  medium_orchid = 0xBA55D3,            \/\/ rgb(186,85,211)$/;"	m	class:color
medium_purple	lib/fmt/fmt/color.h	/^  medium_purple = 0x9370DB,            \/\/ rgb(147,112,219)$/;"	m	class:color
medium_sea_green	lib/fmt/fmt/color.h	/^  medium_sea_green = 0x3CB371,         \/\/ rgb(60,179,113)$/;"	m	class:color
medium_slate_blue	lib/fmt/fmt/color.h	/^  medium_slate_blue = 0x7B68EE,        \/\/ rgb(123,104,238)$/;"	m	class:color
medium_spring_green	lib/fmt/fmt/color.h	/^  medium_spring_green = 0x00FA9A,      \/\/ rgb(0,250,154)$/;"	m	class:color
medium_turquoise	lib/fmt/fmt/color.h	/^  medium_turquoise = 0x48D1CC,         \/\/ rgb(72,209,204)$/;"	m	class:color
medium_violet_red	lib/fmt/fmt/color.h	/^  medium_violet_red = 0xC71585,        \/\/ rgb(199,21,133)$/;"	m	class:color
micro	lib/fmt/fmt/core.h	/^constexpr unsigned char micro[] = "\\u00B5";$/;"	m	namespace:internal
midnight_blue	lib/fmt/fmt/color.h	/^  midnight_blue = 0x191970,            \/\/ rgb(25,25,112)$/;"	m	class:color
mint_cream	lib/fmt/fmt/color.h	/^  mint_cream = 0xF5FFFA,               \/\/ rgb(245,255,250)$/;"	m	class:color
minus	lib/fmt/fmt/format.h	/^enum type { none, minus, plus, space };$/;"	e	enum:sign::type
minute	lib/fmt/fmt/chrono.h	/^  Rep minute() const { return static_cast<Rep>(mod((s.count() \/ 60), 60)); }$/;"	f	struct:internal::chrono_formatter
misty_rose	lib/fmt/fmt/color.h	/^  misty_rose = 0xFFE4E1,               \/\/ rgb(255,228,225)$/;"	m	class:color
moccasin	lib/fmt/fmt/color.h	/^  moccasin = 0xFFE4B5,                 \/\/ rgb(255,228,181)$/;"	m	class:color
mod	lib/fmt/fmt/chrono.h	/^inline T mod(T x, int y) {$/;"	f	namespace:internal
module_info	lib/lorina/lorina/verilog.hpp	/^  struct module_info$/;"	s	class:lorina::verilog_parser
module_name	lib/lorina/lorina/verilog.hpp	/^  std::string module_name;$/;"	m	class:lorina::verilog_parser
modules	lib/lorina/lorina/verilog.hpp	/^  std::unordered_map<std::string, module_info> modules;$/;"	m	class:lorina::verilog_parser
monostate	lib/fmt/fmt/core.h	/^struct monostate {};$/;"	s
more	lib/fmt/fmt/format-inl.h	/^  more,  \/\/ Generate more digits.$/;"	e	enum:internal::digits::result
move	lib/fmt/fmt/format.h	/^  void move(basic_memory_buffer& other) {$/;"	f	class:basic_memory_buffer
multiply	lib/fmt/fmt/format-inl.h	/^  void multiply(uint32_t value) {$/;"	f	class:internal::bigint
multiply	lib/fmt/fmt/format-inl.h	/^  void multiply(uint64_t value) {$/;"	f	class:internal::bigint
multiply	lib/fmt/fmt/format-inl.h	/^inline uint64_t multiply(uint64_t lhs, uint64_t rhs) {$/;"	f	namespace:internal
name	lib/fmt/fmt/core.h	/^    basic_string_view<char_type> name;$/;"	m	struct:internal::arg_map::entry
name	lib/fmt/fmt/format.h	/^    basic_string_view<Char> name;$/;"	m	union:internal::arg_ref::value
name	lib/lorina/lorina/genlib.hpp	/^  std::string name;$/;"	m	struct:lorina::pin_spec
named_arg	lib/fmt/fmt/core.h	/^    const named_arg_base<char_type>* named_arg;$/;"	m	union:internal::value::__anon6
named_arg_type	lib/fmt/fmt/core.h	/^  named_arg_type,$/;"	m	class:internal::type
navajo_white	lib/fmt/fmt/color.h	/^  navajo_white = 0xFFDEAD,             \/\/ rgb(255,222,173)$/;"	m	class:color
navy	lib/fmt/fmt/color.h	/^  navy = 0x000080,                     \/\/ rgb(0,0,128)$/;"	m	class:color
next	lib/fmt/fmt/core.h	/^    std::unique_ptr<node<>> next;$/;"	m	struct:internal::dynamic_arg_list::node
next_arg_id	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR int next_arg_id() {$/;"	f	class:basic_format_parse_context
next_arg_id_	lib/fmt/fmt/core.h	/^  int next_arg_id_;$/;"	m	class:basic_format_parse_context
next_code_point	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR const Char* next_code_point(const Char* begin, const Char* end) {$/;"	f	namespace:internal
node	lib/fmt/fmt/core.h	/^  template <typename = void> struct node {$/;"	s	class:internal::dynamic_arg_list
none	lib/fmt/fmt/format.h	/^enum class arg_id_kind { none, index, name };$/;"	m	class:internal::arg_id_kind
none	lib/fmt/fmt/format.h	/^enum type { none, left, right, center, numeric };$/;"	e	enum:align::type
none	lib/fmt/fmt/format.h	/^enum type { none, minus, plus, space };$/;"	e	enum:sign::type
none_type	lib/fmt/fmt/core.h	/^  none_type,$/;"	m	class:internal::type
nonfinite_writer	lib/fmt/fmt/format.h	/^template <typename Char> struct nonfinite_writer {$/;"	s	namespace:internal
normalize	lib/fmt/fmt/format-inl.h	/^template <int SHIFT> fp normalize(fp value) {$/;"	f	namespace:internal
note	lib/lorina/lorina/diagnostics.hpp	/^  note = 2,$/;"	m	class:lorina::diagnostic_level
null	lib/fmt/fmt/format.h	/^template <typename T = void> struct null {};$/;"	s	namespace:internal
null_handler	lib/fmt/fmt/format.h	/^  struct null_handler : internal::error_handler {$/;"	s	class:dynamic_formatter
num_args	lib/fmt/fmt/core.h	/^  static const size_t num_args = sizeof...(Args);$/;"	m	class:format_arg_store
num_args	lib/fmt/fmt/format.h	/^  enum { num_args = sizeof...(Args) };$/;"	e	enum:internal::format_string_checker::__anon16
num_bigits	lib/fmt/fmt/format-inl.h	/^  int num_bigits() const { return static_cast<int>(bigits_.size()) + exp_; }$/;"	f	class:internal::bigint
num_bits	lib/fmt/fmt/format.h	/^template <> constexpr int num_bits<fallback_uintptr>() {$/;"	f	namespace:internal
num_bits	lib/fmt/fmt/format.h	/^template <typename T> constexpr int num_bits() {$/;"	f	namespace:internal
num_digits	lib/fmt/fmt/format.h	/^      int num_digits;$/;"	m	struct:internal::basic_writer::int_writer::bin_writer
num_digits	lib/fmt/fmt/format.h	/^      int num_digits;$/;"	m	struct:internal::basic_writer::int_writer::dec_writer
num_digits	lib/fmt/fmt/format.h	/^      int num_digits;$/;"	m	struct:internal::basic_writer::int_writer::hex_writer
num_digits	lib/fmt/fmt/format.h	/^    int num_digits;$/;"	m	struct:internal::basic_writer::pointer_writer
num_digits_	lib/fmt/fmt/format.h	/^  int num_digits_;$/;"	m	class:internal::float_writer
num_format_parts	lib/fmt/fmt/compile.h	/^  static FMT_CONSTEXPR_DECL const unsigned num_format_parts =$/;"	m	struct:internal::compiled_format_base
num_format_parts	lib/fmt/fmt/compile.h	/^  static const unsigned num_format_parts = 1;$/;"	m	struct:internal::compiled_format_base
num_parts	lib/fmt/fmt/compile.h	/^  unsigned num_parts = 0;$/;"	m	struct:internal::part_counter
num_writer	lib/fmt/fmt/format.h	/^    struct num_writer {$/;"	s	struct:internal::basic_writer::int_writer
numeric	lib/fmt/fmt/format.h	/^enum type { none, left, right, center, numeric };$/;"	e	enum:align::type
numeric_specs_checker	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR numeric_specs_checker(ErrorHandler& eh, internal::type arg_type)$/;"	f	class:internal::numeric_specs_checker
numeric_specs_checker	lib/fmt/fmt/format.h	/^template <typename ErrorHandler> class numeric_specs_checker {$/;"	c	namespace:internal
numeric_system	lib/fmt/fmt/chrono.h	/^enum class numeric_system {$/;"	c	namespace:internal
old_lace	lib/fmt/fmt/color.h	/^  old_lace = 0xFDF5E6,                 \/\/ rgb(253,245,230)$/;"	m	class:color
olive	lib/fmt/fmt/color.h	/^  olive = 0x808000,                    \/\/ rgb(128,128,0)$/;"	m	class:color
olive_drab	lib/fmt/fmt/color.h	/^  olive_drab = 0x6B8E23,               \/\/ rgb(107,142,35)$/;"	m	class:color
on_12_hour	lib/fmt/fmt/chrono.h	/^  void on_12_hour(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_12_hour	lib/fmt/fmt/chrono.h	/^  void on_12_hour(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_12_hour_time	lib/fmt/fmt/chrono.h	/^  void on_12_hour_time() {$/;"	f	struct:internal::chrono_formatter
on_12_hour_time	lib/fmt/fmt/chrono.h	/^  void on_12_hour_time() {}$/;"	f	struct:internal::chrono_format_checker
on_24_hour	lib/fmt/fmt/chrono.h	/^  void on_24_hour(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_24_hour	lib/fmt/fmt/chrono.h	/^  void on_24_hour(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_24_hour_time	lib/fmt/fmt/chrono.h	/^  void on_24_hour_time() {$/;"	f	struct:internal::chrono_formatter
on_24_hour_time	lib/fmt/fmt/chrono.h	/^  void on_24_hour_time() {}$/;"	f	struct:internal::chrono_format_checker
on_abbr_month	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_abbr_month() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_abbr_month	lib/fmt/fmt/chrono.h	/^  void on_abbr_month() {}$/;"	f	struct:internal::chrono_formatter
on_abbr_weekday	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_abbr_weekday() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_abbr_weekday	lib/fmt/fmt/chrono.h	/^  void on_abbr_weekday() {}$/;"	f	struct:internal::chrono_formatter
on_action	lib/lorina/lorina/verilog.hpp	/^  detail::call_in_topological_order<std::vector<std::pair<std::string,bool>>, std::string, std::string> on_action;$/;"	m	class:lorina::verilog_parser
on_align	lib/fmt/fmt/chrono.h	/^    void on_align(align_t align) { f.specs.align = align; }$/;"	f	struct:formatter::spec_handler
on_align	lib/fmt/fmt/format.h	/^    void on_align(align_t) {}$/;"	f	struct:dynamic_formatter::null_handler
on_align	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_align(align_t align) { specs_.align = align; }$/;"	f	class:internal::specs_setter
on_align	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_align(align_t align) {$/;"	f	class:internal::specs_checker
on_am_pm	lib/fmt/fmt/chrono.h	/^  void on_am_pm() {$/;"	f	struct:internal::chrono_formatter
on_am_pm	lib/fmt/fmt/chrono.h	/^  void on_am_pm() {}$/;"	f	struct:internal::chrono_format_checker
on_and	lib/lorina/lorina/aiger.hpp	/^  virtual void on_and( uint32_t index, uint32_t left_lit, uint32_t right_lit ) const$/;"	f	class:lorina::aiger_reader
on_and	lib/lorina/lorina/verilog.hpp	/^  virtual void on_and( const std::string& lhs, const std::pair<std::string, bool>& op1, const std::pair<std::string, bool>& op2 ) const$/;"	f	class:lorina::verilog_reader
on_and3	lib/lorina/lorina/verilog.hpp	/^  virtual void on_and3( const std::string& lhs, const std::pair<std::string, bool>& op1, const std::pair<std::string, bool>& op2, const std::pair<std::string, bool>& op3 ) const$/;"	f	class:lorina::verilog_reader
on_arg_id	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_arg_id() { ++num_parts; }$/;"	f	struct:internal::part_counter
on_arg_id	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_arg_id() {$/;"	f	class:internal::format_string_compiler
on_arg_id	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_arg_id(basic_string_view<Char> id) {$/;"	f	class:internal::format_string_compiler
on_arg_id	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_arg_id(basic_string_view<Char>) { ++num_parts; }$/;"	f	struct:internal::part_counter
on_arg_id	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_arg_id(int id) {$/;"	f	class:internal::format_string_compiler
on_arg_id	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_arg_id(int) { ++num_parts; }$/;"	f	struct:internal::part_counter
on_arg_id	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_arg_id() {$/;"	f	class:internal::format_string_checker
on_arg_id	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_arg_id(basic_string_view<Char>) {$/;"	f	class:internal::format_string_checker
on_arg_id	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_arg_id(int id) {$/;"	f	class:internal::format_string_checker
on_arg_id	lib/fmt/fmt/format.h	/^  void on_arg_id() { get_arg(parse_context.next_arg_id()); }$/;"	f	struct:format_handler
on_arg_id	lib/fmt/fmt/format.h	/^  void on_arg_id(basic_string_view<Char> id) { arg = context.arg(id); }$/;"	f	struct:format_handler
on_arg_id	lib/fmt/fmt/format.h	/^  void on_arg_id(int id) {$/;"	f	struct:format_handler
on_assign	lib/lorina/lorina/bench.hpp	/^  virtual void on_assign( const std::string& input, const std::string& output ) const$/;"	f	class:lorina::bench_reader
on_assign	lib/lorina/lorina/verilog.hpp	/^  virtual void on_assign( const std::string& lhs, const std::pair<std::string, bool>& rhs ) const$/;"	f	class:lorina::verilog_reader
on_assign	lib/lorina/lorina/verilog.hpp	/^  virtual void on_assign( std::string const& out, std::vector<std::pair<bool,std::string>> const& ins, std::string const& op ) const$/;"	f	class:lorina::verilog_writer
on_assign_maj3	lib/lorina/lorina/verilog.hpp	/^  virtual void on_assign_maj3( std::string const& out, std::vector<std::pair<bool,std::string>> const& ins ) const$/;"	f	class:lorina::verilog_writer
on_assign_po	lib/lorina/lorina/verilog.hpp	/^  virtual void on_assign_po( std::string const& out, std::pair<bool,std::string> const& in ) const$/;"	f	class:lorina::verilog_writer
on_assign_unknown_gate	lib/lorina/lorina/verilog.hpp	/^  virtual void on_assign_unknown_gate( std::string const& out ) const$/;"	f	class:lorina::verilog_writer
on_bad_state	lib/lorina/lorina/aiger.hpp	/^  virtual void on_bad_state( uint32_t pos, uint32_t lit ) const$/;"	f	class:lorina::aiger_reader
on_bad_state_name	lib/lorina/lorina/aiger.hpp	/^  virtual void on_bad_state_name( uint32_t pos, const std::string& name ) const$/;"	f	class:lorina::aiger_reader
on_bin	lib/fmt/fmt/format.h	/^    void on_bin() {$/;"	f	struct:internal::basic_writer::int_writer
on_bin	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_bin() {}$/;"	f	class:internal::int_type_checker
on_char	lib/fmt/fmt/format.h	/^    void on_char() { formatter.write_char(value); }$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
on_char	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_char() {}$/;"	f	class:internal::char_specs_checker
on_clause	lib/lorina/lorina/dimacs.hpp	/^  virtual void on_clause( const std::vector<int>& clause ) const$/;"	f	class:lorina::dimacs_reader
on_comment	lib/lorina/lorina/aiger.hpp	/^  virtual void on_comment( const std::string& comment ) const$/;"	f	class:lorina::aiger_reader
on_comment	lib/lorina/lorina/blif.hpp	/^  virtual void on_comment( const std::string& comment ) const$/;"	f	class:lorina::blif_pretty_printer
on_comment	lib/lorina/lorina/blif.hpp	/^  virtual void on_comment( const std::string& comment ) const$/;"	f	class:lorina::blif_reader
on_comment	lib/lorina/lorina/verilog.hpp	/^  virtual void on_comment( std::string const& comment ) const$/;"	f	class:lorina::verilog_reader
on_constraint	lib/lorina/lorina/aiger.hpp	/^  virtual void on_constraint( uint32_t pos, uint32_t lit ) const$/;"	f	class:lorina::aiger_reader
on_constraint_name	lib/lorina/lorina/aiger.hpp	/^  virtual void on_constraint_name( uint32_t pos, const std::string& name ) const$/;"	f	class:lorina::aiger_reader
on_datetime	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_datetime(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_datetime	lib/fmt/fmt/chrono.h	/^  void on_datetime(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dec	lib/fmt/fmt/format.h	/^    void on_dec() {$/;"	f	struct:internal::basic_writer::int_writer
on_dec	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_dec() {}$/;"	f	class:internal::int_type_checker
on_dec0_weekday	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_dec0_weekday(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_dec0_weekday	lib/fmt/fmt/chrono.h	/^  void on_dec0_weekday(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dec1_weekday	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_dec1_weekday(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_dec1_weekday	lib/fmt/fmt/chrono.h	/^  void on_dec1_weekday(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dff	lib/lorina/lorina/bench.hpp	/^  virtual void on_dff( const std::string& input, const std::string& output ) const$/;"	f	class:lorina::bench_reader
on_dff_input	lib/lorina/lorina/bench.hpp	/^  virtual void on_dff_input( const std::string& input ) const$/;"	f	class:lorina::bench_reader
on_digit	lib/fmt/fmt/format-inl.h	/^  digits::result on_digit(char digit, uint64_t divisor, uint64_t remainder,$/;"	f	struct:internal::fixed_handler
on_digit	lib/fmt/fmt/format-inl.h	/^  digits::result on_digit(char digit, uint64_t divisor, uint64_t remainder,$/;"	f	struct:internal::grisu_shortest_handler
on_duration_unit	lib/fmt/fmt/chrono.h	/^  void on_duration_unit() {$/;"	f	struct:internal::chrono_formatter
on_duration_unit	lib/fmt/fmt/chrono.h	/^  void on_duration_unit() {}$/;"	f	struct:internal::chrono_format_checker
on_duration_value	lib/fmt/fmt/chrono.h	/^  void on_duration_value() {$/;"	f	struct:internal::chrono_formatter
on_duration_value	lib/fmt/fmt/chrono.h	/^  void on_duration_value() {}$/;"	f	struct:internal::chrono_format_checker
on_dynamic_precision	lib/fmt/fmt/chrono.h	/^    template <typename Id> void on_dynamic_precision(Id arg_id) {$/;"	f	struct:formatter::spec_handler
on_dynamic_precision	lib/fmt/fmt/format.h	/^  template <typename Id> FMT_CONSTEXPR void on_dynamic_precision(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler
on_dynamic_precision	lib/fmt/fmt/format.h	/^  template <typename Id> FMT_CONSTEXPR void on_dynamic_precision(Id arg_id) {$/;"	f	class:internal::specs_handler
on_dynamic_width	lib/fmt/fmt/chrono.h	/^    template <typename Id> void on_dynamic_width(Id arg_id) {$/;"	f	struct:formatter::spec_handler
on_dynamic_width	lib/fmt/fmt/format.h	/^  template <typename Id> FMT_CONSTEXPR void on_dynamic_width(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler
on_dynamic_width	lib/fmt/fmt/format.h	/^  template <typename Id> FMT_CONSTEXPR void on_dynamic_width(Id arg_id) {$/;"	f	class:internal::specs_handler
on_end	lib/lorina/lorina/blif.hpp	/^  virtual void on_end() const {}$/;"	f	class:lorina::blif_reader
on_end	lib/lorina/lorina/blif.hpp	/^  virtual void on_end() const$/;"	f	class:lorina::blif_pretty_printer
on_end	lib/lorina/lorina/dimacs.hpp	/^  virtual void on_end() const {}$/;"	f	class:lorina::dimacs_reader
on_end	lib/lorina/lorina/pla.hpp	/^  virtual void on_end() const {}$/;"	f	class:lorina::pla_reader
on_end	lib/lorina/lorina/pla.hpp	/^  virtual void on_end() const$/;"	f	class:lorina::pla_writer
on_endmodule	lib/lorina/lorina/verilog.hpp	/^  virtual void on_endmodule() const {}$/;"	f	class:lorina::verilog_reader
on_error	lib/fmt/fmt/chrono.h	/^    void on_error(const char* msg) { FMT_THROW(format_error(msg)); }$/;"	f	struct:formatter::spec_handler
on_error	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_error(const char*) {}$/;"	f	struct:internal::part_counter
on_error	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:basic_format_parse_context
on_error	lib/fmt/fmt/core.h	/^  void on_error(const char* message) { error_handler().on_error(message); }$/;"	f	class:basic_format_context
on_error	lib/fmt/fmt/format-inl.h	/^FMT_FUNC void internal::error_handler::on_error(const char* message) {$/;"	f	class:internal::error_handler
on_error	lib/fmt/fmt/format.h	/^    FMT_NORETURN void on_error() {$/;"	f	struct:internal::basic_writer::int_writer
on_error	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_error() {$/;"	f	class:internal::int_type_checker
on_error	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:internal::dynamic_specs_handler
on_error	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:internal::format_string_checker
on_error	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	struct:internal::id_adapter
on_error	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	struct:internal::precision_adapter
on_error	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	struct:internal::width_adapter
on_error	lib/fmt/fmt/format.h	/^  void on_error(const char* message) { context_.on_error(message); }$/;"	f	class:internal::specs_handler
on_error	lib/fmt/fmt/printf.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:basic_printf_context
on_fairness	lib/lorina/lorina/aiger.hpp	/^  virtual void on_fairness( uint32_t pos, uint32_t lit ) const$/;"	f	class:lorina::aiger_reader
on_fairness_name	lib/lorina/lorina/aiger.hpp	/^  virtual void on_fairness_name( uint32_t pos, const std::string& name ) const$/;"	f	class:lorina::aiger_reader
on_fill	lib/fmt/fmt/chrono.h	/^    void on_fill(basic_string_view<Char> fill) { f.specs.fill = fill; }$/;"	f	struct:formatter::spec_handler
on_fill	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_fill(basic_string_view<Char> fill) {$/;"	f	class:internal::specs_setter
on_format	lib/lorina/lorina/dimacs.hpp	/^  virtual void on_format( const std::string& format ) const$/;"	f	class:lorina::dimacs_reader
on_format_specs	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR const Char* on_format_specs(const Char* begin,$/;"	f	class:internal::format_string_compiler
on_format_specs	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR const Char* on_format_specs(const Char* begin,$/;"	f	struct:internal::part_counter
on_format_specs	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR const Char* on_format_specs(const Char* begin, const Char*) {$/;"	f	class:internal::format_string_checker
on_format_specs	lib/fmt/fmt/format.h	/^  const Char* on_format_specs(const Char* begin, const Char* end) {$/;"	f	struct:format_handler
on_full_month	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_full_month() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_full_month	lib/fmt/fmt/chrono.h	/^  void on_full_month() {}$/;"	f	struct:internal::chrono_formatter
on_full_weekday	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_full_weekday() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_full_weekday	lib/fmt/fmt/chrono.h	/^  void on_full_weekday() {}$/;"	f	struct:internal::chrono_formatter
on_gate	lib/lorina/lorina/bench.hpp	/^  virtual void on_gate( const std::vector<std::string>& inputs, const std::string& output, const std::string& type ) const$/;"	f	class:lorina::bench_reader
on_gate	lib/lorina/lorina/blif.hpp	/^  virtual void on_gate( const std::vector<std::string>& inputs, const std::string& output, const output_cover_t& cover ) const$/;"	f	class:lorina::blif_pretty_printer
on_gate	lib/lorina/lorina/blif.hpp	/^  virtual void on_gate( const std::vector<std::string>& inputs, const std::string& output, const output_cover_t& cover ) const$/;"	f	class:lorina::blif_reader
on_gate	lib/lorina/lorina/bristol.hpp	/^  virtual void on_gate( std::vector<uint32_t> const& in, uint32_t out, std::string const& gate ) const$/;"	f	class:lorina::bristol_reader
on_gate	lib/lorina/lorina/genlib.hpp	/^  virtual void on_gate( std::string const& name, std::string const& expression, double area, std::vector<pin_spec> const& pins, std::string const& output_pin ) const$/;"	f	class:lorina::genlib_reader
on_hash	lib/fmt/fmt/format.h	/^    void on_hash() {}$/;"	f	struct:dynamic_formatter::null_handler
on_hash	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_hash() { specs_.alt = true; }$/;"	f	class:internal::specs_setter
on_hash	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_hash() {$/;"	f	class:internal::specs_checker
on_header	lib/lorina/lorina/aiger.hpp	/^  virtual void on_header( uint64_t m, uint64_t i, uint64_t l, uint64_t o, uint64_t a ) const$/;"	f	class:lorina::aiger_reader
on_header	lib/lorina/lorina/aiger.hpp	/^  virtual void on_header( uint64_t m, uint64_t i, uint64_t l, uint64_t o, uint64_t a,$/;"	f	class:lorina::aiger_reader
on_header	lib/lorina/lorina/bristol.hpp	/^  virtual void on_header( uint32_t num_gates, uint32_t num_wires, uint32_t num_inputs, std::vector<uint32_t> const& num_wires_per_input, uint32_t num_outputs, std::vector<uint32_t> const& num_wires_per_output ) const$/;"	f	class:lorina::bristol_reader
on_hex	lib/fmt/fmt/format.h	/^    void on_hex() {$/;"	f	struct:internal::basic_writer::int_writer
on_hex	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_hex() {}$/;"	f	class:internal::int_type_checker
on_input	lib/lorina/lorina/aiger.hpp	/^  virtual void on_input( uint32_t pos, uint32_t lit ) const$/;"	f	class:lorina::aiger_reader
on_input	lib/lorina/lorina/bench.hpp	/^  virtual void on_input( const std::string& name ) const$/;"	f	class:lorina::bench_reader
on_input	lib/lorina/lorina/blif.hpp	/^  virtual void on_input( const std::string& name ) const$/;"	f	class:lorina::blif_pretty_printer
on_input	lib/lorina/lorina/blif.hpp	/^  virtual void on_input( const std::string& name ) const$/;"	f	class:lorina::blif_reader
on_input	lib/lorina/lorina/verilog.hpp	/^  virtual void on_input( std::string const& name ) const$/;"	f	class:lorina::verilog_writer
on_input	lib/lorina/lorina/verilog.hpp	/^  virtual void on_input( std::vector<std::string> const& names ) const$/;"	f	class:lorina::verilog_writer
on_input	lib/lorina/lorina/verilog.hpp	/^  virtual void on_input( uint32_t width, std::string const& name ) const$/;"	f	class:lorina::verilog_writer
on_input	lib/lorina/lorina/verilog.hpp	/^  virtual void on_input( uint32_t width, std::vector<std::string> const& names ) const$/;"	f	class:lorina::verilog_writer
on_input_name	lib/lorina/lorina/aiger.hpp	/^  virtual void on_input_name( uint32_t pos, const std::string& name ) const$/;"	f	class:lorina::aiger_reader
on_inputs	lib/lorina/lorina/verilog.hpp	/^  virtual void on_inputs( const std::vector<std::string>& inputs, std::string const& size = "" ) const$/;"	f	class:lorina::verilog_reader
on_int	lib/fmt/fmt/format.h	/^    void on_int() {$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
on_int	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_int() {$/;"	f	class:internal::char_specs_checker
on_iso_date	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_iso_date() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_iso_date	lib/fmt/fmt/chrono.h	/^  void on_iso_date() {}$/;"	f	struct:internal::chrono_formatter
on_iso_time	lib/fmt/fmt/chrono.h	/^  void on_iso_time() {$/;"	f	struct:internal::chrono_formatter
on_iso_time	lib/fmt/fmt/chrono.h	/^  void on_iso_time() {}$/;"	f	struct:internal::chrono_format_checker
on_justice	lib/lorina/lorina/aiger.hpp	/^  virtual void on_justice( uint32_t pos, const std::vector<uint32_t>& lits ) const$/;"	f	class:lorina::aiger_reader
on_justice_header	lib/lorina/lorina/aiger.hpp	/^  virtual void on_justice_header( uint32_t pos, uint64_t size ) const$/;"	f	class:lorina::aiger_reader
on_justice_name	lib/lorina/lorina/aiger.hpp	/^  virtual void on_justice_name( uint32_t pos, const std::string& name ) const$/;"	f	class:lorina::aiger_reader
on_keyword	lib/lorina/lorina/pla.hpp	/^  virtual bool on_keyword( const std::string& keyword, const std::string& value ) const$/;"	f	class:lorina::pla_reader
on_keyword	lib/lorina/lorina/pla.hpp	/^  virtual void on_keyword( const std::string& keyword, const std::string& value ) const$/;"	f	class:lorina::pla_writer
on_latch	lib/lorina/lorina/aiger.hpp	/^  virtual void on_latch( uint32_t index, uint32_t next, latch_init_value reset ) const$/;"	f	class:lorina::aiger_reader
on_latch	lib/lorina/lorina/blif.hpp	/^  virtual void on_latch( const std::string& input, const std::string& output, const std::optional<latch_type>& type, const std::optional<std::string>& control, const std::optional<latch_init_value>& init_value ) const$/;"	f	class:lorina::blif_pretty_printer
on_latch	lib/lorina/lorina/blif.hpp	/^  virtual void on_latch( const std::string& input, const std::string& output, const std::optional<latch_type>& type, const std::optional<std::string>& control, const std::optional<latch_init_value>& init_value ) const$/;"	f	class:lorina::blif_reader
on_latch_name	lib/lorina/lorina/aiger.hpp	/^  virtual void on_latch_name( uint32_t pos, const std::string& name ) const$/;"	f	class:lorina::aiger_reader
on_loc_date	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_loc_date(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_loc_date	lib/fmt/fmt/chrono.h	/^  void on_loc_date(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_loc_time	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_loc_time(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_loc_time	lib/fmt/fmt/chrono.h	/^  void on_loc_time(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_maj3	lib/lorina/lorina/verilog.hpp	/^  virtual void on_maj3( const std::string& lhs, const std::pair<std::string, bool>& op1, const std::pair<std::string, bool>& op2, const std::pair<std::string, bool>& op3 ) const$/;"	f	class:lorina::verilog_reader
on_minus	lib/fmt/fmt/format.h	/^    void on_minus() {}$/;"	f	struct:dynamic_formatter::null_handler
on_minus	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_minus() { specs_.sign = sign::minus; }$/;"	f	class:internal::specs_setter
on_minus	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_minus() {$/;"	f	class:internal::specs_checker
on_minute	lib/fmt/fmt/chrono.h	/^  void on_minute(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_minute	lib/fmt/fmt/chrono.h	/^  void on_minute(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_model	lib/lorina/lorina/blif.hpp	/^  virtual void on_model( const std::string& model_name ) const$/;"	f	class:lorina::blif_pretty_printer
on_model	lib/lorina/lorina/blif.hpp	/^  virtual void on_model( const std::string& model_name ) const$/;"	f	class:lorina::blif_reader
on_module_begin	lib/lorina/lorina/verilog.hpp	/^  virtual void on_module_begin( std::string const& name, std::vector<std::string> const& xs, std::vector<std::string> const& ys ) const$/;"	f	class:lorina::verilog_writer
on_module_end	lib/lorina/lorina/verilog.hpp	/^  virtual void on_module_end() const$/;"	f	class:lorina::verilog_writer
on_module_header	lib/lorina/lorina/verilog.hpp	/^  virtual void on_module_header( const std::string& module_name, const std::vector<std::string>& inouts ) const$/;"	f	class:lorina::verilog_reader
on_module_instantiation	lib/lorina/lorina/verilog.hpp	/^  virtual void on_module_instantiation( std::string const& module_name, std::vector<std::string> const& params, std::string const& inst_name,$/;"	f	class:lorina::verilog_reader
on_module_instantiation	lib/lorina/lorina/verilog.hpp	/^  virtual void on_module_instantiation( std::string const& module_name, std::vector<std::string> const& params, std::string const& inst_name,$/;"	f	class:lorina::verilog_writer
on_nand	lib/lorina/lorina/verilog.hpp	/^  virtual void on_nand( const std::string& lhs, const std::pair<std::string, bool>& op1, const std::pair<std::string, bool>& op2 ) const$/;"	f	class:lorina::verilog_reader
on_nor	lib/lorina/lorina/verilog.hpp	/^  virtual void on_nor( const std::string& lhs, const std::pair<std::string, bool>& op1, const std::pair<std::string, bool>& op2 ) const$/;"	f	class:lorina::verilog_reader
on_num	lib/fmt/fmt/format.h	/^    void on_num() {$/;"	f	struct:internal::basic_writer::int_writer
on_num	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_num() {}$/;"	f	class:internal::int_type_checker
on_number_of_clauses	lib/lorina/lorina/dimacs.hpp	/^  virtual void on_number_of_clauses( uint64_t number_of_clauses ) const$/;"	f	class:lorina::dimacs_reader
on_number_of_inputs	lib/lorina/lorina/pla.hpp	/^  virtual void on_number_of_inputs( uint64_t number_of_inputs ) const$/;"	f	class:lorina::pla_reader
on_number_of_inputs	lib/lorina/lorina/pla.hpp	/^  virtual void on_number_of_inputs( uint64_t number_of_inputs ) const$/;"	f	class:lorina::pla_writer
on_number_of_outputs	lib/lorina/lorina/pla.hpp	/^  virtual void on_number_of_outputs( uint64_t number_of_outputs ) const$/;"	f	class:lorina::pla_reader
on_number_of_outputs	lib/lorina/lorina/pla.hpp	/^  virtual void on_number_of_outputs( uint64_t number_of_outputs ) const$/;"	f	class:lorina::pla_writer
on_number_of_terms	lib/lorina/lorina/pla.hpp	/^  virtual void on_number_of_terms( uint64_t number_of_terms ) const$/;"	f	class:lorina::pla_reader
on_number_of_terms	lib/lorina/lorina/pla.hpp	/^  virtual void on_number_of_terms( uint64_t number_of_terms ) const$/;"	f	class:lorina::pla_writer
on_number_of_variables	lib/lorina/lorina/dimacs.hpp	/^  virtual void on_number_of_variables( uint64_t number_of_variables ) const$/;"	f	class:lorina::dimacs_reader
on_oct	lib/fmt/fmt/format.h	/^    void on_oct() {$/;"	f	struct:internal::basic_writer::int_writer
on_oct	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_oct() {}$/;"	f	class:internal::int_type_checker
on_or	lib/lorina/lorina/verilog.hpp	/^  virtual void on_or( const std::string& lhs, const std::pair<std::string, bool>& op1, const std::pair<std::string, bool>& op2 ) const$/;"	f	class:lorina::verilog_reader
on_or3	lib/lorina/lorina/verilog.hpp	/^  virtual void on_or3( const std::string& lhs, const std::pair<std::string, bool>& op1, const std::pair<std::string, bool>& op2, const std::pair<std::string, bool>& op3 ) const$/;"	f	class:lorina::verilog_reader
on_output	lib/lorina/lorina/aiger.hpp	/^  virtual void on_output( uint32_t pos, uint32_t lit ) const$/;"	f	class:lorina::aiger_reader
on_output	lib/lorina/lorina/bench.hpp	/^  virtual void on_output( const std::string& name ) const$/;"	f	class:lorina::bench_reader
on_output	lib/lorina/lorina/blif.hpp	/^  virtual void on_output( const std::string& name ) const$/;"	f	class:lorina::blif_pretty_printer
on_output	lib/lorina/lorina/blif.hpp	/^  virtual void on_output( const std::string& name ) const$/;"	f	class:lorina::blif_reader
on_output	lib/lorina/lorina/verilog.hpp	/^  virtual void on_output( std::string const& name ) const$/;"	f	class:lorina::verilog_writer
on_output	lib/lorina/lorina/verilog.hpp	/^  virtual void on_output( std::vector<std::string> const& names ) const$/;"	f	class:lorina::verilog_writer
on_output	lib/lorina/lorina/verilog.hpp	/^  virtual void on_output( uint32_t width, std::string const& name ) const$/;"	f	class:lorina::verilog_writer
on_output	lib/lorina/lorina/verilog.hpp	/^  virtual void on_output( uint32_t width, std::vector<std::string> const& names ) const$/;"	f	class:lorina::verilog_writer
on_output_name	lib/lorina/lorina/aiger.hpp	/^  virtual void on_output_name( uint32_t pos, const std::string& name ) const$/;"	f	class:lorina::aiger_reader
on_outputs	lib/lorina/lorina/verilog.hpp	/^  virtual void on_outputs( const std::vector<std::string>& outputs, std::string const& size = "" ) const$/;"	f	class:lorina::verilog_reader
on_parameter	lib/lorina/lorina/verilog.hpp	/^  virtual void on_parameter( const std::string& name, const std::string& value ) const$/;"	f	class:lorina::verilog_reader
on_plus	lib/fmt/fmt/format.h	/^    void on_plus() {}$/;"	f	struct:dynamic_formatter::null_handler
on_plus	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_plus() { specs_.sign = sign::plus; }$/;"	f	class:internal::specs_setter
on_plus	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_plus() {$/;"	f	class:internal::specs_checker
on_pointer	lib/fmt/fmt/format.h	/^    void on_pointer() { formatter.write_pointer(value); }$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
on_pointer	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_pointer() {}$/;"	f	class:internal::cstring_type_checker
on_precision	lib/fmt/fmt/chrono.h	/^    void on_precision(int _precision) { f.precision = _precision; }$/;"	f	struct:formatter::spec_handler
on_precision	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_precision(int precision) {$/;"	f	class:internal::specs_setter
on_replacement_field	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_replacement_field(const Char* ptr) {$/;"	f	class:internal::format_string_compiler
on_replacement_field	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_replacement_field(const Char*) {}$/;"	f	struct:internal::part_counter
on_replacement_field	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_replacement_field(const Char*) {}$/;"	f	class:internal::format_string_checker
on_replacement_field	lib/fmt/fmt/format.h	/^  void on_replacement_field(const Char* p) {$/;"	f	struct:format_handler
on_second	lib/fmt/fmt/chrono.h	/^  void on_second(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_second	lib/fmt/fmt/chrono.h	/^  void on_second(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_space	lib/fmt/fmt/format.h	/^    void on_space() {}$/;"	f	struct:dynamic_formatter::null_handler
on_space	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_space() { specs_.sign = sign::space; }$/;"	f	class:internal::specs_setter
on_space	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_space() {$/;"	f	class:internal::specs_checker
on_start	lib/fmt/fmt/format-inl.h	/^  digits::result on_start(uint64_t divisor, uint64_t remainder, uint64_t error,$/;"	f	struct:internal::fixed_handler
on_start	lib/fmt/fmt/format-inl.h	/^  digits::result on_start(uint64_t, uint64_t, uint64_t, int&) {$/;"	f	struct:internal::grisu_shortest_handler
on_string	lib/fmt/fmt/format.h	/^    void on_string() { formatter.write(value); }$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
on_string	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_string() {}$/;"	f	class:internal::cstring_type_checker
on_super_info	lib/lorina/lorina/super.hpp	/^  virtual void on_super_info( std::string const& genlib_name, uint32_t max_num_vars, uint32_t max_supergates, uint32_t num_lines ) const$/;"	f	class:lorina::super_reader
on_supergate	lib/lorina/lorina/super.hpp	/^  virtual void on_supergate( std::string const& name, bool const& is_super, std::vector<uint32_t> const& fanins_id ) const$/;"	f	class:lorina::super_reader
on_term	lib/lorina/lorina/pla.hpp	/^  virtual void on_term( const std::string& term, const std::string& out ) const$/;"	f	class:lorina::pla_reader
on_term	lib/lorina/lorina/pla.hpp	/^  virtual void on_term( const std::string& term, const std::string& out ) const$/;"	f	class:lorina::pla_writer
on_text	lib/fmt/fmt/chrono.h	/^  template <typename Char> void on_text(const Char*, const Char*) {}$/;"	f	struct:internal::chrono_format_checker
on_text	lib/fmt/fmt/chrono.h	/^  void on_text(const char_type* begin, const char_type* end) {$/;"	f	struct:internal::chrono_formatter
on_text	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_text(const Char* begin, const Char* end) {$/;"	f	class:internal::format_string_compiler
on_text	lib/fmt/fmt/compile.h	/^  FMT_CONSTEXPR void on_text(const Char* begin, const Char* end) {$/;"	f	struct:internal::part_counter
on_text	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_text(const Char*, const Char*) {}$/;"	f	class:internal::format_string_checker
on_text	lib/fmt/fmt/format.h	/^  void on_text(const Char* begin, const Char* end) {$/;"	f	struct:format_handler
on_type	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_type(Char type) {$/;"	f	class:internal::specs_setter
on_tz_name	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_tz_name() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_tz_name	lib/fmt/fmt/chrono.h	/^  void on_tz_name() {}$/;"	f	struct:internal::chrono_formatter
on_us_date	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_us_date() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_us_date	lib/fmt/fmt/chrono.h	/^  void on_us_date() {}$/;"	f	struct:internal::chrono_formatter
on_utc_offset	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void on_utc_offset() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_utc_offset	lib/fmt/fmt/chrono.h	/^  void on_utc_offset() {}$/;"	f	struct:internal::chrono_formatter
on_width	lib/fmt/fmt/chrono.h	/^    void on_width(int width) { f.specs.width = width; }$/;"	f	struct:formatter::spec_handler
on_width	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_width(int width) { specs_.width = width; }$/;"	f	class:internal::specs_setter
on_wire	lib/lorina/lorina/verilog.hpp	/^  virtual void on_wire( std::string const& name ) const$/;"	f	class:lorina::verilog_writer
on_wire	lib/lorina/lorina/verilog.hpp	/^  virtual void on_wire( std::vector<std::string> const& names ) const$/;"	f	class:lorina::verilog_writer
on_wire	lib/lorina/lorina/verilog.hpp	/^  virtual void on_wire( uint32_t width, std::string const& name ) const$/;"	f	class:lorina::verilog_writer
on_wire	lib/lorina/lorina/verilog.hpp	/^  virtual void on_wire( uint32_t width, std::vector<std::string> const& names ) const$/;"	f	class:lorina::verilog_writer
on_wires	lib/lorina/lorina/verilog.hpp	/^  virtual void on_wires( const std::vector<std::string>& wires, std::string const& size = "" ) const$/;"	f	class:lorina::verilog_reader
on_xnor	lib/lorina/lorina/verilog.hpp	/^  virtual void on_xnor( const std::string& lhs, const std::pair<std::string, bool>& op1, const std::pair<std::string, bool>& op2 ) const$/;"	f	class:lorina::verilog_reader
on_xor	lib/lorina/lorina/verilog.hpp	/^  virtual void on_xor( const std::string& lhs, const std::pair<std::string, bool>& op1, const std::pair<std::string, bool>& op2 ) const$/;"	f	class:lorina::verilog_reader
on_xor3	lib/lorina/lorina/verilog.hpp	/^  virtual void on_xor3( const std::string& lhs, const std::pair<std::string, bool>& op1, const std::pair<std::string, bool>& op2, const std::pair<std::string, bool>& op3 ) const$/;"	f	class:lorina::verilog_reader
on_zero	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_zero() {$/;"	f	class:internal::specs_checker
on_zero	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void on_zero() {$/;"	f	class:internal::specs_setter
operator !=	lib/fmt/fmt/core.h	/^  friend bool operator!=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator &	lib/fmt/fmt/color.h	/^  friend FMT_CONSTEXPR text_style operator&(text_style lhs,$/;"	f	class:color::emphasis::text_style
operator &=	lib/fmt/fmt/color.h	/^  FMT_CONSTEXPR text_style& operator&=(const text_style& rhs) {$/;"	f	class:color::emphasis::text_style
operator ()	lib/fmt/fmt/format.h	/^      template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::int_writer::bin_writer
operator ()	lib/fmt/fmt/format.h	/^      template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::int_writer::dec_writer
operator ()	lib/fmt/fmt/format.h	/^      template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::int_writer::hex_writer
operator ()	lib/fmt/fmt/format.h	/^      template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::int_writer::num_writer
operator ()	lib/fmt/fmt/format.h	/^    template <typename It> void operator()(It&& it) const { *it++ = value; }$/;"	f	struct:internal::arg_formatter_base::char_writer
operator ()	lib/fmt/fmt/format.h	/^    template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::bytes_writer
operator ()	lib/fmt/fmt/format.h	/^    template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::padded_int_writer
operator ()	lib/fmt/fmt/format.h	/^    template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::pointer_writer
operator ()	lib/fmt/fmt/format.h	/^    template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::str_writer
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR unsigned long long operator()(T value) {$/;"	f	class:internal::precision_checker
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR unsigned long long operator()(T value) {$/;"	f	class:internal::width_checker
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR unsigned long long operator()(T) {$/;"	f	class:internal::precision_checker
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR unsigned long long operator()(T) {$/;"	f	class:internal::width_checker
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_arg_id(); }$/;"	f	struct:internal::id_adapter
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_dynamic_precision(auto_id()); }$/;"	f	struct:internal::precision_adapter
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_dynamic_width(auto_id()); }$/;"	f	struct:internal::width_adapter
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::id_adapter
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::precision_adapter
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::width_adapter
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void operator()(int id) { handler.on_arg_id(id); }$/;"	f	struct:internal::id_adapter
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void operator()(int id) { handler.on_dynamic_precision(id); }$/;"	f	struct:internal::precision_adapter
operator ()	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void operator()(int id) { handler.on_dynamic_width(id); }$/;"	f	struct:internal::width_adapter
operator ()	lib/fmt/fmt/format.h	/^  bool operator()(typename basic_format_arg<Context>::handle h) const {$/;"	f	class:internal::custom_formatter
operator ()	lib/fmt/fmt/format.h	/^  iterator operator()(T value) {$/;"	f	class:internal::arg_formatter_base
operator ()	lib/fmt/fmt/format.h	/^  iterator operator()(basic_string_view<char_type> value) {$/;"	f	class:internal::arg_formatter_base
operator ()	lib/fmt/fmt/format.h	/^  iterator operator()(bool value) {$/;"	f	class:internal::arg_formatter_base
operator ()	lib/fmt/fmt/format.h	/^  iterator operator()(char_type value) {$/;"	f	class:internal::arg_formatter_base
operator ()	lib/fmt/fmt/format.h	/^  iterator operator()(const char_type* value) {$/;"	f	class:internal::arg_formatter_base
operator ()	lib/fmt/fmt/format.h	/^  iterator operator()(const void* value) {$/;"	f	class:internal::arg_formatter_base
operator ()	lib/fmt/fmt/format.h	/^  iterator operator()(monostate) {$/;"	f	class:internal::arg_formatter_base
operator ()	lib/fmt/fmt/format.h	/^  iterator operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:arg_formatter
operator ()	lib/fmt/fmt/format.h	/^  std::basic_string<Char> operator()(Args&&... args) const {$/;"	f	class:internal::udl_formatter
operator ()	lib/fmt/fmt/format.h	/^  template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::nonfinite_writer
operator ()	lib/fmt/fmt/format.h	/^  template <typename It> void operator()(It&& it) {$/;"	f	class:internal::float_writer
operator ()	lib/fmt/fmt/format.h	/^  template <typename T> bool operator()(T) const { return false; }$/;"	f	class:internal::custom_formatter
operator ()	lib/fmt/fmt/printf.h	/^  bool operator()(T value) {$/;"	f	class:internal::is_zero_int
operator ()	lib/fmt/fmt/printf.h	/^  bool operator()(T) {$/;"	f	class:internal::is_zero_int
operator ()	lib/fmt/fmt/printf.h	/^  int operator()(T value) {$/;"	f	class:internal::printf_precision_handler
operator ()	lib/fmt/fmt/printf.h	/^  int operator()(T) {$/;"	f	class:internal::printf_precision_handler
operator ()	lib/fmt/fmt/printf.h	/^  iterator operator()(T value) {$/;"	f	class:printf_arg_formatter
operator ()	lib/fmt/fmt/printf.h	/^  iterator operator()(basic_string_view<char_type> value) {$/;"	f	class:printf_arg_formatter
operator ()	lib/fmt/fmt/printf.h	/^  iterator operator()(const char* value) {$/;"	f	class:printf_arg_formatter
operator ()	lib/fmt/fmt/printf.h	/^  iterator operator()(const void* value) {$/;"	f	class:printf_arg_formatter
operator ()	lib/fmt/fmt/printf.h	/^  iterator operator()(const wchar_t* value) {$/;"	f	class:printf_arg_formatter
operator ()	lib/fmt/fmt/printf.h	/^  iterator operator()(monostate value) { return base::operator()(value); }$/;"	f	class:printf_arg_formatter
operator ()	lib/fmt/fmt/printf.h	/^  iterator operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:printf_arg_formatter
operator ()	lib/fmt/fmt/printf.h	/^  unsigned operator()(T value) {$/;"	f	class:internal::printf_width_handler
operator ()	lib/fmt/fmt/printf.h	/^  unsigned operator()(T) {$/;"	f	class:internal::printf_width_handler
operator ()	lib/fmt/fmt/printf.h	/^  void operator()(T value) {$/;"	f	class:internal::char_converter
operator ()	lib/fmt/fmt/printf.h	/^  void operator()(T) {}  \/\/ No conversion needed for non-integral types.$/;"	f	class:internal::char_converter
operator ()	lib/fmt/fmt/printf.h	/^  void operator()(U value) {$/;"	f	class:internal::arg_converter
operator ()	lib/fmt/fmt/printf.h	/^  void operator()(U) {}  \/\/ No conversion needed for non-integral types.$/;"	f	class:internal::arg_converter
operator ()	lib/fmt/fmt/printf.h	/^  void operator()(bool value) {$/;"	f	class:internal::arg_converter
operator ()	lib/fmt/fmt/ranges.h	/^    template <typename T> void operator()(const T& v) {$/;"	f	struct:formatter::format_each
operator *	lib/fmt/fmt/format-inl.h	/^inline fp operator*(fp x, fp y) { return {multiply(x.f, y.f), x.e + y.e + 64}; }$/;"	f	namespace:internal
operator *	lib/fmt/fmt/format.h	/^  truncating_iterator& operator*() { return *this; }$/;"	f	class:internal::truncating_iterator
operator *	lib/fmt/fmt/format.h	/^  value_type operator*() const { return {}; }$/;"	f	class:internal::counting_iterator
operator *	lib/fmt/fmt/format.h	/^  value_type& operator*() const {$/;"	f	class:internal::truncating_iterator
operator *=	lib/fmt/fmt/format-inl.h	/^  template <typename Int> bigint& operator*=(Int value) {$/;"	f	class:internal::bigint
operator ++	lib/fmt/fmt/format.h	/^  counting_iterator operator++(int) {$/;"	f	class:internal::counting_iterator
operator ++	lib/fmt/fmt/format.h	/^  counting_iterator& operator++() {$/;"	f	class:internal::counting_iterator
operator ++	lib/fmt/fmt/format.h	/^  truncating_iterator operator++(int) {$/;"	f	class:internal::truncating_iterator
operator ++	lib/fmt/fmt/format.h	/^  truncating_iterator& operator++() { return *this; }$/;"	f	class:internal::truncating_iterator
operator ++	lib/fmt/fmt/format.h	/^  truncating_iterator& operator++() {$/;"	f	class:internal::truncating_iterator
operator ++	lib/fmt/fmt/format.h	/^  truncating_iterator& operator++(int) { return *this; }$/;"	f	class:internal::truncating_iterator
operator +=	lib/fmt/fmt/format-inl.h	/^  void operator+=(uint64_t n) {$/;"	f	struct:internal::accumulator
operator <	lib/fmt/fmt/core.h	/^  friend bool operator<(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator <<	lib/rang/rang/rang.hpp	/^inline rang_implementation::enableStd<T> operator<<(std::ostream &os,$/;"	f	namespace:rang::style::fg::bg::fgB::bgB::control::winTerm::rang_implementation
operator <<=	lib/fmt/fmt/format-inl.h	/^  bigint& operator<<=(int shift) {$/;"	f	class:internal::bigint
operator <=	lib/fmt/fmt/core.h	/^  friend bool operator<=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator =	lib/fmt/fmt/format.h	/^    template <typename T> void operator=(const T&) {}$/;"	f	struct:internal::counting_iterator::value_type
operator =	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR arg_ref& operator=(int idx) {$/;"	f	struct:internal::arg_ref
operator =	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void operator=(basic_string_view<Char> s) {$/;"	f	struct:internal::fill_t
operator =	lib/fmt/fmt/format.h	/^  template <typename T> named_arg<T, Char> operator=(T&& value) const {$/;"	f	struct:internal::udl_arg
operator =	lib/fmt/fmt/format.h	/^  template <typename T> truncating_iterator& operator=(T val) {$/;"	f	class:internal::truncating_iterator
operator =	lib/fmt/fmt/os.h	/^  buffered_file& operator=(buffered_file&& other) {$/;"	f	class:buffered_file
operator ==	lib/fmt/fmt/core.h	/^  friend bool operator==(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator ==	lib/fmt/fmt/format-inl.h	/^inline bool operator==(fp x, fp y) { return x.f == y.f && x.e == y.e; }$/;"	f	namespace:internal
operator >	lib/fmt/fmt/core.h	/^  friend bool operator>(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator >=	lib/fmt/fmt/core.h	/^  friend bool operator>=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator >>=	lib/fmt/fmt/format-inl.h	/^  void operator>>=(int shift) {$/;"	f	struct:internal::accumulator
operator []	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR const Char& operator[](size_t pos) const { return data_[pos]; }$/;"	f	class:basic_string_view
operator []	lib/fmt/fmt/core.h	/^  template <typename I> T& operator[](I index) { return ptr_[index]; }$/;"	f	class:internal::buffer
operator []	lib/fmt/fmt/core.h	/^  template <typename I> const T& operator[](I index) const {$/;"	f	class:internal::buffer
operator []	lib/fmt/fmt/format-inl.h	/^  bigit operator[](int index) const { return bigits_[to_unsigned(index)]; }$/;"	f	class:internal::bigint
operator []	lib/fmt/fmt/format-inl.h	/^  bigit& operator[](int index) { return bigits_[to_unsigned(index)]; }$/;"	f	class:internal::bigint
operator []	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR Char& operator[](size_t index) { return data_[index]; }$/;"	f	struct:internal::fill_t
operator []	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR const Char& operator[](size_t index) const {$/;"	f	struct:internal::fill_t
operator string_view	lib/fmt/fmt/os.h	/^  operator string_view() const { return string_view(&buffer_[0], size()); }$/;"	f	class:internal::utf16_to_utf8
operator uint32_t	lib/fmt/fmt/format-inl.h	/^  explicit operator uint32_t() const { return static_cast<uint32_t>(lower); }$/;"	f	struct:internal::accumulator
operator wstring_view	lib/fmt/fmt/format.h	/^  operator wstring_view() const { return {&buffer_[0], size()}; }$/;"	f	class:internal::utf8_to_utf16
operator |	lib/fmt/fmt/color.h	/^  friend FMT_CONSTEXPR text_style operator|(text_style lhs,$/;"	f	class:color::emphasis::text_style
operator |=	lib/fmt/fmt/color.h	/^  FMT_CONSTEXPR text_style& operator|=(const text_style& rhs) {$/;"	f	class:color::emphasis::text_style
orange	lib/fmt/fmt/color.h	/^  orange = 0xFFA500,                   \/\/ rgb(255,165,0)$/;"	m	class:color
orange_red	lib/fmt/fmt/color.h	/^  orange_red = 0xFF4500,               \/\/ rgb(255,69,0)$/;"	m	class:color
orchid	lib/fmt/fmt/color.h	/^  orchid = 0xDA70D6,                   \/\/ rgb(218,112,214)$/;"	m	class:color
out	lib/fmt/fmt/chrono.h	/^  OutputIt out;$/;"	m	struct:internal::chrono_formatter
out	lib/fmt/fmt/core.h	/^  iterator out() { return out_; }$/;"	f	class:basic_format_context
out	lib/fmt/fmt/format.h	/^  OutputIt out;$/;"	m	struct:format_to_n_result
out	lib/fmt/fmt/format.h	/^  iterator out() const { return out_; }$/;"	f	class:internal::basic_writer
out	lib/fmt/fmt/format.h	/^  iterator out() { return writer_.out(); }$/;"	f	class:internal::arg_formatter_base
out	lib/fmt/fmt/printf.h	/^  OutputIt out() { return out_; }$/;"	f	class:basic_printf_context
out	lib/fmt/fmt/ranges.h	/^        std::declval<FormatContext>().out())>::type out;$/;"	m	struct:formatter::format_each
out_	lib/fmt/fmt/core.h	/^  OutputIt out_;$/;"	m	class:basic_format_context
out_	lib/fmt/fmt/format.h	/^  OutputIt out_;$/;"	m	class:internal::truncating_iterator_base
out_	lib/fmt/fmt/format.h	/^  iterator out_;  \/\/ Output iterator.$/;"	m	class:internal::basic_writer
output_range	lib/fmt/fmt/format.h	/^  explicit output_range(OutputIt it) : it_(it) {}$/;"	f	class:internal::output_range
output_range	lib/fmt/fmt/format.h	/^class output_range {$/;"	c	namespace:internal
outputs	lib/lorina/lorina/verilog.hpp	/^    std::vector<std::string> outputs;$/;"	m	struct:lorina::verilog_parser::module_info
packed_arg_bits	lib/fmt/fmt/core.h	/^enum { packed_arg_bits = 5 };$/;"	e	enum:internal::__anon8
padded_int_writer	lib/fmt/fmt/format.h	/^  template <typename F> struct padded_int_writer {$/;"	s	class:internal::basic_writer
padding	lib/fmt/fmt/format.h	/^    std::size_t padding;$/;"	m	struct:internal::basic_writer::padded_int_writer
pale_golden_rod	lib/fmt/fmt/color.h	/^  pale_golden_rod = 0xEEE8AA,          \/\/ rgb(238,232,170)$/;"	m	class:color
pale_green	lib/fmt/fmt/color.h	/^  pale_green = 0x98FB98,               \/\/ rgb(152,251,152)$/;"	m	class:color
pale_turquoise	lib/fmt/fmt/color.h	/^  pale_turquoise = 0xAFEEEE,           \/\/ rgb(175,238,238)$/;"	m	class:color
pale_violet_red	lib/fmt/fmt/color.h	/^  pale_violet_red = 0xDB7093,          \/\/ rgb(219,112,147)$/;"	m	class:color
papaya_whip	lib/fmt/fmt/color.h	/^  papaya_whip = 0xFFEFD5,              \/\/ rgb(255,239,213)$/;"	m	class:color
parse	lib/fmt/fmt/format-inl.h	/^  format_parse_context::iterator parse(format_parse_context& ctx) {$/;"	f	struct:formatter
parse_align	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR const Char* parse_align(const Char* begin, const Char* end,$/;"	f	namespace:internal
parse_arg_id	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR const Char* parse_arg_id(const Char* begin, const Char* end,$/;"	f	namespace:internal
parse_assign	lib/lorina/lorina/verilog.hpp	/^  bool parse_assign()$/;"	f	class:lorina::verilog_parser
parse_chrono_format	lib/fmt/fmt/chrono.h	/^FMT_CONSTEXPR const Char* parse_chrono_format(const Char* begin,$/;"	f	namespace:internal
parse_context	lib/fmt/fmt/format.h	/^  basic_format_parse_context<Char> parse_context;$/;"	m	struct:format_handler
parse_context	lib/fmt/fmt/printf.h	/^  basic_format_parse_context<Char>& parse_context() { return parse_ctx_; }$/;"	f	class:basic_printf_context
parse_context_	lib/fmt/fmt/compile.h	/^  basic_format_parse_context<Char> parse_context_;$/;"	m	class:internal::format_string_compiler
parse_context_	lib/fmt/fmt/format.h	/^  ParseContext& parse_context_;$/;"	m	class:internal::specs_handler
parse_ctx_	lib/fmt/fmt/format.h	/^  basic_format_parse_context<char_type>* parse_ctx_;$/;"	m	class:arg_formatter
parse_ctx_	lib/fmt/fmt/printf.h	/^  basic_format_parse_context<Char> parse_ctx_;$/;"	m	class:basic_printf_context
parse_error	lib/lorina/lorina/common.hpp	/^  parse_error,$/;"	m	class:lorina::return_code
parse_file_info	lib/lorina/lorina/super.hpp	/^  bool parse_file_info( std::string const& line, std::vector<std::string>& info_vec )$/;"	f	class:lorina::super_parser
parse_flags	lib/fmt/fmt/printf.h	/^void basic_printf_context<OutputIt, Char>::parse_flags(format_specs& specs,$/;"	f	class:basic_printf_context
parse_float_type_spec	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR float_specs parse_float_type_spec($/;"	f	namespace:internal
parse_format_specs	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR const Char* parse_format_specs(const Char* begin, const Char* end,$/;"	f	namespace:internal
parse_format_specs	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR const typename ParseContext::char_type* parse_format_specs($/;"	f	namespace:internal
parse_format_string	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR void parse_format_string(basic_string_view<Char> format_str,$/;"	f	namespace:internal
parse_funcs_	lib/fmt/fmt/format.h	/^  parse_func parse_funcs_[num_args > 0 ? num_args : 1];$/;"	m	class:internal::format_string_checker
parse_gate_definition	lib/lorina/lorina/genlib.hpp	/^  bool parse_gate_definition( std::string const& line )$/;"	f	class:lorina::genlib_parser
parse_gate_definition	lib/lorina/lorina/super.hpp	/^  bool parse_gate_definition( std::string const& line, uint32_t const& max_num_vars )$/;"	f	class:lorina::super_parser
parse_header	lib/fmt/fmt/printf.h	/^int basic_printf_context<OutputIt, Char>::parse_header(const Char*& it,$/;"	f	class:basic_printf_context
parse_inputs	lib/lorina/lorina/verilog.hpp	/^  bool parse_inputs()$/;"	f	class:lorina::verilog_parser
parse_module	lib/lorina/lorina/verilog.hpp	/^  bool parse_module()$/;"	f	class:lorina::verilog_parser
parse_module_header	lib/lorina/lorina/verilog.hpp	/^  bool parse_module_header()$/;"	f	class:lorina::verilog_parser
parse_module_instantiation	lib/lorina/lorina/verilog.hpp	/^  bool parse_module_instantiation()$/;"	f	class:lorina::verilog_parser
parse_modules	lib/lorina/lorina/verilog.hpp	/^  bool parse_modules()$/;"	f	class:lorina::verilog_parser
parse_nonnegative_int	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR int parse_nonnegative_int(const Char*& begin, const Char* end,$/;"	f	namespace:internal
parse_outputs	lib/lorina/lorina/verilog.hpp	/^  bool parse_outputs()$/;"	f	class:lorina::verilog_parser
parse_parameter	lib/lorina/lorina/verilog.hpp	/^  bool parse_parameter()$/;"	f	class:lorina::verilog_parser
parse_precision	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR const Char* parse_precision(const Char* begin, const Char* end,$/;"	f	namespace:internal
parse_range	lib/fmt/fmt/chrono.h	/^  struct parse_range {$/;"	s	struct:formatter
parse_rhs_expression	lib/lorina/lorina/verilog.hpp	/^  bool parse_rhs_expression( const std::string& lhs )$/;"	f	class:lorina::verilog_parser
parse_signal_name	lib/lorina/lorina/verilog.hpp	/^  bool parse_signal_name()$/;"	f	class:lorina::verilog_parser
parse_tail	lib/fmt/fmt/compile.h	/^constexpr auto parse_tail(T head, S format_str) {$/;"	f	namespace:internal
parse_text	lib/fmt/fmt/compile.h	/^constexpr size_t parse_text(basic_string_view<Char> str, size_t pos) {$/;"	f	namespace:internal
parse_width	lib/fmt/fmt/format.h	/^FMT_CONSTEXPR const Char* parse_width(const Char* begin, const Char* end,$/;"	f	namespace:internal
parse_wires	lib/lorina/lorina/verilog.hpp	/^  bool parse_wires()$/;"	f	class:lorina::verilog_parser
part_	lib/fmt/fmt/compile.h	/^  part part_;$/;"	m	class:internal::format_string_compiler
part_counter	lib/fmt/fmt/compile.h	/^template <typename Char> struct part_counter {$/;"	s	namespace:internal
part_kind	lib/fmt/fmt/compile.h	/^  kind part_kind;$/;"	m	struct:internal::format_part
parts	lib/fmt/fmt/compile.h	/^  const parts_container& parts() const { return compiled_parts; }$/;"	f	struct:internal::compiled_format_base
parts	lib/fmt/fmt/compile.h	/^  const parts_container& parts() const {$/;"	f	struct:internal::compiled_format_base
peach_puff	lib/fmt/fmt/color.h	/^  peach_puff = 0xFFDAB9,               \/\/ rgb(255,218,185)$/;"	m	class:color
percent	lib/fmt/fmt/format.h	/^  bool percent : 1;$/;"	m	struct:internal::float_specs
peru	lib/fmt/fmt/color.h	/^  peru = 0xCD853F,                     \/\/ rgb(205,133,63)$/;"	m	class:color
phase	lib/lorina/lorina/genlib.hpp	/^  phase_type phase;$/;"	m	struct:lorina::pin_spec
phase_type	lib/lorina/lorina/genlib.hpp	/^enum class phase_type : uint8_t$/;"	c	namespace:lorina
pimpl	include/solver.hpp	/^    Impl* pimpl;$/;"	m	class:cirsat::Solver
pin_spec	lib/lorina/lorina/genlib.hpp	/^struct pin_spec$/;"	s	namespace:lorina
pink	lib/fmt/fmt/color.h	/^  pink = 0xFFC0CB,                     \/\/ rgb(255,192,203)$/;"	m	class:color
pipe	lib/fmt/fmt/os.cc	/^void file::pipe(file& read_end, file& write_end) {$/;"	f	class:file
pla_pretty_printer	lib/lorina/lorina/pla.hpp	/^  pla_pretty_printer( std::ostream& os = std::cout )$/;"	f	class:lorina::pla_pretty_printer
pla_pretty_printer	lib/lorina/lorina/pla.hpp	/^class pla_pretty_printer : public pla_reader$/;"	c	namespace:lorina
pla_reader	lib/lorina/lorina/pla.hpp	/^class pla_reader$/;"	c	namespace:lorina
pla_regex	lib/lorina/lorina/pla.hpp	/^namespace pla_regex$/;"	n	namespace:lorina
pla_writer	lib/lorina/lorina/pla.hpp	/^  explicit pla_writer( std::ostream& os )$/;"	f	class:lorina::pla_writer
pla_writer	lib/lorina/lorina/pla.hpp	/^class pla_writer$/;"	c	namespace:lorina
plum	lib/fmt/fmt/color.h	/^  plum = 0xDDA0DD,                     \/\/ rgb(221,160,221)$/;"	m	class:color
plus	lib/fmt/fmt/format.h	/^enum type { none, minus, plus, space };$/;"	e	enum:sign::type
pointer	lib/fmt/fmt/core.h	/^    const void* pointer;$/;"	m	union:internal::value::__anon6
pointer_type	lib/fmt/fmt/core.h	/^  pointer_type,$/;"	m	class:internal::type
pointer_writer	lib/fmt/fmt/format.h	/^  template <typename UIntPtr> struct pointer_writer {$/;"	s	class:internal::basic_writer
postfix	lib/fmt/fmt/ranges.h	/^  Char postfix;$/;"	m	struct:formatting_range
postfix	lib/fmt/fmt/ranges.h	/^  Char postfix;$/;"	m	struct:formatting_tuple
pow10_exponents	lib/fmt/fmt/format-inl.h	/^const int16_t basic_data<T>::pow10_exponents[] = {$/;"	m	class:internal::basic_data
pow10_exponents	lib/fmt/fmt/format.h	/^  static const int16_t pow10_exponents[];$/;"	m	struct:internal::basic_data
pow10_significands	lib/fmt/fmt/format-inl.h	/^const uint64_t basic_data<T>::pow10_significands[] = {$/;"	m	class:internal::basic_data
pow10_significands	lib/fmt/fmt/format.h	/^  static const uint64_t pow10_significands[];$/;"	m	struct:internal::basic_data
powder_blue	lib/fmt/fmt/color.h	/^  powder_blue = 0xB0E0E6,              \/\/ rgb(176,224,230)$/;"	m	class:color
powers_of_10_64	lib/fmt/fmt/format-inl.h	/^const uint64_t basic_data<T>::powers_of_10_64[] = {$/;"	m	class:internal::basic_data
powers_of_10_64	lib/fmt/fmt/format.h	/^  static const uint64_t powers_of_10_64[];$/;"	m	struct:internal::basic_data
precision	lib/fmt/fmt/chrono.h	/^  int precision;$/;"	m	struct:formatter
precision	lib/fmt/fmt/chrono.h	/^  int precision;$/;"	m	struct:internal::chrono_formatter
precision	lib/fmt/fmt/format-inl.h	/^  int precision;$/;"	m	struct:internal::fixed_handler
precision	lib/fmt/fmt/format.cc	/^  int precision;$/;"	m	struct:internal::sprintf_specs	file:
precision	lib/fmt/fmt/format.h	/^  int precision;$/;"	m	struct:basic_format_specs
precision	lib/fmt/fmt/format.h	/^  int precision;$/;"	m	struct:internal::float_specs
precision_adapter	lib/fmt/fmt/format.h	/^  explicit FMT_CONSTEXPR precision_adapter(SpecHandler& h) : handler(h) {}$/;"	f	struct:internal::precision_adapter
precision_adapter	lib/fmt/fmt/format.h	/^template <typename SpecHandler, typename Char> struct precision_adapter {$/;"	s	namespace:internal
precision_checker	lib/fmt/fmt/format.h	/^  explicit FMT_CONSTEXPR precision_checker(ErrorHandler& eh) : handler_(eh) {}$/;"	f	class:internal::precision_checker
precision_checker	lib/fmt/fmt/format.h	/^template <typename ErrorHandler> class precision_checker {$/;"	c	namespace:internal
precision_ref	lib/fmt/fmt/chrono.h	/^  arg_ref_type precision_ref;$/;"	m	struct:formatter
precision_ref	lib/fmt/fmt/format.h	/^  arg_ref<Char> precision_ref;$/;"	m	struct:internal::dynamic_format_specs
prefix	lib/fmt/fmt/format.h	/^    char prefix[4];$/;"	m	struct:internal::basic_writer::int_writer
prefix	lib/fmt/fmt/format.h	/^    string_view prefix;$/;"	m	struct:internal::basic_writer::padded_int_writer
prefix	lib/fmt/fmt/ranges.h	/^  Char prefix;$/;"	m	struct:formatting_range
prefix	lib/fmt/fmt/ranges.h	/^  Char prefix;$/;"	m	struct:formatting_tuple
prefix_size	lib/fmt/fmt/format.h	/^    unsigned prefix_size;$/;"	m	struct:internal::basic_writer::int_writer
prettify	lib/fmt/fmt/format.h	/^  template <typename It> It prettify(It it) const {$/;"	f	class:internal::float_writer
print	lib/fmt/fmt/color.h	/^void print(const text_style& ts, const S& format_str, const Args&... args) {$/;"	f	class:color::emphasis
print	lib/fmt/fmt/color.h	/^void print(std::FILE* f, const text_style& ts, const S& format_str,$/;"	f	class:color::emphasis
print	lib/fmt/fmt/os.h	/^  inline void print(string_view format_str, const Args&... args) {$/;"	f	class:buffered_file
printUsage	cirsat.cpp	/^void printUsage() {$/;"	f
printf	lib/fmt/fmt/printf.h	/^inline int printf(const S& format_str, const Args&... args) {$/;"	f
printf	lib/fmt/fmt/printf.h	/^internal::truncating_iterator<OutputIt> printf($/;"	f	namespace:internal
printf	lib/fmt/fmt/printf.h	/^void printf(buffer<Char>& buf, basic_string_view<Char> format,$/;"	f	namespace:internal
printf_arg_formatter	lib/fmt/fmt/printf.h	/^  printf_arg_formatter(iterator iter, format_specs& specs, context_type& ctx)$/;"	f	class:printf_arg_formatter
printf_arg_formatter	lib/fmt/fmt/printf.h	/^class printf_arg_formatter : public internal::arg_formatter_base<Range> {$/;"	c
printf_formatter	lib/fmt/fmt/printf.h	/^template <typename T> struct printf_formatter {$/;"	s
printf_precision_handler	lib/fmt/fmt/printf.h	/^class printf_precision_handler {$/;"	c	namespace:internal
printf_width_handler	lib/fmt/fmt/printf.h	/^  explicit printf_width_handler(format_specs& specs) : specs_(specs) {}$/;"	f	class:internal::printf_width_handler
printf_width_handler	lib/fmt/fmt/printf.h	/^template <typename Char> class printf_width_handler {$/;"	c	namespace:internal
project	docs/source/conf.py	/^project = 'cirsat: a CIRcuit-based SAT-solver'$/;"	v
promote_float	lib/fmt/fmt/format.h	/^inline double promote_float(float value) { return static_cast<double>(value); }$/;"	f	namespace:internal
promote_float	lib/fmt/fmt/format.h	/^template <typename T> T promote_float(T value) { return value; }$/;"	f	namespace:internal
ptr	lib/fmt/fmt/format.h	/^template <typename T> inline const void* ptr(const T* p) { return p; }$/;"	f
ptr	lib/fmt/fmt/format.h	/^template <typename T> inline const void* ptr(const std::shared_ptr<T>& p) {$/;"	f
ptr	lib/fmt/fmt/format.h	/^template <typename T> inline const void* ptr(const std::unique_ptr<T>& p) {$/;"	f
ptr_	lib/fmt/fmt/core.h	/^  T* ptr_;$/;"	m	class:internal::buffer
purple	lib/fmt/fmt/color.h	/^  purple = 0x800080,                   \/\/ rgb(128,0,128)$/;"	m	class:color
push	lib/fmt/fmt/core.h	/^  template <typename T, typename Arg> const T& push(const Arg& arg) {$/;"	f	class:internal::dynamic_arg_list
push_back	lib/fmt/fmt/core.h	/^  void push_back(const T& value) {$/;"	f	class:internal::buffer
push_back	lib/fmt/fmt/core.h	/^  void push_back(value<Context> val) {$/;"	f	class:internal::arg_map
push_token	lib/lorina/lorina/verilog.hpp	/^  void push_token( std::string const& token )$/;"	f	class:lorina::verilog_parser
r	lib/fmt/fmt/color.h	/^  uint8_t r;$/;"	m	struct:color::emphasis::rgb
rang	lib/rang/rang/rang.hpp	/^namespace rang {$/;"	n
rang_implementation	lib/rang/rang/rang.hpp	/^namespace rang_implementation {$/;"	n	class:rang::style::fg::bg::fgB::bgB::control::winTerm
range_length_limit	lib/fmt/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const std::size_t range_length_limit =$/;"	m	struct:formatting_range
rblink	lib/rang/rang/rang.hpp	/^    rblink    = 6,$/;"	m	class:rang::style
read	lib/fmt/fmt/os.cc	/^std::size_t file::read(void* buffer, std::size_t count) {$/;"	f	class:file
read_aiger	lib/lorina/lorina/aiger.hpp	/^[[nodiscard]] inline return_code read_aiger( const std::string& filename, const aiger_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_aiger	lib/lorina/lorina/aiger.hpp	/^[[nodiscard]] inline return_code read_aiger( std::istream& in, const aiger_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_ascii_aiger	lib/lorina/lorina/aiger.hpp	/^[[nodiscard]] inline return_code read_ascii_aiger( const std::string& filename, const aiger_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_ascii_aiger	lib/lorina/lorina/aiger.hpp	/^[[nodiscard]] inline return_code read_ascii_aiger( std::istream& in, const aiger_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_bench	lib/lorina/lorina/bench.hpp	/^[[nodiscard]] inline return_code read_bench( const std::string& filename, const bench_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_bench	lib/lorina/lorina/bench.hpp	/^[[nodiscard]] inline return_code read_bench( std::istream& in, const bench_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_blif	lib/lorina/lorina/blif.hpp	/^[[nodiscard]] inline return_code read_blif( const std::string& filename, const blif_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_blif	lib/lorina/lorina/blif.hpp	/^[[nodiscard]] inline return_code read_blif( std::istream& in, const blif_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_bristol	lib/lorina/lorina/bristol.hpp	/^[[nodiscard]] inline return_code read_bristol( std::istream& is, bristol_reader const& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_bristol	lib/lorina/lorina/bristol.hpp	/^[[nodiscard]] inline return_code read_bristol( std::string const& filename, bristol_reader const& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_dimacs	lib/lorina/lorina/dimacs.hpp	/^[[nodiscard]] inline return_code read_dimacs( const std::string& filename, const dimacs_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_dimacs	lib/lorina/lorina/dimacs.hpp	/^[[nodiscard]] inline return_code read_dimacs( std::istream& in, const dimacs_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_genlib	lib/lorina/lorina/genlib.hpp	/^[[nodiscard]] inline return_code read_genlib( const std::string& filename, const genlib_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_genlib	lib/lorina/lorina/genlib.hpp	/^[[nodiscard]] inline return_code read_genlib( std::istream& in, const genlib_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_pla	lib/lorina/lorina/pla.hpp	/^[[nodiscard]] inline return_code read_pla( const std::string& filename, const pla_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_pla	lib/lorina/lorina/pla.hpp	/^[[nodiscard]] inline return_code read_pla( std::istream& in, const pla_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_super	lib/lorina/lorina/super.hpp	/^[[nodiscard]] inline return_code read_super( const std::string& filename, const super_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_super	lib/lorina/lorina/super.hpp	/^[[nodiscard]] inline return_code read_super( std::istream& in, const super_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_verilog	lib/lorina/lorina/verilog.hpp	/^[[nodiscard]] inline return_code read_verilog( const std::string& filename, const verilog_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
read_verilog	lib/lorina/lorina/verilog.hpp	/^[[nodiscard]] inline return_code read_verilog( std::istream& in, const verilog_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	namespace:lorina
reader	lib/lorina/lorina/bristol.hpp	/^  bristol_reader const& reader;$/;"	m	class:lorina::bristol_parser
reader	lib/lorina/lorina/genlib.hpp	/^  genlib_reader const& reader;$/;"	m	class:lorina::genlib_parser
reader	lib/lorina/lorina/super.hpp	/^  super_reader const& reader;$/;"	m	class:lorina::super_parser
reader	lib/lorina/lorina/verilog.hpp	/^  const verilog_reader& reader;$/;"	m	class:lorina::verilog_parser
rebecca_purple	lib/fmt/fmt/color.h	/^  rebecca_purple = 0x663399,           \/\/ rgb(102,51,153)$/;"	m	class:color
red	lib/fmt/fmt/color.h	/^  red = 0xFF0000,                      \/\/ rgb(255,0,0)$/;"	m	class:color
red	lib/fmt/fmt/color.h	/^  red,$/;"	m	class:color::terminal_color
red	lib/rang/rang/rang.hpp	/^    red     = 101,$/;"	m	class:rang::style::fg::bg::fgB::bgB
red	lib/rang/rang/rang.hpp	/^    red     = 31,$/;"	m	class:rang::style::fg
red	lib/rang/rang/rang.hpp	/^    red     = 41,$/;"	m	class:rang::style::fg::bg
red	lib/rang/rang/rang.hpp	/^    red     = 91,$/;"	m	class:rang::style::fg::bg::fgB
release	docs/source/conf.py	/^release = '0.1'$/;"	v
remark	lib/lorina/lorina/diagnostics.hpp	/^  remark = 3,$/;"	m	class:lorina::diagnostic_level
remove_leading_zeros	lib/fmt/fmt/format-inl.h	/^  void remove_leading_zeros() {$/;"	f	class:internal::bigint
remove_prefix	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR void remove_prefix(size_t n) {$/;"	f	class:basic_string_view
repl	lib/fmt/fmt/compile.h	/^    replacement repl;$/;"	m	union:internal::format_part::value
replacement	lib/fmt/fmt/compile.h	/^  struct replacement {$/;"	s	struct:internal::format_part
report	lib/lorina/lorina/diagnostics.hpp	/^inline diagnostic_builder diagnostic_engine::report( diag_id id )$/;"	f	class:lorina::diagnostic_engine
report_no_date	lib/fmt/fmt/chrono.h	/^  FMT_NORETURN void report_no_date() { FMT_THROW(format_error("no date")); }$/;"	f	struct:internal::chrono_format_checker
require_numeric_argument	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR void require_numeric_argument() {$/;"	f	class:internal::numeric_specs_checker
reserve	lib/fmt/fmt/core.h	/^  void reserve(std::size_t new_capacity) {$/;"	f	class:internal::buffer
reserve	lib/fmt/fmt/format.h	/^  auto reserve(std::size_t n) -> decltype(internal::reserve(out_, n)) {$/;"	f	class:internal::basic_writer
reserve	lib/fmt/fmt/format.h	/^inline Iterator& reserve(Iterator& it, std::size_t) {$/;"	f	namespace:internal
reserve	lib/fmt/fmt/format.h	/^inline checked_ptr<typename Container::value_type> reserve($/;"	f	namespace:internal
reset	lib/rang/rang/rang.hpp	/^    reset     = 0,$/;"	m	class:rang::style
reset	lib/rang/rang/rang.hpp	/^    reset   = 39$/;"	m	class:rang::style::fg
reset	lib/rang/rang/rang.hpp	/^    reset   = 49$/;"	m	class:rang::style::fg::bg
reset_color	lib/fmt/fmt/format-inl.h	/^template <typename T> const char basic_data<T>::reset_color[] = "\\x1b[0m";$/;"	m	class:internal::basic_data
reset_color	lib/fmt/fmt/format.h	/^  static const char reset_color[5];$/;"	m	struct:internal::basic_data
resize	lib/fmt/fmt/core.h	/^  void resize(std::size_t new_size) {$/;"	f	class:internal::buffer
result	lib/fmt/fmt/format-inl.h	/^enum result {$/;"	g	namespace:internal::digits
return_code	lib/lorina/lorina/common.hpp	/^enum class return_code$/;"	c	namespace:lorina
reversed	lib/rang/rang/rang.hpp	/^    reversed  = 7,$/;"	m	class:rang::style
rgb	lib/fmt/fmt/color.h	/^  FMT_CONSTEXPR rgb() : r(0), g(0), b(0) {}$/;"	f	struct:color::emphasis::rgb
rgb	lib/fmt/fmt/color.h	/^  FMT_CONSTEXPR rgb(color hex)$/;"	f	struct:color::emphasis::rgb
rgb	lib/fmt/fmt/color.h	/^  FMT_CONSTEXPR rgb(uint32_t hex)$/;"	f	struct:color::emphasis::rgb
rgb	lib/fmt/fmt/color.h	/^  FMT_CONSTEXPR rgb(uint8_t r_, uint8_t g_, uint8_t b_) : r(r_), g(g_), b(b_) {}$/;"	f	struct:color::emphasis::rgb
rgb	lib/fmt/fmt/color.h	/^struct rgb {$/;"	s	class:color::emphasis
rgb_color	lib/fmt/fmt/color.h	/^    uint32_t rgb_color;$/;"	m	union:color::emphasis::internal::color_type::color_union
rhs	lib/fmt/fmt/compile.h	/^  R rhs;$/;"	m	struct:internal::concat
right	lib/fmt/fmt/format.h	/^enum type { none, left, right, center, numeric };$/;"	e	enum:align::type
rise_block_delay	lib/lorina/lorina/genlib.hpp	/^  double rise_block_delay;$/;"	m	struct:lorina::pin_spec
rise_fanout_delay	lib/lorina/lorina/genlib.hpp	/^  double rise_fanout_delay;$/;"	m	struct:lorina::pin_spec
rosy_brown	lib/fmt/fmt/color.h	/^  rosy_brown = 0xBC8F8F,               \/\/ rgb(188,143,143)$/;"	m	class:color
round	lib/fmt/fmt/format-inl.h	/^  void round(uint64_t d, uint64_t divisor, uint64_t& remainder,$/;"	f	struct:internal::grisu_shortest_handler
round_direction	lib/fmt/fmt/format-inl.h	/^enum class round_direction { unknown, up, down };$/;"	c	namespace:internal
royal_blue	lib/fmt/fmt/color.h	/^  royal_blue = 0x4169E1,               \/\/ rgb(65,105,225)$/;"	m	class:color
rtrim	lib/lorina/lorina/detail/utils.hpp	/^inline void rtrim( std::string& s )$/;"	f	namespace:lorina::detail
run	lib/lorina/lorina/bristol.hpp	/^  return_code run()$/;"	f	class:lorina::bristol_parser
run	lib/lorina/lorina/genlib.hpp	/^  bool run()$/;"	f	class:lorina::genlib_parser
run	lib/lorina/lorina/super.hpp	/^  bool run()$/;"	f	class:lorina::super_parser
s	lib/fmt/fmt/format.h	/^    const Char* s;$/;"	m	struct:internal::basic_writer::str_writer
saddle_brown	lib/fmt/fmt/color.h	/^  saddle_brown = 0x8B4513,             \/\/ rgb(139,69,19)$/;"	m	class:color
safe_duration_cast	lib/fmt/fmt/chrono.h	/^To safe_duration_cast(std::chrono::duration<FromRep, FromPeriod> from,$/;"	f	namespace:safe_duration_cast
safe_duration_cast	lib/fmt/fmt/chrono.h	/^namespace safe_duration_cast {$/;"	n
safe_float_conversion	lib/fmt/fmt/chrono.h	/^FMT_CONSTEXPR To safe_float_conversion(const From from, int& ec) {$/;"	f	namespace:safe_duration_cast
salmon	lib/fmt/fmt/color.h	/^  salmon = 0xFA8072,                   \/\/ rgb(250,128,114)$/;"	m	class:color
sandy_brown	lib/fmt/fmt/color.h	/^  sandy_brown = 0xF4A460,              \/\/ rgb(244,164,96)$/;"	m	class:color
sea_green	lib/fmt/fmt/color.h	/^  sea_green = 0x2E8B57,                \/\/ rgb(46,139,87)$/;"	m	class:color
sea_shell	lib/fmt/fmt/color.h	/^  sea_shell = 0xFFF5EE,                \/\/ rgb(255,245,238)$/;"	m	class:color
second	lib/fmt/fmt/chrono.h	/^  Rep second() const { return static_cast<Rep>(mod(s.count(), 60)); }$/;"	f	struct:internal::chrono_formatter
self	lib/fmt/fmt/format.h	/^      int_writer& self;$/;"	m	struct:internal::basic_writer::int_writer::hex_writer
sentinel	lib/fmt/fmt/format.h	/^  struct sentinel {};$/;"	s	class:internal::output_range
sep	lib/fmt/fmt/format.h	/^      char_type sep;$/;"	m	struct:internal::basic_writer::int_writer::num_writer
sep	lib/fmt/fmt/format.h	/^  basic_string_view<Char> sep;$/;"	m	struct:arg_join
sep	lib/fmt/fmt/ranges.h	/^  basic_string_view<Char> sep;$/;"	m	struct:tuple_arg_join
sep_size	lib/fmt/fmt/format.h	/^    enum { sep_size = 1 };$/;"	e	enum:internal::basic_writer::int_writer::__anon15
set_background_color	lib/fmt/fmt/color.h	/^  bool set_background_color;$/;"	m	class:color::emphasis::text_style
set_comment_mode	lib/lorina/lorina/detail/tokenizer.hpp	/^  void set_comment_mode( bool value = true )$/;"	f	class:lorina::detail::tokenizer_return_code::tokenizer
set_foreground_color	lib/fmt/fmt/color.h	/^  bool set_foreground_color;$/;"	m	class:color::emphasis::text_style
showpoint	lib/fmt/fmt/format.h	/^  bool showpoint : 1;$/;"	m	struct:internal::float_specs
sienna	lib/fmt/fmt/color.h	/^  sienna = 0xA0522D,                   \/\/ rgb(160,82,45)$/;"	m	class:color
sign	lib/fmt/fmt/format.h	/^  sign_t sign : 3;$/;"	m	struct:basic_format_specs
sign	lib/fmt/fmt/format.h	/^  sign_t sign : 8;$/;"	m	struct:internal::float_specs
sign	lib/fmt/fmt/format.h	/^  sign_t sign;$/;"	m	struct:internal::nonfinite_writer
sign	lib/fmt/fmt/format.h	/^namespace sign {$/;"	n
significand_size	lib/fmt/fmt/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int significand_size =$/;"	m	class:internal::fp
signs	lib/fmt/fmt/format-inl.h	/^template <typename T> const char basic_data<T>::signs[] = {0, '-', '+', ' '};$/;"	m	class:internal::basic_data
signs	lib/fmt/fmt/format.h	/^  static const char signs[];$/;"	m	struct:internal::basic_data
silver	lib/fmt/fmt/color.h	/^  silver = 0xC0C0C0,                   \/\/ rgb(192,192,192)$/;"	m	class:color
size	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR size_t size() const { return size_; }$/;"	f	class:basic_string_view
size	lib/fmt/fmt/core.h	/^  std::size_t size;$/;"	m	struct:internal::string_value
size	lib/fmt/fmt/format-inl.h	/^  int size;$/;"	m	struct:internal::fixed_handler
size	lib/fmt/fmt/format-inl.h	/^  int size;$/;"	m	struct:internal::grisu_shortest_handler
size	lib/fmt/fmt/format.h	/^      int size;$/;"	m	struct:internal::basic_writer::int_writer::num_writer
size	lib/fmt/fmt/format.h	/^    size_t size() const { return 1; }$/;"	f	struct:internal::arg_formatter_base::char_writer
size	lib/fmt/fmt/format.h	/^    size_t size() const { return bytes.size(); }$/;"	f	struct:internal::basic_writer::bytes_writer
size	lib/fmt/fmt/format.h	/^    size_t size() const { return size_; }$/;"	f	struct:internal::basic_writer::padded_int_writer
size	lib/fmt/fmt/format.h	/^    size_t size() const { return size_; }$/;"	f	struct:internal::basic_writer::str_writer
size	lib/fmt/fmt/format.h	/^    size_t size() const { return to_unsigned(num_digits) + 2; }$/;"	f	struct:internal::basic_writer::pointer_writer
size	lib/fmt/fmt/format.h	/^  size_t size() const { return buffer_.size() - 1; }$/;"	f	class:internal::utf8_to_utf16
size	lib/fmt/fmt/format.h	/^  size_t size() const { return size_; }$/;"	f	class:internal::float_writer
size	lib/fmt/fmt/format.h	/^  size_t size() const { return size_; }$/;"	f	struct:internal::fill_t
size	lib/fmt/fmt/format.h	/^  size_t size() const { return str_size + (sign ? 1 : 0); }$/;"	f	struct:internal::nonfinite_writer
size	lib/fmt/fmt/format.h	/^  std::size_t size() const {$/;"	f	class:format_int
size	lib/fmt/fmt/format.h	/^  std::size_t size;$/;"	m	struct:format_to_n_result
size	lib/fmt/fmt/os.cc	/^long long file::size() const {$/;"	f	class:file
size	lib/fmt/fmt/os.h	/^  size_t size() const { return buffer_.size() - 1; }$/;"	f	class:internal::utf16_to_utf8
size_	lib/fmt/fmt/core.h	/^                                                      size_(s.size()) {}$/;"	f	class:basic_string_view
size_	lib/fmt/fmt/core.h	/^        size_(count) {}$/;"	f	class:basic_string_view
size_	lib/fmt/fmt/core.h	/^        size_(s.size()) {}$/;"	f	class:basic_string_view
size_	lib/fmt/fmt/core.h	/^  size_t size_;$/;"	m	class:basic_string_view
size_	lib/fmt/fmt/core.h	/^  std::size_t size_;$/;"	m	class:internal::buffer
size_	lib/fmt/fmt/core.h	/^  unsigned size_;$/;"	m	class:internal::arg_map
size_	lib/fmt/fmt/format.h	/^    size_t size_;$/;"	m	struct:internal::basic_writer::padded_int_writer
size_	lib/fmt/fmt/format.h	/^    size_t size_;$/;"	m	struct:internal::basic_writer::str_writer
size_	lib/fmt/fmt/format.h	/^  size_t size_;$/;"	m	class:internal::float_writer
size_	lib/fmt/fmt/format.h	/^  unsigned char size_;$/;"	m	struct:internal::fill_t
sky_blue	lib/fmt/fmt/color.h	/^  sky_blue = 0x87CEEB,                 \/\/ rgb(135,206,235)$/;"	m	class:color
slate_blue	lib/fmt/fmt/color.h	/^  slate_blue = 0x6A5ACD,               \/\/ rgb(106,90,205)$/;"	m	class:color
slate_gray	lib/fmt/fmt/color.h	/^  slate_gray = 0x708090,               \/\/ rgb(112,128,144)$/;"	m	class:color
snow	lib/fmt/fmt/color.h	/^  snow = 0xFFFAFA,                     \/\/ rgb(255,250,250)$/;"	m	class:color
snprintf_float	lib/fmt/fmt/format-inl.h	/^int snprintf_float(T value, int precision, float_specs specs,$/;"	f	namespace:internal
solve	src/solver.cpp	/^bool Solver::solve(const std::vector<bool>& circuit) {$/;"	f	class:cirsat::Solver
space	lib/fmt/fmt/format.h	/^enum type { none, minus, plus, space };$/;"	e	enum:sign::type
spec	lib/fmt/fmt/format.h	/^  FMT_DEPRECATED format_specs* spec() { return specs_; }$/;"	f	class:internal::arg_formatter_base
spec_handler	lib/fmt/fmt/chrono.h	/^  struct spec_handler {$/;"	s	struct:formatter
specs	lib/fmt/fmt/chrono.h	/^  basic_format_specs<Char> specs;$/;"	m	struct:formatter
specs	lib/fmt/fmt/compile.h	/^    dynamic_format_specs<Char> specs;$/;"	m	struct:internal::format_part::replacement
specs	lib/fmt/fmt/format.h	/^    const Specs& specs;$/;"	m	struct:internal::basic_writer::int_writer
specs	lib/fmt/fmt/format.h	/^  format_specs* specs() { return specs_; }$/;"	f	class:internal::arg_formatter_base
specs_	lib/fmt/fmt/format.h	/^  basic_format_specs<Char>& specs_;$/;"	m	class:internal::specs_setter
specs_	lib/fmt/fmt/format.h	/^  dynamic_format_specs<char_type>& specs_;$/;"	m	class:internal::dynamic_specs_handler
specs_	lib/fmt/fmt/format.h	/^  float_specs specs_;$/;"	m	class:internal::float_writer
specs_	lib/fmt/fmt/format.h	/^  format_specs* specs_;$/;"	m	class:internal::arg_formatter_base
specs_	lib/fmt/fmt/format.h	/^  internal::dynamic_format_specs<Char> specs_;$/;"	m	class:dynamic_formatter
specs_	lib/fmt/fmt/format.h	/^  internal::dynamic_format_specs<Char> specs_;$/;"	m	struct:formatter
specs_	lib/fmt/fmt/format.h	/^  internal::dynamic_format_specs<char> specs_;$/;"	m	struct:formatter
specs_checker	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR specs_checker(const Handler& handler, internal::type arg_type)$/;"	f	class:internal::specs_checker
specs_checker	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR specs_checker(const specs_checker& other)$/;"	f	class:internal::specs_checker
specs_checker	lib/fmt/fmt/format.h	/^template <typename Handler> class specs_checker : public Handler {$/;"	c	namespace:internal
specs_handler	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR specs_handler(basic_format_specs<char_type>& specs,$/;"	f	class:internal::specs_handler
specs_handler	lib/fmt/fmt/format.h	/^class specs_handler : public specs_setter<typename Context::char_type> {$/;"	c	namespace:internal
specs_setter	lib/fmt/fmt/format.h	/^  FMT_CONSTEXPR specs_setter(const specs_setter& other)$/;"	f	class:internal::specs_setter
specs_setter	lib/fmt/fmt/format.h	/^  explicit FMT_CONSTEXPR specs_setter(basic_format_specs<Char>& specs)$/;"	f	class:internal::specs_setter
specs_setter	lib/fmt/fmt/format.h	/^template <typename Char> class specs_setter {$/;"	c	namespace:internal
split	lib/lorina/lorina/detail/utils.hpp	/^inline std::vector<std::string> split( const std::string& str, const std::string& sep )$/;"	f	namespace:lorina::detail
spring_green	lib/fmt/fmt/color.h	/^  spring_green = 0x00FF7F,             \/\/ rgb(0,255,127)$/;"	m	class:color
sprintf	lib/fmt/fmt/printf.h	/^inline std::basic_string<Char> sprintf(const S& format, const Args&... args) {$/;"	f
sprintf_format	lib/fmt/fmt/format.cc	/^char* sprintf_format(Double value, internal::buffer<char>& buf,$/;"	f	namespace:internal
sprintf_specs	lib/fmt/fmt/format.cc	/^  constexpr sprintf_specs(basic_format_specs<Char> specs)$/;"	f	struct:internal::sprintf_specs
sprintf_specs	lib/fmt/fmt/format.cc	/^struct sprintf_specs {$/;"	s	namespace:internal	file:
square	lib/fmt/fmt/format-inl.h	/^  void square() {$/;"	f	class:internal::bigint
standard	lib/fmt/fmt/chrono.h	/^  standard,$/;"	m	class:internal::numeric_system
starts_with	lib/lorina/lorina/detail/utils.hpp	/^inline bool starts_with( std::string const& s, std::string const& match )$/;"	f	namespace:lorina::detail
static_cast	lib/fmt/fmt/core.h	/^          static_cast<typename std::underlying_type<T>::type>(val))) {$/;"	f	struct:internal::arg_mapper
std_string_view	lib/fmt/fmt/core.h	/^template <typename T> struct std_string_view {};$/;"	s	namespace:internal
steel_blue	lib/fmt/fmt/color.h	/^  steel_blue = 0x4682B4,               \/\/ rgb(70,130,180)$/;"	m	class:color
store_	lib/fmt/fmt/format.h	/^  T store_[SIZE];$/;"	m	class:basic_memory_buffer
str	lib/fmt/fmt/compile.h	/^    basic_string_view<Char> str;$/;"	m	union:internal::format_part::value
str	lib/fmt/fmt/format.h	/^  basic_string_view<Char> str;$/;"	m	struct:internal::udl_arg
str	lib/fmt/fmt/format.h	/^  const char* str;$/;"	m	struct:internal::nonfinite_writer
str	lib/fmt/fmt/format.h	/^  std::string str() const { return std::string(str_, size()); }$/;"	f	class:format_int
str	lib/fmt/fmt/format.h	/^  std::wstring str() const { return {&buffer_[0], size()}; }$/;"	f	class:internal::utf8_to_utf16
str	lib/fmt/fmt/os.h	/^  std::string str() const { return std::string(&buffer_[0], size()); }$/;"	f	class:internal::utf16_to_utf8
str_	lib/fmt/fmt/format.h	/^  char* str_;$/;"	m	class:format_int
str_size	lib/fmt/fmt/format.h	/^  static constexpr size_t str_size = 3;$/;"	m	struct:internal::nonfinite_writer
str_writer	lib/fmt/fmt/format.h	/^  template <typename Char> struct str_writer {$/;"	s	class:internal::basic_writer
strerror_r	lib/fmt/fmt/format-inl.h	/^inline fmt::internal::null<> strerror_r(int, char*, ...) { return {}; }$/;"	f
strerror_s	lib/fmt/fmt/format-inl.h	/^inline fmt::internal::null<> strerror_s(char*, std::size_t, ...) { return {}; }$/;"	f
strftime	lib/fmt/fmt/chrono.h	/^inline std::size_t strftime(char* str, std::size_t count, const char* format,$/;"	f	namespace:internal
strftime	lib/fmt/fmt/chrono.h	/^inline std::size_t strftime(wchar_t* str, std::size_t count,$/;"	f	namespace:internal
strikethrough	lib/fmt/fmt/color.h	/^  strikethrough = 1 << 3$/;"	m	class:color::emphasis
string	lib/fmt/fmt/core.h	/^    string_value<char_type> string;$/;"	m	union:internal::value::__anon6
string_type	lib/fmt/fmt/core.h	/^  string_type,$/;"	m	class:internal::type
string_value	lib/fmt/fmt/core.h	/^template <typename Char> struct string_value {$/;"	s	namespace:internal
strtod	lib/fmt/fmt/os.h	/^  double strtod(const char*& str) const {$/;"	f	class:locale
strtod_l	lib/fmt/fmt/os.h	/^  static double strtod_l(const char* nptr, char** endptr, _locale_t loc) {$/;"	f	class:locale
style	lib/rang/rang/rang.hpp	/^enum class style {$/;"	c	namespace:rang
subtract_aligned	lib/fmt/fmt/format-inl.h	/^  void subtract_aligned(const bigint& other) {$/;"	f	class:internal::bigint
subtract_bigits	lib/fmt/fmt/format-inl.h	/^  void subtract_bigits(int index, bigit other, bigit& borrow) {$/;"	f	class:internal::bigint
success	lib/lorina/lorina/common.hpp	/^  success = 0,$/;"	m	class:lorina::return_code
super_parser	lib/lorina/lorina/super.hpp	/^  explicit super_parser( std::istream& in, super_reader const& reader, diagnostic_engine* diag )$/;"	f	class:lorina::super_parser
super_parser	lib/lorina/lorina/super.hpp	/^class super_parser$/;"	c	namespace:lorina
super_reader	lib/lorina/lorina/super.hpp	/^class super_reader$/;"	c	namespace:lorina
system_error	lib/fmt/fmt/format.h	/^  system_error() : std::runtime_error(""), error_code_(0) {}$/;"	f	class:system_error
system_error	lib/fmt/fmt/format.h	/^  system_error(int error_code, string_view message, const Args&... args)$/;"	f	class:system_error
system_error	lib/fmt/fmt/format.h	/^class FMT_API system_error : public std::runtime_error {$/;"	c
tan	lib/fmt/fmt/color.h	/^  tan = 0xD2B48C,                      \/\/ rgb(210,180,140)$/;"	m	class:color
teal	lib/fmt/fmt/color.h	/^  teal = 0x008080,                     \/\/ rgb(0,128,128)$/;"	m	class:color
templates_path	docs/source/conf.py	/^templates_path = ['_templates']$/;"	v
term_color	lib/fmt/fmt/color.h	/^    uint8_t term_color;$/;"	m	union:color::emphasis::internal::color_type::color_union
terminal_color	lib/fmt/fmt/color.h	/^enum class terminal_color : uint8_t {$/;"	c	class:color
test_stream	lib/fmt/fmt/ostream.h	/^template <typename Char> struct test_stream : std::basic_ostream<Char> {$/;"	s	namespace:internal
text	lib/fmt/fmt/compile.h	/^  enum class kind { arg_index, arg_name, text, replacement };$/;"	m	class:internal::format_part::kind
text	lib/fmt/fmt/compile.h	/^template <typename Char> struct text {$/;"	s	namespace:internal
text_diagnostics	lib/lorina/lorina/diagnostics.hpp	/^class text_diagnostics : public diagnostic_consumer$/;"	c	namespace:lorina
text_style	lib/fmt/fmt/color.h	/^class text_style {$/;"	c	class:color::emphasis
thistle	lib/fmt/fmt/color.h	/^  thistle = 0xD8BFD8,                  \/\/ rgb(216,191,216)$/;"	m	class:color
thousands_sep	lib/fmt/fmt/format.h	/^template <> inline wchar_t thousands_sep(locale_ref loc) {$/;"	f	namespace:internal
thousands_sep	lib/fmt/fmt/format.h	/^template <typename Char> inline Char thousands_sep(locale_ref loc) {$/;"	f	namespace:internal
thousands_sep_impl	lib/fmt/fmt/format-inl.h	/^template <typename Char> FMT_FUNC Char thousands_sep_impl(locale_ref loc) {$/;"	f	namespace:internal
time	lib/fmt/fmt/chrono.h	/^  std::tm time() const {$/;"	f	struct:internal::chrono_formatter
tm_format	lib/fmt/fmt/chrono.h	/^  basic_memory_buffer<Char> tm_format;$/;"	m	struct:formatter
to_char8_t	lib/fmt/fmt/format.h	/^inline char8_type to_char8_t(char c) { return static_cast<char8_type>(c); }$/;"	f	namespace:internal
to_nonnegative_int	lib/fmt/fmt/chrono.h	/^inline int to_nonnegative_int(T value, int upper) {$/;"	f	namespace:internal
to_string	lib/fmt/fmt/format.h	/^std::basic_string<Char> to_string(const basic_memory_buffer<Char, SIZE>& buf) {$/;"	f
to_string	lib/fmt/fmt/format.h	/^template <typename T> inline std::string to_string(const T& value) {$/;"	f
to_string_view	lib/fmt/fmt/core.h	/^constexpr basic_string_view<typename S::char_type> to_string_view(const S& s) {$/;"	f
to_string_view	lib/fmt/fmt/core.h	/^inline basic_string_view<Char> to_string_view($/;"	f
to_string_view	lib/fmt/fmt/core.h	/^inline basic_string_view<Char> to_string_view(basic_string_view<Char> s) {$/;"	f
to_string_view	lib/fmt/fmt/core.h	/^inline basic_string_view<Char> to_string_view(const Char* s) {$/;"	f
to_uintptr	lib/fmt/fmt/format.h	/^inline fallback_uintptr to_uintptr(const void* p) {$/;"	f	namespace:internal
to_uintptr	lib/fmt/fmt/format.h	/^inline uintptr_t to_uintptr(const void* p) { return bit_cast<uintptr_t>(p); }$/;"	f	namespace:internal
to_unsigned	lib/fmt/fmt/core.h	/^FMT_CONSTEXPR typename std::make_unsigned<Int>::type to_unsigned(Int value) {$/;"	f	namespace:internal
to_wstring	lib/fmt/fmt/format.h	/^template <typename T> inline std::wstring to_wstring(const T& value) {$/;"	f
tok	lib/lorina/lorina/verilog.hpp	/^  detail::tokenizer tok;$/;"	m	class:lorina::verilog_parser
token	lib/lorina/lorina/verilog.hpp	/^  std::string token;$/;"	m	class:lorina::verilog_parser
tokenizer	lib/lorina/lorina/detail/tokenizer.hpp	/^  explicit tokenizer( std::istream& is )$/;"	f	class:lorina::detail::tokenizer_return_code::tokenizer
tokenizer	lib/lorina/lorina/detail/tokenizer.hpp	/^class tokenizer$/;"	c	class:lorina::detail::tokenizer_return_code
tokenizer_return_code	lib/lorina/lorina/detail/tokenizer.hpp	/^enum class tokenizer_return_code$/;"	c	namespace:lorina::detail
tokens	lib/lorina/lorina/verilog.hpp	/^  std::queue<std::string> tokens; \/* lookahead *\/$/;"	m	class:lorina::verilog_parser
tomato	lib/fmt/fmt/color.h	/^  tomato = 0xFF6347,                   \/\/ rgb(255,99,71)$/;"	m	class:color
trim	lib/lorina/lorina/detail/utils.hpp	/^inline void trim( std::string& s )$/;"	f	namespace:lorina::detail
trim_copy	lib/lorina/lorina/detail/utils.hpp	/^inline std::string trim_copy( std::string s )$/;"	f	namespace:lorina::detail
truncating_iterator	lib/fmt/fmt/format.h	/^  truncating_iterator(OutputIt out, std::size_t limit)$/;"	f	class:internal::truncating_iterator
truncating_iterator	lib/fmt/fmt/format.h	/^class truncating_iterator<OutputIt, std::false_type>$/;"	c	namespace:internal
truncating_iterator	lib/fmt/fmt/format.h	/^class truncating_iterator<OutputIt, std::true_type>$/;"	c	namespace:internal
truncating_iterator_base	lib/fmt/fmt/format.h	/^  truncating_iterator_base(OutputIt out, std::size_t limit)$/;"	f	class:internal::truncating_iterator_base
truncating_iterator_base	lib/fmt/fmt/format.h	/^template <typename OutputIt> class truncating_iterator_base {$/;"	c	namespace:internal
tuple	lib/fmt/fmt/ranges.h	/^  const std::tuple<T...>& tuple;$/;"	m	struct:tuple_arg_join
tuple_arg_join	lib/fmt/fmt/ranges.h	/^  tuple_arg_join(const std::tuple<T...>& t, basic_string_view<Char> s)$/;"	f	struct:tuple_arg_join
tuple_arg_join	lib/fmt/fmt/ranges.h	/^template <typename Char, typename... T> struct tuple_arg_join : internal::view {$/;"	s
turquoise	lib/fmt/fmt/color.h	/^  turquoise = 0x40E0D0,                \/\/ rgb(64,224,208)$/;"	m	class:color
type	lib/fmt/fmt/core.h	/^  internal::type type() const { return type_; }$/;"	f	class:basic_format_arg
type	lib/fmt/fmt/core.h	/^enum class type {$/;"	c	namespace:internal
type	lib/fmt/fmt/format.cc	/^  char type;$/;"	m	struct:internal::sprintf_specs	file:
type	lib/fmt/fmt/format.h	/^  char type;$/;"	m	struct:basic_format_specs
type	lib/fmt/fmt/format.h	/^enum type { none, left, right, center, numeric };$/;"	g	namespace:align
type	lib/fmt/fmt/format.h	/^enum type { none, minus, plus, space };$/;"	g	namespace:sign
type_	lib/fmt/fmt/core.h	/^  internal::type type_;$/;"	m	class:basic_format_arg
type_	lib/fmt/fmt/format.h	/^  char type_;$/;"	m	class:internal::char_specs_checker
type_	lib/fmt/fmt/printf.h	/^  char_type type_;$/;"	m	class:internal::arg_converter
type_constant	lib/fmt/fmt/core.h	/^struct type_constant : std::integral_constant<type, type::custom_type> {};$/;"	s	namespace:internal
type_identity	lib/fmt/fmt/core.h	/^template <typename T> struct type_identity { using type = T; };$/;"	s
type_list	lib/fmt/fmt/compile.h	/^template <typename... Args> struct type_list {};$/;"	s	namespace:internal
typed_node	lib/fmt/fmt/core.h	/^    FMT_CONSTEXPR typed_node(const Arg& arg) : value(arg) {}$/;"	f	struct:internal::dynamic_arg_list::typed_node
typed_node	lib/fmt/fmt/core.h	/^    FMT_CONSTEXPR typed_node(const basic_string_view<Char>& arg)$/;"	f	struct:internal::dynamic_arg_list::typed_node
typed_node	lib/fmt/fmt/core.h	/^  template <typename T> struct typed_node : node<> {$/;"	s	class:internal::dynamic_arg_list
u8string_view	lib/fmt/fmt/format.h	/^  u8string_view(const char* s)$/;"	f	class:u8string_view
u8string_view	lib/fmt/fmt/format.h	/^class FMT_DEPRECATED u8string_view$/;"	c
udl_arg	lib/fmt/fmt/format.h	/^template <typename Char> struct udl_arg {$/;"	s	namespace:internal
udl_formatter	lib/fmt/fmt/format.h	/^template <typename Char, Char... CHARS> class udl_formatter {$/;"	c	namespace:internal
uint128_t	lib/fmt/fmt/core.h	/^struct uint128_t {};$/;"	s	namespace:internal
uint128_type	lib/fmt/fmt/core.h	/^  uint128_type,$/;"	m	class:internal::type
uint128_value	lib/fmt/fmt/core.h	/^    uint128_t uint128_value;$/;"	m	union:internal::value::__anon6
uint_type	lib/fmt/fmt/core.h	/^  uint_type,$/;"	m	class:internal::type
uint_value	lib/fmt/fmt/core.h	/^    unsigned uint_value;$/;"	m	union:internal::value::__anon6
ulong_long_type	lib/fmt/fmt/core.h	/^  ulong_long_type,$/;"	m	class:internal::type
ulong_long_value	lib/fmt/fmt/core.h	/^    unsigned long long ulong_long_value;$/;"	m	union:internal::value::__anon6
underline	lib/fmt/fmt/color.h	/^  underline = 1 << 2,$/;"	m	class:color::emphasis
underline	lib/rang/rang/rang.hpp	/^    underline = 4,$/;"	m	class:rang::style
unknown	lib/fmt/fmt/format-inl.h	/^enum class round_direction { unknown, up, down };$/;"	m	class:internal::round_direction
unknown_format	lib/fmt/fmt/compile.h	/^struct unknown_format {};$/;"	s	namespace:internal
unresolved_dependencies	lib/lorina/lorina/detail/utils.hpp	/^  std::vector<std::pair<std::string,std::string>> unresolved_dependencies()$/;"	f	class:lorina::detail::call_in_topological_order
up	lib/fmt/fmt/format-inl.h	/^enum class round_direction { unknown, up, down };$/;"	m	class:internal::round_direction
upper	lib/fmt/fmt/format-inl.h	/^  uint64_t upper;$/;"	m	struct:internal::accumulator
upper	lib/fmt/fmt/format-inl.h	/^  uint64_t upper;$/;"	m	struct:internal::boundaries
upper	lib/fmt/fmt/format.h	/^  bool upper : 1;$/;"	m	struct:internal::float_specs
use_grisu	lib/fmt/fmt/format.h	/^  bool use_grisu : 1;$/;"	m	struct:internal::float_specs
use_grisu	lib/fmt/fmt/format.h	/^template <typename T> constexpr bool use_grisu() {$/;"	f	namespace:internal
utf16_to_utf8	lib/fmt/fmt/os.cc	/^internal::utf16_to_utf8::utf16_to_utf8(wstring_view s) {$/;"	f	class:internal::utf16_to_utf8
utf16_to_utf8	lib/fmt/fmt/os.h	/^  utf16_to_utf8() {}$/;"	f	class:internal::utf16_to_utf8
utf16_to_utf8	lib/fmt/fmt/os.h	/^class utf16_to_utf8 {$/;"	c	namespace:internal
utf8_decode	lib/fmt/fmt/format-inl.h	/^FMT_FUNC const char* utf8_decode(const char* buf, uint32_t* c, int* e) {$/;"	f	namespace:internal
utf8_to_utf16	lib/fmt/fmt/format-inl.h	/^FMT_FUNC internal::utf8_to_utf16::utf8_to_utf16(string_view s) {$/;"	f	class:internal::utf8_to_utf16
utf8_to_utf16	lib/fmt/fmt/format.h	/^class utf8_to_utf16 {$/;"	c	namespace:internal
val	lib/fmt/fmt/compile.h	/^  } val;$/;"	m	struct:internal::format_part	typeref:union:internal::format_part::value
val	lib/fmt/fmt/format.h	/^  } val;$/;"	m	struct:internal::arg_ref	typeref:union:internal::arg_ref::value
valid	lib/lorina/lorina/detail/tokenizer.hpp	/^, valid   = 1$/;"	m	class:lorina::detail::tokenizer_return_code
valid	lib/lorina/lorina/verilog.hpp	/^  bool valid = false;$/;"	m	class:lorina::verilog_parser
value	lib/fmt/fmt/color.h	/^  } value;$/;"	m	struct:color::emphasis::internal::color_type	typeref:union:color::emphasis::internal::color_type::color_union
value	lib/fmt/fmt/compile.h	/^    FMT_CONSTEXPR value(basic_string_view<Char> s) : str(s) {}$/;"	f	union:internal::format_part::value
value	lib/fmt/fmt/compile.h	/^    FMT_CONSTEXPR value(int index = 0) : arg_index(index) {}$/;"	f	union:internal::format_part::value
value	lib/fmt/fmt/compile.h	/^    FMT_CONSTEXPR value(replacement r) : repl(r) {}$/;"	f	union:internal::format_part::value
value	lib/fmt/fmt/compile.h	/^  union value {$/;"	u	struct:internal::format_part
value	lib/fmt/fmt/core.h	/^    T value;$/;"	m	struct:internal::dynamic_arg_list::typed_node
value	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR value(int val = 0) : int_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  FMT_CONSTEXPR value(unsigned val) : uint_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  const void* value;$/;"	m	struct:internal::custom_value
value	lib/fmt/fmt/core.h	/^  template <typename T> value(const T& val) {$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(basic_string_view<char_type> val) {$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(bool val) : bool_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(char_type val) : char_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(const char_type* val) { string.data = val; }$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(const named_arg_base<char_type>& val) { named_arg = &val; }$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(const void* val) : pointer(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(double val) : double_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(float val) : float_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(int128_t val) : int128_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(long double val) : long_double_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(long long val) : long_long_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(uint128_t val) : uint128_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^  value(unsigned long long val) : ulong_long_value(val) {}$/;"	f	class:internal::value
value	lib/fmt/fmt/core.h	/^template <typename Context> class value {$/;"	c	namespace:internal
value	lib/fmt/fmt/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int value =$/;"	m	struct:internal::bits
value	lib/fmt/fmt/format.h	/^    FMT_CONSTEXPR value(basic_string_view<Char> n) : name(n) {}$/;"	f	union:internal::arg_ref::value
value	lib/fmt/fmt/format.h	/^    FMT_CONSTEXPR value(int id = 0) : index{id} {}$/;"	f	union:internal::arg_ref::value
value	lib/fmt/fmt/format.h	/^    UIntPtr value;$/;"	m	struct:internal::basic_writer::pointer_writer
value	lib/fmt/fmt/format.h	/^    char_type value;$/;"	m	struct:internal::arg_formatter_base::char_spec_handler
value	lib/fmt/fmt/format.h	/^    char_type value;$/;"	m	struct:internal::arg_formatter_base::char_writer
value	lib/fmt/fmt/format.h	/^    const char_type* value;$/;"	m	struct:internal::arg_formatter_base::cstring_spec_handler
value	lib/fmt/fmt/format.h	/^  enum { value = !std::is_const<remove_reference_t<type>>::value };$/;"	e	enum:internal::is_output_iterator::__anon12
value	lib/fmt/fmt/format.h	/^  union value {$/;"	u	struct:internal::arg_ref
value	lib/fmt/fmt/format.h	/^  unsigned char value[sizeof(void*)];$/;"	m	struct:internal::fallback_uintptr
value	lib/fmt/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	class:internal::is_like_std_string
value	lib/fmt/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	class:internal::is_tuple_like_
value	lib/fmt/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	struct:is_range
value	lib/fmt/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	struct:is_tuple_like
value_	lib/fmt/fmt/core.h	/^  internal::value<Context> value_;$/;"	m	class:basic_format_arg
value_	lib/fmt/fmt/os.h	/^  explicit error_code(int value = 0) FMT_NOEXCEPT : value_(value) {}$/;"	f	class:error_code
value_	lib/fmt/fmt/os.h	/^  int value_;$/;"	m	class:error_code
value_type	lib/fmt/fmt/format.h	/^  struct value_type {$/;"	s	class:internal::counting_iterator
verilog_parser	lib/lorina/lorina/verilog.hpp	/^  verilog_parser( std::istream& in, const verilog_reader& reader, diagnostic_engine* diag = nullptr )$/;"	f	class:lorina::verilog_parser
verilog_parser	lib/lorina/lorina/verilog.hpp	/^class verilog_parser$/;"	c	namespace:lorina
verilog_pretty_printer	lib/lorina/lorina/verilog.hpp	/^  verilog_pretty_printer( std::ostream& os = std::cout )$/;"	f	class:lorina::verilog_pretty_printer
verilog_pretty_printer	lib/lorina/lorina/verilog.hpp	/^class verilog_pretty_printer : public verilog_reader$/;"	c	namespace:lorina
verilog_reader	lib/lorina/lorina/verilog.hpp	/^class verilog_reader$/;"	c	namespace:lorina
verilog_regex	lib/lorina/lorina/verilog_regex.hpp	/^namespace verilog_regex$/;"	n	namespace:lorina
verilog_writer	lib/lorina/lorina/verilog.hpp	/^  explicit verilog_writer( std::ostream& os )$/;"	f	class:lorina::verilog_writer
verilog_writer	lib/lorina/lorina/verilog.hpp	/^class verilog_writer$/;"	c	namespace:lorina
vformat	lib/fmt/fmt/color.h	/^inline std::basic_string<Char> vformat($/;"	f	class:color::emphasis
vformat	lib/fmt/fmt/format.h	/^inline std::basic_string<Char> internal::vformat($/;"	f	class:internal
vformat	lib/fmt/fmt/locale.h	/^inline std::basic_string<Char> vformat($/;"	f
vformat	lib/fmt/fmt/locale.h	/^std::basic_string<Char> vformat($/;"	f	namespace:internal
vformat_to	lib/fmt/fmt/color.h	/^void vformat_to(basic_memory_buffer<Char>& buf, const text_style& ts,$/;"	f	namespace:color::emphasis::internal
vformat_to	lib/fmt/fmt/format.h	/^inline OutputIt vformat_to($/;"	f
vformat_to	lib/fmt/fmt/format.h	/^inline typename buffer_context<Char>::iterator vformat_to($/;"	f
vformat_to	lib/fmt/fmt/format.h	/^typename Context::iterator vformat_to($/;"	f
vformat_to	lib/fmt/fmt/format.h	/^typename buffer_context<Char>::iterator internal::vformat_to($/;"	f	class:internal
vformat_to	lib/fmt/fmt/locale.h	/^inline OutputIt vformat_to($/;"	f
vformat_to	lib/fmt/fmt/locale.h	/^typename buffer_context<Char>::iterator vformat_to($/;"	f	namespace:internal
vformat_to_n	lib/fmt/fmt/format.h	/^inline format_to_n_result<OutputIt> vformat_to_n($/;"	f
vfprintf	lib/fmt/fmt/printf.h	/^inline int vfprintf($/;"	f
violet	lib/fmt/fmt/color.h	/^  violet = 0xEE82EE,                   \/\/ rgb(238,130,238)$/;"	m	class:color
void_t_impl	lib/fmt/fmt/core.h	/^template <typename... Ts> struct void_t_impl { using type = void; };$/;"	s	namespace:internal
vprint	lib/fmt/fmt/color.h	/^void vprint(std::FILE* f, const text_style& ts, const S& format,$/;"	f	class:color::emphasis
vprint	lib/fmt/fmt/format-inl.h	/^FMT_FUNC void vprint(std::FILE* f, string_view format_str, format_args args) {$/;"	f
vprint	lib/fmt/fmt/format-inl.h	/^FMT_FUNC void vprint(string_view format_str, format_args args) {$/;"	f
vprint	lib/fmt/fmt/format.h	/^void vprint(basic_string_view<Char> format_str, wformat_args args) {$/;"	f
vprint	lib/fmt/fmt/format.h	/^void vprint(std::FILE* f, basic_string_view<Char> format_str,$/;"	f
vprint	lib/fmt/fmt/os.h	/^  void vprint(string_view format_str, format_args args) {$/;"	f	class:buffered_file
vprint_mojibake	lib/fmt/fmt/format-inl.h	/^FMT_FUNC void internal::vprint_mojibake(std::FILE* f, string_view format_str,$/;"	f	class:internal
vprintf	lib/fmt/fmt/printf.h	/^inline int vprintf($/;"	f
vprintf	lib/fmt/fmt/printf.h	/^typename ArgFormatter::iterator vprintf($/;"	f
vsprintf	lib/fmt/fmt/printf.h	/^inline std::basic_string<Char> vsprintf($/;"	f
warning	lib/lorina/lorina/diagnostics.hpp	/^  warning = 4,$/;"	m	class:lorina::diagnostic_level
wheat	lib/fmt/fmt/color.h	/^  wheat = 0xF5DEB3,                    \/\/ rgb(245,222,179)$/;"	m	class:color
white	lib/fmt/fmt/color.h	/^  white = 0xFFFFFF,                    \/\/ rgb(255,255,255)$/;"	m	class:color
white	lib/fmt/fmt/color.h	/^  white,$/;"	m	class:color::terminal_color
white_smoke	lib/fmt/fmt/color.h	/^  white_smoke = 0xF5F5F5,              \/\/ rgb(245,245,245)$/;"	m	class:color
width	lib/fmt/fmt/format.h	/^    size_t width() const { return 1; }$/;"	f	struct:internal::arg_formatter_base::char_writer
width	lib/fmt/fmt/format.h	/^    size_t width() const { return bytes.size(); }$/;"	f	struct:internal::basic_writer::bytes_writer
width	lib/fmt/fmt/format.h	/^    size_t width() const { return size(); }$/;"	f	struct:internal::basic_writer::pointer_writer
width	lib/fmt/fmt/format.h	/^    size_t width() const { return size_; }$/;"	f	struct:internal::basic_writer::padded_int_writer
width	lib/fmt/fmt/format.h	/^    size_t width() const {$/;"	f	struct:internal::basic_writer::str_writer
width	lib/fmt/fmt/format.h	/^  int width;$/;"	m	struct:basic_format_specs
width	lib/fmt/fmt/format.h	/^  size_t width() const { return size(); }$/;"	f	class:internal::float_writer
width	lib/fmt/fmt/format.h	/^  size_t width() const { return size(); }$/;"	f	struct:internal::nonfinite_writer
width_adapter	lib/fmt/fmt/format.h	/^  explicit FMT_CONSTEXPR width_adapter(SpecHandler& h) : handler(h) {}$/;"	f	struct:internal::width_adapter
width_adapter	lib/fmt/fmt/format.h	/^template <typename SpecHandler, typename Char> struct width_adapter {$/;"	s	namespace:internal
width_checker	lib/fmt/fmt/format.h	/^  explicit FMT_CONSTEXPR width_checker(ErrorHandler& eh) : handler_(eh) {}$/;"	f	class:internal::width_checker
width_checker	lib/fmt/fmt/format.h	/^template <typename ErrorHandler> class width_checker {$/;"	c	namespace:internal
width_ref	lib/fmt/fmt/format.h	/^  arg_ref<Char> width_ref;$/;"	m	struct:internal::dynamic_format_specs
winTerm	lib/rang/rang/rang.hpp	/^enum class winTerm {  \/\/ Windows Terminal Mode$/;"	c	class:rang::style::fg::bg::fgB::bgB::control
windows_error	lib/fmt/fmt/os.h	/^  windows_error(int error_code, string_view message, const Args&... args) {$/;"	f	class:windows_error
windows_error	lib/fmt/fmt/os.h	/^class windows_error : public system_error {$/;"	c
word_exp_filename	lib/lorina/lorina/detail/utils.hpp	/^inline const std::string& word_exp_filename( const std::string& filename )$/;"	f	namespace:lorina::detail
word_exp_filename	lib/lorina/lorina/detail/utils.hpp	/^inline std::string word_exp_filename( const std::string& filename )$/;"	f	namespace:lorina::detail
wreset_color	lib/fmt/fmt/format-inl.h	/^template <typename T> const wchar_t basic_data<T>::wreset_color[] = L"\\x1b[0m";$/;"	m	class:internal::basic_data
wreset_color	lib/fmt/fmt/format.h	/^  static const wchar_t wreset_color[5];$/;"	m	struct:internal::basic_data
write	lib/fmt/fmt/chrono.h	/^  void write(Rep value, int width) {$/;"	f	struct:internal::chrono_formatter
write	lib/fmt/fmt/format.h	/^  void write(Char value) {$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(T value, format_specs specs = {}) {$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(basic_string_view<Char> s, const format_specs& specs = {}) {$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(bool value) {$/;"	f	class:internal::arg_formatter_base
write	lib/fmt/fmt/format.h	/^  void write(char value) {$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(const Char* s, std::size_t size, const format_specs& specs) {$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(const char_type* value) {$/;"	f	class:internal::arg_formatter_base
write	lib/fmt/fmt/format.h	/^  void write(int value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(int128_t value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(long long value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(long value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(string_view value) {$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(uint128_t value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(unsigned long long value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(unsigned long value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(unsigned value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/format.h	/^  void write(wstring_view value) {$/;"	f	class:internal::basic_writer
write	lib/fmt/fmt/os.cc	/^std::size_t file::write(const void* buffer, std::size_t count) {$/;"	f	class:file
write_bytes	lib/fmt/fmt/format.h	/^  void write_bytes(string_view bytes, const format_specs& specs) {$/;"	f	class:internal::basic_writer
write_char	lib/fmt/fmt/format.h	/^  void write_char(char_type value) {$/;"	f	class:internal::arg_formatter_base
write_decimal	lib/fmt/fmt/format.h	/^  template <typename Int> void write_decimal(Int value) {$/;"	f	class:internal::basic_writer
write_exponent	lib/fmt/fmt/format.h	/^template <typename Char, typename It> It write_exponent(int exp, It it) {$/;"	f	namespace:internal
write_int	lib/fmt/fmt/format.h	/^  void write_int(T value, const Spec& spec) {$/;"	f	class:internal::basic_writer
write_int	lib/fmt/fmt/format.h	/^  void write_int(int num_digits, string_view prefix, format_specs specs, F f) {$/;"	f	class:internal::basic_writer
write_nan	lib/fmt/fmt/chrono.h	/^  void write_nan() { std::copy_n("nan", 3, out); }$/;"	f	struct:internal::chrono_formatter
write_ninf	lib/fmt/fmt/chrono.h	/^  void write_ninf() { std::copy_n("-inf", 4, out); }$/;"	f	struct:internal::chrono_formatter
write_null_pointer	lib/fmt/fmt/printf.h	/^  void write_null_pointer(char) {$/;"	f	class:printf_arg_formatter
write_null_pointer	lib/fmt/fmt/printf.h	/^  void write_null_pointer(wchar_t) {$/;"	f	class:printf_arg_formatter
write_padded	lib/fmt/fmt/format.h	/^  template <typename F> void write_padded(const format_specs& specs, F&& f) {$/;"	f	class:internal::basic_writer
write_pinf	lib/fmt/fmt/chrono.h	/^  void write_pinf() { std::copy_n("inf", 3, out); }$/;"	f	struct:internal::chrono_formatter
write_pointer	lib/fmt/fmt/format.h	/^  void write_pointer(UIntPtr value, const format_specs* specs) {$/;"	f	class:internal::basic_writer
write_pointer	lib/fmt/fmt/format.h	/^  void write_pointer(const void* p) {$/;"	f	class:internal::arg_formatter_base
write_sign	lib/fmt/fmt/chrono.h	/^  void write_sign() {$/;"	f	struct:internal::chrono_formatter
writer	lib/fmt/fmt/format.h	/^  writer_type& writer() { return writer_; }$/;"	f	class:internal::arg_formatter_base
yellow	lib/fmt/fmt/color.h	/^  yellow = 0xFFFF00,                   \/\/ rgb(255,255,0)$/;"	m	class:color
yellow	lib/fmt/fmt/color.h	/^  yellow,$/;"	m	class:color::terminal_color
yellow	lib/rang/rang/rang.hpp	/^    yellow  = 103,$/;"	m	class:rang::style::fg::bg::fgB::bgB
yellow	lib/rang/rang/rang.hpp	/^    yellow  = 33,$/;"	m	class:rang::style::fg
yellow	lib/rang/rang/rang.hpp	/^    yellow  = 43,$/;"	m	class:rang::style::fg::bg
yellow	lib/rang/rang/rang.hpp	/^    yellow  = 93,$/;"	m	class:rang::style::fg::bg::fgB
yellow_green	lib/fmt/fmt/color.h	/^  yellow_green = 0x9ACD32              \/\/ rgb(154,205,50)$/;"	m	class:color
zero_or_powers_of_10_32	lib/fmt/fmt/format-inl.h	/^const uint32_t basic_data<T>::zero_or_powers_of_10_32[] = {0,$/;"	m	class:internal::basic_data
zero_or_powers_of_10_32	lib/fmt/fmt/format.h	/^  static const uint32_t zero_or_powers_of_10_32[];$/;"	m	struct:internal::basic_data
zero_or_powers_of_10_64	lib/fmt/fmt/format-inl.h	/^const uint64_t basic_data<T>::zero_or_powers_of_10_64[] = {$/;"	m	class:internal::basic_data
zero_or_powers_of_10_64	lib/fmt/fmt/format.h	/^  static const uint64_t zero_or_powers_of_10_64[];$/;"	m	struct:internal::basic_data
~Solver	src/solver.cpp	/^Solver::~Solver() {$/;"	f	class:cirsat::Solver
~arg_map	lib/fmt/fmt/core.h	/^  ~arg_map() { delete[] map_; }$/;"	f	class:internal::arg_map
~bigint	lib/fmt/fmt/format-inl.h	/^  ~bigint() { assert(bigits_.capacity() <= bigits_capacity); }$/;"	f	class:internal::bigint
~bristol_reader	lib/lorina/lorina/bristol.hpp	/^  virtual ~bristol_reader() {}$/;"	f	class:lorina::bristol_reader
~diagnostic_builder	lib/lorina/lorina/diagnostics.hpp	/^inline diagnostic_builder::~diagnostic_builder()$/;"	f	class:lorina::diagnostic_builder
~locale	lib/fmt/fmt/os.h	/^  ~locale() { freelocale(locale_); }$/;"	f	class:locale
